plugins {
    id 'java'
    id 'application'
   	id 'antlr'
   	id 'eclipse'
    id 'com.diffplug.spotless' version '5.15.0'
    id 'checkstyle' 
}

repositories {
    mavenCentral()
    maven {
        url 'https://plugins.gradle.org/m2/'
    }
    maven {
        name = 'GitHubPackages'
        url = 'https://maven.pkg.github.com/lisa-analyzer/lisa'
 		credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")       }
    }
}

group = 'it.unive'
version = '0.1'
mainClassName = 'it.unive.golisa.GoLiSA'

dependencies {
    antlr 'org.antlr:antlr4:4.11.1'    
    testImplementation 'junit:junit:4.12'
    implementation 'io.github.lisa-analyzer:lisa-program:0.1b8'
    implementation 'io.github.lisa-analyzer:lisa-analyses:0.1b8'
    implementation 'io.github.lisa-analyzer:lisa-sdk:0.1b8'
    implementation 'com.github.unive-ssv:tarsis:1.0'      
    implementation group: 'commons-cli', name: 'commons-cli', version: '1.5.0'
    
    implementation 'javax.xml.bind:jaxb-api:2.2.4'
	implementation 'com.sun.xml.bind:jaxb-impl:2.3.2'
	implementation 'com.sun.xml.bind:jaxb-core:2.3.0.1'	
}

jar {
    manifest {
        attributes(
                'Main-Class': 'it.unive.golisa.cli.GoLiSA'
        )
    }
}

generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ["-visitor", "-no-listener"]
    
        doLast {
    	copy {
      		from 'build/generated-src/antlr/main/'
      		include '*.*'
      		into 'build/generated-src/antlr/main/it/unive/golisa/antlr'
    	}
   		project.delete fileTree('build/generated-src/antlr/main').include('*.*')
  	}
}

checkstyle {
    configFile = file(new File(rootProject.projectDir, 'checkstyle-config.xml'))
    sourceSets = []
    showViolations = true
    toolVersion '8.38' 
}

checkstyleTest.enabled = false

checkstyleMain {
    finalizedBy 'checkstyleErrorMessage'
    exclude 'it/unive/golisa/antlr/*.java'
    exclude 'it/unive/golisa/golang/util/*.java'
    exclude 'it/unive/golisa/golang/api/signature/*.java'
}

task checkstyleErrorMessage {
    onlyIf {
        checkstyleMain.state.failure != null
    }
    doLast {
        logger.error('Checkstyle plugin thrown an error. This means that the javadoc is not correctly setup. Inspect console output to find problematic javadocs.')
        logger.error('To reproduce locally, execute \'./gradlew checkstyleMain\'')
    }
}

spotless {
    enforceCheck = false
    encoding 'UTF-8'
    lineEndings 'UNIX'
    java {
        // tabs, no spaces
        indentWithTabs()
    
        // keep imports clean 
        importOrder() 
        removeUnusedImports()
    
        // use the eclipse formatting with the one provided with the project
        eclipse().configFile(new File(rootProject.projectDir, 'spotless-formatting.xml'))
    
        // ignore generated code
        target project.fileTree(project.projectDir) {
            include '**/*.java'
            exclude '**/build/generated/**'
            exclude '**/build/generated-src/**'
            exclude '**/target/generated-sources/**'
        }
    }
    antlr4 {
        target 'src/*/antlr/**/*.g4'
        antlr4Formatter() 
    }
}

spotlessJava {
	// declaring explicit dependencies
	dependsOn 'compileJava', 'compileTestJava', 'processTestResources', 'spotlessAntlr4'
}

spotlessJavaCheck { 
    finalizedBy 'spotlessErrorMessage'
}

spotlessAntlr4Check { 
    finalizedBy 'spotlessErrorMessage'
}

task spotlessErrorMessage {
    onlyIf {
        spotlessJavaCheck.state.failure != null || spotlessAntlr4Check.state.failure != null
    }
    doLast {
        logger.error('Spotless plugin thrown an error. This means that the code is not correctly formatted.')
        logger.error('To reproduce locally, execute \'./gradlew spotlessCheck\'')
        logger.error('To automatically fix all the problems, execute \'./gradlew spotlessApply\'')
    }
}

tasks.register('checkCodeStyle') {
    group = 'verification'
    description = 'Execute spotless and checkstyle to ensure code and javadoc formatting'
    dependsOn 'spotlessCheck', 'checkstyleMain', 'checkstyleTest'
}