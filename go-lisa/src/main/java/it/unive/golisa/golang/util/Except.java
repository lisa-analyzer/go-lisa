package it.unive.golisa.golang.util;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import it.unive.golisa.golang.api.signature.ConstGoLangApiSignature;
import it.unive.golisa.golang.api.signature.FuncGoLangApiSignature;
import it.unive.golisa.golang.api.signature.MethodGoLangApiSignature;
import it.unive.golisa.golang.api.signature.TypeGoLangApiSignature;
import it.unive.golisa.golang.api.signature.VarGoLangApiSignature;

/**
 * Auto-generated by GoLiSA build
 */
public class Except {
	private final Map<String, Set<ConstGoLangApiSignature>> mapConst;
	private final Map<String, Set<FuncGoLangApiSignature>> mapFunc;
	private final Map<String, Set<MethodGoLangApiSignature>> mapMethod;
	private final Map<String, Set<TypeGoLangApiSignature>> mapType;
	private final Map<String, Set<VarGoLangApiSignature>> mapVar;
	private final Set<String> pkgs;

	public Except() {
		pkgs = new HashSet<>();
		mapConst = new HashMap<String, Set<ConstGoLangApiSignature>>();
		mapFunc = new HashMap<String, Set<FuncGoLangApiSignature>>();
		mapMethod = new HashMap<String, Set<MethodGoLangApiSignature>>();
		mapType = new HashMap<String, Set<TypeGoLangApiSignature>>();
		mapVar = new HashMap<String, Set<VarGoLangApiSignature>>();

		build();
	}

	public Set<String> getPackages() {
		return pkgs;
	}

	public Map<String, Set<ConstGoLangApiSignature>> getMapConst() {
		return mapConst;
	}

	public Map<String, Set<FuncGoLangApiSignature>> getMapFunc() {
		return mapFunc;
	}

	public Map<String, Set<MethodGoLangApiSignature>> getMapMethod() {
		return mapMethod;
	}

	public Map<String, Set<TypeGoLangApiSignature>> getMapType() {
		return mapType;
	}

	public Map<String, Set<VarGoLangApiSignature>> getMapVar() {
		return mapVar;
	}

	private void build() {
		build0();
		build1();
	}

	private void build0() {
		pkgs.add("syscall (linux-amd64-cgo)");
		mapConst.putIfAbsent("syscall (linux-amd64-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (linux-amd64-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (linux-amd64-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (linux-amd64-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (linux-amd64-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (linux-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (linux-amd64-cgo)", "Cmsghdr struct, X__cmsg_data [0]uint8"));

		pkgs.add("syscall (netbsd-amd64-cgo)");
		mapConst.putIfAbsent("syscall (netbsd-amd64-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (netbsd-amd64-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (netbsd-amd64-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (netbsd-amd64-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (netbsd-amd64-cgo)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (netbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-amd64-cgo)", "ImplementsGetwd", " false", null));

		pkgs.add("syscall (linux-386)");
		mapConst.putIfAbsent("syscall (linux-386)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (linux-386)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (linux-386)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (linux-386)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (linux-386)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (linux-386)")
				.add(new TypeGoLangApiSignature("syscall (linux-386)", "Cmsghdr struct, X__cmsg_data [0]uint8"));

		pkgs.add("syscall (freebsd-arm-cgo)");
		mapConst.putIfAbsent("syscall (freebsd-arm-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (freebsd-arm-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (freebsd-arm-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (freebsd-arm-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (freebsd-arm-cgo)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (freebsd-arm-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm-cgo)", "SizeofIfData", " 88", null));
		mapConst.get("syscall (freebsd-arm-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm-cgo)", "BIOCGRTIMEOUT", " 1074545262", null));
		mapType.get("syscall (freebsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm-cgo)", "Stat_t struct, Dev uint32"));
		mapConst.get("syscall (freebsd-arm-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm-cgo)", "SIOCAIFADDR", " 2151967019", null));
		mapConst.get("syscall (freebsd-arm-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm-cgo)", "SYS_CAP_RIGHTS_LIMIT", " 533", null));
		mapConst.get("syscall (freebsd-arm-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm-cgo)", "SYS_CAP_FCNTLS_GET", " 537", null));
		mapType.get("syscall (freebsd-arm-cgo)").add(
				new TypeGoLangApiSignature("syscall (freebsd-arm-cgo)", "RawSockaddrUnix struct, Pad_cgo_0 [2]uint8"));
		mapType.get("syscall (freebsd-arm-cgo)").add(new TypeGoLangApiSignature("syscall (freebsd-arm-cgo)",
				"RawSockaddrDatalink struct, Pad_cgo_0 [2]uint8"));
		mapConst.get("syscall (freebsd-arm-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm-cgo)", "SYS_CAP_IOCTLS_GET", null, "ideal-int"));
		mapFunc.get("syscall (freebsd-arm-cgo)").add(new FuncGoLangApiSignature("syscall (freebsd-arm-cgo)", "Fchflags",
				new String[] { "string", " int" }, new String[] { "error" }));
		mapType.get("syscall (freebsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm-cgo)", "Dirent struct, Namlen uint8"));
		mapType.get("syscall (freebsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm-cgo)", "Stat_t struct, Pad_cgo_0 [4]uint8"));
		mapConst.get("syscall (freebsd-arm-cgo)").add(
				new ConstGoLangApiSignature("syscall (freebsd-arm-cgo)", "SYS_CAP_RIGHTS_LIMIT", null, "ideal-int"));
		mapConst.get("syscall (freebsd-arm-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm-cgo)", "TIOCTIMESTAMP", " 1074558041", null));
		mapConst.get("syscall (freebsd-arm-cgo)").add(
				new ConstGoLangApiSignature("syscall (freebsd-arm-cgo)", "SYS_CAP_FCNTLS_LIMIT", null, "ideal-int"));
		mapType.get("syscall (freebsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm-cgo)", "BpfHdr struct, Pad_cgo_0 [2]uint8"));
		mapConst.get("syscall (freebsd-arm-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm-cgo)", "BIOCSRTIMEOUT", " 2148287085", null));
		mapConst.get("syscall (freebsd-arm-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm-cgo)", "SYS_CAP_IOCTLS_GET", " 535", null));
		mapConst.get("syscall (freebsd-arm-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm-cgo)", "SizeofSockaddrDatalink", " 56", null));
		mapConst.get("syscall (freebsd-arm-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm-cgo)", "SizeofSockaddrUnix", " 108", null));
		mapConst.get("syscall (freebsd-arm-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm-cgo)", "ELAST", " 94", null));
		mapConst.get("syscall (freebsd-arm-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm-cgo)", "SYS_CAP_FCNTLS_LIMIT", " 536", null));
		mapType.get("syscall (freebsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm-cgo)", "Stat_t struct, Gen uint32"));
		mapConst.get("syscall (freebsd-arm-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm-cgo)", "ImplementsGetwd", " false", null));
		mapType.get("syscall (freebsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm-cgo)", "Stat_t struct, Ino uint32"));
		mapType.get("syscall (freebsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm-cgo)", "Stat_t struct, Nlink uint16"));
		mapConst.get("syscall (freebsd-arm-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm-cgo)", "AF_MAX", " 38", null));
		mapConst.get("syscall (freebsd-arm-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm-cgo)", "SIOCGIFSTATUS", " 3274991931", null));
		mapFunc.get("syscall (freebsd-arm-cgo)").add(new FuncGoLangApiSignature("syscall (freebsd-arm-cgo)", "Mknod",
				new String[] { "string", " uint32", " int" }, new String[] { "error" }));
		mapConst.get("syscall (freebsd-arm-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm-cgo)", "SizeofIfMsghdr", " 104", null));
		mapType.get("syscall (freebsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm-cgo)", "Dirent struct, Fileno uint32"));
		mapType.get("syscall (freebsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm-cgo)", "Stat_t struct, Blksize uint32"));
		mapConst.get("syscall (freebsd-arm-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm-cgo)", "O_CLOEXEC", " 0", null));
		mapConst.get("syscall (freebsd-arm-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm-cgo)", "SYS_CAP_FCNTLS_GET", null, "ideal-int"));
		mapConst.get("syscall (freebsd-arm-cgo)").add(
				new ConstGoLangApiSignature("syscall (freebsd-arm-cgo)", "SYS_CAP_IOCTLS_LIMIT", null, "ideal-int"));
		mapType.get("syscall (freebsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm-cgo)", "Stat_t struct, Rdev uint32"));
		mapConst.get("syscall (freebsd-arm-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm-cgo)", "SYS_CAP_RIGHTS_GET", null, "ideal-int"));
		mapType.get("syscall (freebsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm-cgo)", "Statfs_t struct, Mntfromname [88]int8"));
		mapConst.get("syscall (freebsd-arm-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm-cgo)", "SIOCSIFPHYADDR", " 2151967046", null));
		mapType.get("syscall (freebsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm-cgo)", "Stat_t struct, Lspare int32"));
		mapConst.get("syscall (freebsd-arm-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm-cgo)", "SYS_CAP_IOCTLS_LIMIT", " 534", null));
		mapConst.get("syscall (freebsd-arm-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm-cgo)", "SYS_CAP_RIGHTS_GET", " 515", null));
		mapConst.get("syscall (freebsd-arm-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm-cgo)", "SizeofBpfHdr", " 24", null));
		mapType.get("syscall (freebsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm-cgo)", "Statfs_t struct, Mntonname [88]int8"));

		pkgs.add("os (linux-arm-cgo)");
		mapConst.putIfAbsent("os (linux-arm-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("os (linux-arm-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("os (linux-arm-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("os (linux-arm-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("os (linux-arm-cgo)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("os (linux-arm-cgo)")
				.add(new ConstGoLangApiSignature("os (linux-arm-cgo)", "O_SYNC", " 1052672", null));
		mapConst.get("os (linux-arm-cgo)")
				.add(new ConstGoLangApiSignature("os (linux-arm-cgo)", "O_SYNC", " 4096", null));

		pkgs.add("syscall (freebsd-386-cgo)");
		mapConst.putIfAbsent("syscall (freebsd-386-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (freebsd-386-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (freebsd-386-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (freebsd-386-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (freebsd-386-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (freebsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386-cgo)", "Stat_t struct, Ino uint32"));
		mapType.get("syscall (freebsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386-cgo)", "Stat_t struct, Lspare int32"));
		mapType.get("syscall (freebsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386-cgo)", "Statfs_t struct, Mntfromname [88]int8"));
		mapConst.get("syscall (freebsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-386-cgo)", "AF_MAX", " 38", null));
		mapType.get("syscall (freebsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386-cgo)", "Dirent struct, Fileno uint32"));
		mapConst.get("syscall (freebsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-386-cgo)", "DLT_MATCHING_MAX", " 242", null));
		mapFunc.get("syscall (freebsd-386-cgo)").add(new FuncGoLangApiSignature("syscall (freebsd-386-cgo)", "Mknod",
				new String[] { "string", " uint32", " int" }, new String[] { "error" }));
		mapConst.get("syscall (freebsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-386-cgo)", "ImplementsGetwd", " false", null));
		mapType.get("syscall (freebsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386-cgo)", "Stat_t struct, Nlink uint16"));
		mapType.get("syscall (freebsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386-cgo)", "Statfs_t struct, Mntonname [88]int8"));
		mapConst.get("syscall (freebsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-386-cgo)", "ELAST", " 94", null));
		mapConst.get("syscall (freebsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-386-cgo)", "O_CLOEXEC", " 0", null));
		mapType.get("syscall (freebsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386-cgo)", "Dirent struct, Namlen uint8"));
		mapType.get("syscall (freebsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386-cgo)", "Stat_t struct, Gen uint32"));
		mapType.get("syscall (freebsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386-cgo)", "Stat_t struct, Rdev uint32"));
		mapType.get("syscall (freebsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386-cgo)", "Stat_t struct, Blksize uint32"));
		mapType.get("syscall (freebsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386-cgo)", "Stat_t struct, Dev uint32"));
		mapType.get("syscall (freebsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386-cgo)", "Stat_t struct, Pad_cgo_0 [8]uint8"));

		pkgs.add("syscall (freebsd-amd64-cgo)");
		mapConst.putIfAbsent("syscall (freebsd-amd64-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (freebsd-amd64-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (freebsd-amd64-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (freebsd-amd64-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (freebsd-amd64-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (freebsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64-cgo)", "Stat_t struct, Rdev uint32"));
		mapType.get("syscall (freebsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64-cgo)", "Statfs_t struct, Mntonname [88]int8"));
		mapType.get("syscall (freebsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64-cgo)", "Stat_t struct, Nlink uint16"));
		mapType.get("syscall (freebsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64-cgo)", "Stat_t struct, Gen uint32"));
		mapType.get("syscall (freebsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64-cgo)", "Stat_t struct, Blksize uint32"));
		mapConst.get("syscall (freebsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-amd64-cgo)", "ImplementsGetwd", " false", null));
		mapType.get("syscall (freebsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64-cgo)", "Dirent struct, Namlen uint8"));
		mapType.get("syscall (freebsd-amd64-cgo)").add(
				new TypeGoLangApiSignature("syscall (freebsd-amd64-cgo)", "Statfs_t struct, Mntfromname [88]int8"));
		mapFunc.get("syscall (freebsd-amd64-cgo)").add(new FuncGoLangApiSignature("syscall (freebsd-amd64-cgo)",
				"Mknod", new String[] { "string", " uint32", " int" }, new String[] { "error" }));
		mapType.get("syscall (freebsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64-cgo)", "Dirent struct, Fileno uint32"));
		mapConst.get("syscall (freebsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-amd64-cgo)", "DLT_MATCHING_MAX", " 242", null));
		mapType.get("syscall (freebsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64-cgo)", "Stat_t struct, Lspare int32"));
		mapType.get("syscall (freebsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64-cgo)", "Stat_t struct, Dev uint32"));
		mapConst.get("syscall (freebsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-amd64-cgo)", "AF_MAX", " 38", null));
		mapType.get("syscall (freebsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64-cgo)", "Stat_t struct, Ino uint32"));
		mapConst.get("syscall (freebsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-amd64-cgo)", "ELAST", " 94", null));
		mapConst.get("syscall (freebsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-amd64-cgo)", "O_CLOEXEC", " 0", null));

		pkgs.add("syscall (linux-arm-cgo)");
		mapConst.putIfAbsent("syscall (linux-arm-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (linux-arm-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (linux-arm-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (linux-arm-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (linux-arm-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (linux-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (linux-arm-cgo)", "Cmsghdr struct, X__cmsg_data [0]uint8"));

		pkgs.add("syscall (netbsd-amd64)");
		mapConst.putIfAbsent("syscall (netbsd-amd64)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (netbsd-amd64)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (netbsd-amd64)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (netbsd-amd64)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (netbsd-amd64)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (netbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-amd64)", "ImplementsGetwd", " false", null));

		pkgs.add("syscall (freebsd-386)");
		mapConst.putIfAbsent("syscall (freebsd-386)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (freebsd-386)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (freebsd-386)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (freebsd-386)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (freebsd-386)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (freebsd-386)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386)", "Stat_t struct, Nlink uint16"));
		mapType.get("syscall (freebsd-386)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386)", "Statfs_t struct, Mntonname [88]int8"));
		mapType.get("syscall (freebsd-386)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386)", "Stat_t struct, Rdev uint32"));
		mapType.get("syscall (freebsd-386)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386)", "Statfs_t struct, Mntfromname [88]int8"));
		mapType.get("syscall (freebsd-386)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386)", "Dirent struct, Fileno uint32"));
		mapConst.get("syscall (freebsd-386)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-386)", "AF_MAX", " 38", null));
		mapConst.get("syscall (freebsd-386)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-386)", "DLT_MATCHING_MAX", " 242", null));
		mapType.get("syscall (freebsd-386)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386)", "Stat_t struct, Pad_cgo_0 [8]uint8"));
		mapType.get("syscall (freebsd-386)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386)", "Stat_t struct, Blksize uint32"));
		mapType.get("syscall (freebsd-386)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386)", "Dirent struct, Namlen uint8"));
		mapType.get("syscall (freebsd-386)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386)", "Stat_t struct, Gen uint32"));
		mapFunc.get("syscall (freebsd-386)").add(new FuncGoLangApiSignature("syscall (freebsd-386)", "Mknod",
				new String[] { "string", " uint32", " int" }, new String[] { "error" }));
		mapFunc.get("syscall (freebsd-386)").add(new FuncGoLangApiSignature("syscall (freebsd-386)", "Fchflags",
				new String[] { "string", " int" }, new String[] { "error" }));
		mapType.get("syscall (freebsd-386)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386)", "Stat_t struct, Ino uint32"));
		mapConst.get("syscall (freebsd-386)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-386)", "ELAST", " 94", null));
		mapConst.get("syscall (freebsd-386)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-386)", "O_CLOEXEC", " 0", null));
		mapConst.get("syscall (freebsd-386)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-386)", "ImplementsGetwd", " false", null));
		mapType.get("syscall (freebsd-386)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386)", "Stat_t struct, Dev uint32"));
		mapType.get("syscall (freebsd-386)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386)", "Stat_t struct, Lspare int32"));

		pkgs.add("syscall (netbsd-arm)");
		mapConst.putIfAbsent("syscall (netbsd-arm)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (netbsd-arm)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (netbsd-arm)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (netbsd-arm)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (netbsd-arm)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (netbsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-arm)", "ImplementsGetwd", " false", null));
		mapConst.get("syscall (netbsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-arm)", "SizeofIfData", " 132", null));
		mapType.get("syscall (netbsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (netbsd-arm)", "IfMsghdr struct, Pad_cgo_1 [4]uint8"));
		mapFunc.get("syscall (netbsd-arm)").add(new FuncGoLangApiSignature("syscall (netbsd-arm)", "Fchflags",
				new String[] { "string", " int" }, new String[] { "error" }));

		pkgs.add("net");
		mapConst.putIfAbsent("net", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("net").add(new FuncGoLangApiSignature("net", "ListenUnixgram",
				new String[] { "string", " *UnixAddr" }, new String[] { "*UDPConn", " error" }));

		pkgs.add("os (linux-arm)");
		mapConst.putIfAbsent("os (linux-arm)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("os (linux-arm)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("os (linux-arm)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("os (linux-arm)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("os (linux-arm)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("os (linux-arm)").add(new ConstGoLangApiSignature("os (linux-arm)", "O_SYNC", " 1052672", null));
		mapConst.get("os (linux-arm)").add(new ConstGoLangApiSignature("os (linux-arm)", "O_SYNC", " 4096", null));

		pkgs.add("syscall (freebsd-arm)");
		mapConst.putIfAbsent("syscall (freebsd-arm)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (freebsd-arm)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (freebsd-arm)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (freebsd-arm)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (freebsd-arm)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (freebsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm)", "SYS_CAP_IOCTLS_LIMIT", null, "ideal-int"));
		mapConst.get("syscall (freebsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm)", "ImplementsGetwd", " false", null));
		mapConst.get("syscall (freebsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm)", "ELAST", " 94", null));
		mapConst.get("syscall (freebsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm)", "O_CLOEXEC", " 0", null));
		mapType.get("syscall (freebsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm)", "BpfHdr struct, Pad_cgo_0 [2]uint8"));
		mapConst.get("syscall (freebsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm)", "SYS_CAP_FCNTLS_LIMIT", null, "ideal-int"));
		mapConst.get("syscall (freebsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm)", "SIOCSIFPHYADDR", " 2151967046", null));
		mapConst.get("syscall (freebsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm)", "SizeofBpfHdr", " 24", null));
		mapFunc.get("syscall (freebsd-arm)").add(new FuncGoLangApiSignature("syscall (freebsd-arm)", "Fchflags",
				new String[] { "string", " int" }, new String[] { "error" }));
		mapType.get("syscall (freebsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm)", "Stat_t struct, Lspare int32"));
		mapType.get("syscall (freebsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm)", "Statfs_t struct, Mntonname [88]int8"));
		mapConst.get("syscall (freebsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm)", "BIOCSRTIMEOUT", " 2148287085", null));
		mapConst.get("syscall (freebsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm)", "SYS_CAP_IOCTLS_GET", null, "ideal-int"));
		mapConst.get("syscall (freebsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm)", "SIOCGIFSTATUS", " 3274991931", null));
		mapConst.get("syscall (freebsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm)", "SizeofIfData", " 88", null));
		mapType.get("syscall (freebsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm)", "Stat_t struct, Gen uint32"));
		mapConst.get("syscall (freebsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm)", "SizeofSockaddrDatalink", " 56", null));
		mapConst.get("syscall (freebsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm)", "SIOCAIFADDR", " 2151967019", null));
		mapConst.get("syscall (freebsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm)", "SYS_CAP_IOCTLS_GET", " 535", null));
		mapConst.get("syscall (freebsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm)", "SYS_CAP_FCNTLS_GET", " 537", null));
		mapType.get("syscall (freebsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm)", "Stat_t struct, Ino uint32"));
		mapType.get("syscall (freebsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm)", "Stat_t struct, Dev uint32"));
		mapType.get("syscall (freebsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm)", "Stat_t struct, Blksize uint32"));
		mapConst.get("syscall (freebsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm)", "SizeofSockaddrUnix", " 108", null));
		mapConst.get("syscall (freebsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm)", "AF_MAX", " 38", null));
		mapType.get("syscall (freebsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm)", "Dirent struct, Namlen uint8"));
		mapType.get("syscall (freebsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm)", "Dirent struct, Fileno uint32"));
		mapConst.get("syscall (freebsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm)", "SYS_CAP_FCNTLS_GET", null, "ideal-int"));
		mapConst.get("syscall (freebsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm)", "TIOCTIMESTAMP", " 1074558041", null));
		mapConst.get("syscall (freebsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm)", "SYS_CAP_IOCTLS_LIMIT", " 534", null));
		mapConst.get("syscall (freebsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm)", "SYS_CAP_RIGHTS_GET", " 515", null));
		mapFunc.get("syscall (freebsd-arm)").add(new FuncGoLangApiSignature("syscall (freebsd-arm)", "Mknod",
				new String[] { "string", " uint32", " int" }, new String[] { "error" }));
		mapConst.get("syscall (freebsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm)", "BIOCGRTIMEOUT", " 1074545262", null));
		mapConst.get("syscall (freebsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm)", "SYS_CAP_FCNTLS_LIMIT", " 536", null));
		mapConst.get("syscall (freebsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm)", "SYS_CAP_RIGHTS_GET", null, "ideal-int"));
		mapType.get("syscall (freebsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm)", "Statfs_t struct, Mntfromname [88]int8"));
		mapConst.get("syscall (freebsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm)", "SYS_CAP_RIGHTS_LIMIT", " 533", null));
		mapType.get("syscall (freebsd-arm)").add(
				new TypeGoLangApiSignature("syscall (freebsd-arm)", "RawSockaddrDatalink struct, Pad_cgo_0 [2]uint8"));
		mapConst.get("syscall (freebsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm)", "SYS_CAP_RIGHTS_LIMIT", null, "ideal-int"));
		mapType.get("syscall (freebsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm)", "Stat_t struct, Nlink uint16"));
		mapType.get("syscall (freebsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm)", "Stat_t struct, Rdev uint32"));
		mapType.get("syscall (freebsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm)", "Stat_t struct, Pad_cgo_0 [4]uint8"));
		mapConst.get("syscall (freebsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm)", "SizeofIfMsghdr", " 104", null));
		mapType.get("syscall (freebsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm)", "RawSockaddrUnix struct, Pad_cgo_0 [2]uint8"));

		pkgs.add("syscall (windows-386)");
		mapConst.putIfAbsent("syscall (windows-386)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (windows-386)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (windows-386)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (windows-386)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (windows-386)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "TOKEN_ALL_ACCESS", " 983295", null));
		mapType.get("syscall (windows-386)").add(new TypeGoLangApiSignature("syscall (windows-386)",
				"CertRevocationInfo struct, OidSpecificInfo uintptr"));
		mapType.get("syscall (windows-386)")
				.add(new TypeGoLangApiSignature("syscall (windows-386)", "CertContext struct, CertInfo uintptr"));
		mapType.get("syscall (windows-386)").add(new TypeGoLangApiSignature("syscall (windows-386)",
				"CertChainPolicyPara struct, ExtraPolicyPara uintptr"));
		mapType.get("syscall (windows-386)")
				.add(new TypeGoLangApiSignature("syscall (windows-386)", "RawSockaddrAny struct, Pad [96]int8"));
		mapType.get("syscall (windows-386)").add(new TypeGoLangApiSignature("syscall (windows-386)",
				"CertChainPolicyStatus struct, ExtraPolicyStatus uintptr"));
		mapType.get("syscall (windows-386)")
				.add(new TypeGoLangApiSignature("syscall (windows-386)", "CertRevocationInfo struct, CrlInfo uintptr"));
		mapType.get("syscall (windows-386)")
				.add(new TypeGoLangApiSignature("syscall (windows-386)", "AddrinfoW struct, Addr uintptr"));
		mapType.get("syscall (windows-386)").add(
				new TypeGoLangApiSignature("syscall (windows-386)", "CertSimpleChain struct, TrustListInfo uintptr"));

		pkgs.add("os");
		mapConst.putIfAbsent("os", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("os", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("os", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("os", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("os", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("os").add(new MethodGoLangApiSignature("os", "FileMode", "Perm", new String[] { "" },
				new String[] { "FileMode" }));
		mapType.get("os").add(new TypeGoLangApiSignature("os", "PathError struct, Err error"));
		mapConst.get("os").add(new ConstGoLangApiSignature("os", "ModeIrregular", null, "FileMode"));
		mapConst.get("os").add(new ConstGoLangApiSignature("os", "ModePerm", null, "FileMode"));
		mapType.get("os").add(new TypeGoLangApiSignature("os", "FileInfo interface, Name() string"));
		mapType.get("os").add(new TypeGoLangApiSignature("os", "PathError struct, Op string"));
		mapFunc.get("os").add(new FuncGoLangApiSignature("os", "SameFile", new String[] { "FileInfo", " FileInfo" },
				new String[] { "bool" }));
		mapType.get("os").add(new TypeGoLangApiSignature("os", "FileMode uint32"));
		mapMethod.get("os").add(
				new MethodGoLangApiSignature("os", "FileMode", "IsDir", new String[] { "" }, new String[] { "bool" }));
		mapConst.get("os").add(new ConstGoLangApiSignature("os", "ModeSocket", null, "FileMode"));
		mapMethod.get("os").add(new MethodGoLangApiSignature("os", "FileMode", "String", new String[] { "" },
				new String[] { "string" }));
		mapMethod.get("os").add(new MethodGoLangApiSignature("os", "*PathError", "Error", new String[] { "" },
				new String[] { "string" }));
		mapConst.get("os").add(new ConstGoLangApiSignature("os", "ModeDevice", null, "FileMode"));
		mapFunc.get("os").add(new FuncGoLangApiSignature("os", "Stat", new String[] { "string" },
				new String[] { "FileInfo", " error" }));
		mapType.get("os").add(new TypeGoLangApiSignature("os", "FileInfo interface, Sys() interface{}"));
		mapType.get("os").add(new TypeGoLangApiSignature("os", "FileInfo interface, Size() int64"));
		mapFunc.get("os").add(new FuncGoLangApiSignature("os", "Mkdir", new String[] { "string", " FileMode" },
				new String[] { "error" }));
		mapMethod.get("os").add(new MethodGoLangApiSignature("os", "*PathError", "Timeout", new String[] { "" },
				new String[] { "bool" }));
		mapConst.get("os").add(new ConstGoLangApiSignature("os", "ModeCharDevice", null, "FileMode"));
		mapMethod.get("os").add(new MethodGoLangApiSignature("os", "*File", "Chmod", new String[] { "FileMode" },
				new String[] { "error" }));
		mapType.get("os")
				.add(new TypeGoLangApiSignature("os", "FileInfo interface { IsDir, ModTime, Mode, Name, Size, Sys }"));
		mapConst.get("os").add(new ConstGoLangApiSignature("os", "ModeNamedPipe", null, "FileMode"));
		mapConst.get("os").add(new ConstGoLangApiSignature("os", "ModeSymlink", null, "FileMode"));
		mapConst.get("os").add(new ConstGoLangApiSignature("os", "ModeType", " 2399666176", null));
		mapType.get("os").add(new TypeGoLangApiSignature("os", "FileInfo interface, IsDir() bool"));
		mapType.get("os").add(new TypeGoLangApiSignature("os", "FileInfo interface, Mode() FileMode"));
		mapType.get("os").add(new TypeGoLangApiSignature("os", "PathError struct, Path string"));
		mapType.get("os").add(new TypeGoLangApiSignature("os", "PathError struct"));
		mapConst.get("os").add(new ConstGoLangApiSignature("os", "ModeSetuid", null, "FileMode"));
		mapConst.get("os").add(new ConstGoLangApiSignature("os", "ModeSticky", null, "FileMode"));
		mapFunc.get("os").add(new FuncGoLangApiSignature("os", "OpenFile",
				new String[] { "string", " int", " FileMode" }, new String[] { "*File", " error" }));
		mapConst.get("os").add(new ConstGoLangApiSignature("os", "ModeDir", null, "FileMode"));
		mapConst.get("os").add(new ConstGoLangApiSignature("os", "ModeType", null, "FileMode"));
		mapConst.get("os").add(new ConstGoLangApiSignature("os", "ModeSetgid", null, "FileMode"));
		mapFunc.get("os").add(new FuncGoLangApiSignature("os", "Chmod", new String[] { "string", " FileMode" },
				new String[] { "error" }));
		mapMethod.get("os").add(new MethodGoLangApiSignature("os", "*File", "Stat", new String[] { "" },
				new String[] { "FileInfo", " error" }));
		mapMethod.get("os").add(new MethodGoLangApiSignature("os", "*File", "Readdir", new String[] { "int" },
				new String[] { "[]FileInfo", " error" }));
		mapConst.get("os").add(new ConstGoLangApiSignature("os", "ModeType", " 2399141888", null));
		mapFunc.get("os").add(new FuncGoLangApiSignature("os", "Lstat", new String[] { "string" },
				new String[] { "FileInfo", " error" }));
		mapConst.get("os").add(new ConstGoLangApiSignature("os", "ModeAppend", null, "FileMode"));
		mapConst.get("os").add(new ConstGoLangApiSignature("os", "ModeTemporary", null, "FileMode"));
		mapType.get("os").add(new TypeGoLangApiSignature("os", "FileInfo interface, ModTime() time.Time"));
		mapMethod.get("os").add(new MethodGoLangApiSignature("os", "FileMode", "IsRegular", new String[] { "" },
				new String[] { "bool" }));
		mapFunc.get("os").add(new FuncGoLangApiSignature("os", "MkdirAll", new String[] { "string", " FileMode" },
				new String[] { "error" }));
		mapMethod.get("os").add(new MethodGoLangApiSignature("os", "*PathError", "Unwrap", new String[] { "" },
				new String[] { "error" }));
		mapConst.get("os").add(new ConstGoLangApiSignature("os", "ModeExclusive", null, "FileMode"));

		pkgs.add("math/big");
		mapConst.putIfAbsent("math/big", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("math/big", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("math/big", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("math/big", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("math/big", new HashSet<VarGoLangApiSignature>());

		mapConst.get("math/big").add(new ConstGoLangApiSignature("math/big", "MaxBase", " 36", null));
		mapType.get("math/big").add(new TypeGoLangApiSignature("math/big", "Word uintptr"));

		pkgs.add("syscall (openbsd-amd64-cgo)");
		mapConst.putIfAbsent("syscall (openbsd-amd64-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (openbsd-amd64-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (openbsd-amd64-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (openbsd-amd64-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (openbsd-amd64-cgo)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SizeofRtMsghdr", " 88", null));
		mapType.get("syscall (openbsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64-cgo)", "Mclpool struct, Grown uint32"));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SYS_GETITIMER", " 86", null));
		mapType.get("syscall (openbsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64-cgo)", "Stat_t struct, Ino uint32"));
		mapType.get("syscall (openbsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64-cgo)", "Stat_t struct, Lspare1 int32"));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "RTF_FMASK", " 63496", null));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SYS_GETDIRENTRIES", " 312", null));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SYS_SETTIMEOFDAY", " 122", null));
		mapType.get("syscall (openbsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64-cgo)", "Kevent_t struct, Ident uint32"));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SYS_CLOCK_GETTIME", " 232", null));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SYS_FSTAT", " 292", null));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "CPUID_CFLUSH", null, "ideal-int"));
		mapType.get("syscall (openbsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64-cgo)", "Dirent struct, Fileno uint32"));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SIOCBRDGDADDR", " 2150132039", null));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "ImplementsGetwd", " false", null));
		mapType.get("syscall (openbsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64-cgo)", "Kevent_t struct, Data int32"));
		mapConst.get("syscall (openbsd-amd64-cgo)").add(
				new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "PMC5_PIPELINE_FLUSH", null, "ideal-int"));
		mapType.get("syscall (openbsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64-cgo)", "Statfs_t struct, Pad_cgo_1 [4]uint8"));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SYS_FUTIMES", " 206", null));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "EFER_LME", null, "ideal-int"));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "CCR0_FLUSH", " 16", null));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SYS_CLOCK_GETRES", " 234", null));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SizeofRtMetrics", " 48", null));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "EFER_LMA", null, "ideal-int"));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SYS___THRSLEEP", " 300", null));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "EFER_LME", " 256", null));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SYS_FSTATFS", " 308", null));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SYS_GETRUSAGE", " 117", null));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SYS_FSTATAT", " 316", null));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "EFER_SCE", " 1", null));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SYS_LSTAT", " 293", null));
		mapType.get("syscall (openbsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64-cgo)", "Statfs_t struct, F_ctime uint32"));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "CPUID_CFLUSH", " 524288", null));
		mapType.get("syscall (openbsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64-cgo)", "FdSet struct, Bits [32]int32"));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SYS_GETTIMEOFDAY", " 116", null));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SYS_SELECT", " 93", null));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SYS_KEVENT", " 270", null));
		mapType.get("syscall (openbsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64-cgo)", "RtMetrics struct, Expire uint32"));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SYS_KILL", " 37", null));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SYS_SETITIMER", " 83", null));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SYS_STATFS", " 307", null));
		mapType.get("syscall (openbsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64-cgo)", "Timespec struct, Sec int32"));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "PMC5_PIPELINE_FLUSH", " 21", null));
		mapType.get("syscall (openbsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64-cgo)", "Stat_t struct, Lspare0 int32"));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "EFER_LMA", " 1024", null));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "CCR0_FLUSH", null, "ideal-int"));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SIOCBRDGSADDR", " 3223873860", null));
		mapConst.get("syscall (openbsd-amd64-cgo)").add(
				new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SYS_GETDIRENTRIES", null, "ideal-int"));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SYS_CLOCK_SETTIME", " 233", null));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SYS_UTIMENSAT", " 326", null));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SYS_FUTIMENS", " 327", null));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SYS_WAIT4", " 7", null));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SYS_GETFSSTAT", " 306", null));
		mapType.get("syscall (openbsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64-cgo)", "Stat_t struct, Qspare [2]int64"));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SYS_NANOSLEEP", " 240", null));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "RTM_VERSION", " 4", null));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "EFER_NXE", " 2048", null));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SYS_STAT", " 291", null));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "EFER_NXE", null, "ideal-int"));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "EFER_SCE", null, "ideal-int"));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SYS_FHSTATFS", " 309", null));
		mapType.get("syscall (openbsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64-cgo)", "Statfs_t struct, F_spare [3]uint32"));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SYS_UTIMES", " 138", null));
		mapType.get("syscall (openbsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64-cgo)", "Timespec struct, Pad_cgo_0 [4]uint8"));

		pkgs.add("testing");
		mapConst.putIfAbsent("testing", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("testing", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("testing", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("testing", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("testing", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("testing").add(
				new FuncGoLangApiSignature("testing", "RegisterCover", new String[] { "Cover" }, new String[] { "" }));
		mapFunc.get("testing").add(new FuncGoLangApiSignature("testing", "MainStart",
				new String[] { "func(string", " string" },
				new String[] { "bool", " error", " []InternalTest", " []InternalBenchmark", " []InternalExample *M" }));

		pkgs.add("syscall (openbsd-386-cgo)");
		mapConst.putIfAbsent("syscall (openbsd-386-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (openbsd-386-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (openbsd-386-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (openbsd-386-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (openbsd-386-cgo)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SYS_KILL", " 37", null));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SYS_SETITIMER", " 83", null));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SYS_UTIMENSAT", " 326", null));
		mapType.get("syscall (openbsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-386-cgo)", "Timespec struct, Sec int32"));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SYS_LSTAT", " 293", null));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SYS_SELECT", " 93", null));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SYS_GETTIMEOFDAY", " 116", null));
		mapType.get("syscall (openbsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-386-cgo)", "Stat_t struct, Lspare0 int32"));
		mapType.get("syscall (openbsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-386-cgo)", "Dirent struct, Fileno uint32"));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SIOCBRDGSADDR", " 3223873860", null));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SYS_CLOCK_SETTIME", " 233", null));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SYS_GETDIRENTRIES", null, "ideal-int"));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "BIOCGRTIMEOUT", " 1074283118", null));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "RTF_FMASK", " 63496", null));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "TIOCGTSTAMP", " 1074295899", null));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SYS_WAIT4", " 7", null));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "BIOCSRTIMEOUT", " 2148024941", null));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SYS_STAT", " 291", null));
		mapType.get("syscall (openbsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-386-cgo)", "Timeval struct, Sec int32"));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SYS_NANOSLEEP", " 240", null));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "RTM_VERSION", " 4", null));
		mapType.get("syscall (openbsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-386-cgo)", "Stat_t struct, Lspare1 int32"));
		mapType.get("syscall (openbsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-386-cgo)", "RtMetrics struct, Expire uint32"));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SYS_GETFSSTAT", " 306", null));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SYS_UTIMES", " 138", null));
		mapType.get("syscall (openbsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-386-cgo)", "Statfs_t struct, F_ctime uint32"));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SizeofIfData", " 208", null));
		mapType.get("syscall (openbsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-386-cgo)", "Stat_t struct, Qspare [2]int64"));
		mapType.get("syscall (openbsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-386-cgo)", "Stat_t struct, Ino uint32"));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SYS_FHSTATFS", " 309", null));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SYS_GETDIRENTRIES", " 312", null));
		mapType.get("syscall (openbsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-386-cgo)", "Statfs_t struct, F_spare [3]uint32"));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SYS_FUTIMES", " 206", null));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SIOCBRDGGPARAM", " 3224922456", null));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SYS_GETITIMER", " 86", null));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SYS_SETTIMEOFDAY", " 122", null));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SizeofRtMetrics", " 48", null));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SYS_CLOCK_GETTIME", " 232", null));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SYS_FUTIMENS", " 327", null));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SIOCBRDGDADDR", " 2150132039", null));
		mapType.get("syscall (openbsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-386-cgo)", "Kevent_t struct, Data int32"));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "ImplementsGetwd", " false", null));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SYS___THRSLEEP", " 300", null));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SizeofIfMsghdr", " 232", null));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SYS_FSTAT", " 292", null));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SYS_CLOCK_GETRES", " 234", null));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SYS_KEVENT", " 270", null));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SYS_STATFS", " 307", null));
		mapType.get("syscall (openbsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-386-cgo)", "FdSet struct, Bits [32]int32"));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SizeofRtMsghdr", " 88", null));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SYS_FSTATFS", " 308", null));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SYS_FSTATAT", " 316", null));
		mapType.get("syscall (openbsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-386-cgo)", "Mclpool struct, Grown uint32"));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SYS_GETRUSAGE", " 117", null));

		pkgs.add("syscall (netbsd-386)");
		mapConst.putIfAbsent("syscall (netbsd-386)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (netbsd-386)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (netbsd-386)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (netbsd-386)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (netbsd-386)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (netbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-386)", "ImplementsGetwd", " false", null));

		pkgs.add("syscall (openbsd-amd64)");
		mapConst.putIfAbsent("syscall (openbsd-amd64)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (openbsd-amd64)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (openbsd-amd64)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (openbsd-amd64)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (openbsd-amd64)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SYS_CLOCK_GETRES", " 234", null));
		mapType.get("syscall (openbsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64)", "Dirent struct, Fileno uint32"));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "ImplementsGetwd", " false", null));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SYS_STAT", " 291", null));
		mapType.get("syscall (openbsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64)", "Kevent_t struct, Data int32"));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "CPUID_CFLUSH", null, "ideal-int"));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SizeofRtMetrics", " 48", null));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SYS_FSTAT", " 292", null));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SYS_WAIT4", " 7", null));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SYS_FUTIMES", " 206", null));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SYS_FSTATFS", " 308", null));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SYS_FHSTATFS", " 309", null));
		mapType.get("syscall (openbsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64)", "Timespec struct, Sec int32"));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "RTM_VERSION", " 4", null));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SYS_GETFSSTAT", " 306", null));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SYS_FSTATAT", " 316", null));
		mapType.get("syscall (openbsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64)", "Statfs_t struct, F_ctime uint32"));
		mapType.get("syscall (openbsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64)", "Timespec struct, Pad_cgo_0 [4]uint8"));
		mapType.get("syscall (openbsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64)", "RtMetrics struct, Expire uint32"));
		mapType.get("syscall (openbsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64)", "Statfs_t struct, F_spare [3]uint32"));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SYS_KILL", " 37", null));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "EFER_LMA", " 1024", null));
		mapType.get("syscall (openbsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64)", "Stat_t struct, Lspare1 int32"));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "RTF_FMASK", " 63496", null));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SYS_SELECT", " 93", null));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SYS_SETITIMER", " 83", null));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SIOCBRDGSADDR", " 3223873860", null));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SYS_LSTAT", " 293", null));
		mapType.get("syscall (openbsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64)", "Stat_t struct, Qspare [2]int64"));
		mapType.get("syscall (openbsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64)", "Kevent_t struct, Ident uint32"));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SYS_CLOCK_GETTIME", " 232", null));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SYS_GETDIRENTRIES", null, "ideal-int"));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SYS_UTIMES", " 138", null));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SYS_NANOSLEEP", " 240", null));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "EFER_LME", null, "ideal-int"));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SIOCBRDGDADDR", " 2150132039", null));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "EFER_NXE", " 2048", null));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "PMC5_PIPELINE_FLUSH", null, "ideal-int"));
		mapType.get("syscall (openbsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64)", "Statfs_t struct, Pad_cgo_1 [4]uint8"));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "CCR0_FLUSH", " 16", null));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SYS_GETTIMEOFDAY", " 116", null));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "EFER_SCE", null, "ideal-int"));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "EFER_NXE", null, "ideal-int"));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "EFER_LMA", null, "ideal-int"));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SYS___THRSLEEP", " 300", null));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "EFER_SCE", " 1", null));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "EFER_LME", " 256", null));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SYS_GETRUSAGE", " 117", null));
		mapType.get("syscall (openbsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64)", "Mclpool struct, Grown uint32"));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SYS_GETITIMER", " 86", null));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SYS_SETTIMEOFDAY", " 122", null));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SizeofRtMsghdr", " 88", null));
		mapType.get("syscall (openbsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64)", "FdSet struct, Bits [32]int32"));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SYS_KEVENT", " 270", null));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "CPUID_CFLUSH", " 524288", null));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SYS_STATFS", " 307", null));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SYS_UTIMENSAT", " 326", null));
		mapType.get("syscall (openbsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64)", "Stat_t struct, Ino uint32"));
		mapType.get("syscall (openbsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64)", "Stat_t struct, Lspare0 int32"));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SYS_GETDIRENTRIES", " 312", null));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "CCR0_FLUSH", null, "ideal-int"));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SYS_FUTIMENS", " 327", null));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "PMC5_PIPELINE_FLUSH", " 21", null));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SYS_CLOCK_SETTIME", " 233", null));

		pkgs.add("syscall (linux-arm)");
		mapConst.putIfAbsent("syscall (linux-arm)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (linux-arm)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (linux-arm)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (linux-arm)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (linux-arm)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (linux-arm)")
				.add(new TypeGoLangApiSignature("syscall (linux-arm)", "Cmsghdr struct, X__cmsg_data [0]uint8"));

		pkgs.add("syscall (linux-386-cgo)");
		mapConst.putIfAbsent("syscall (linux-386-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (linux-386-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (linux-386-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (linux-386-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (linux-386-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (linux-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (linux-386-cgo)", "Cmsghdr struct, X__cmsg_data [0]uint8"));

		pkgs.add("syscall (openbsd-386)");
		mapConst.putIfAbsent("syscall (openbsd-386)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (openbsd-386)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (openbsd-386)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (openbsd-386)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (openbsd-386)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SYS_KILL", " 37", null));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SYS_LSTAT", " 293", null));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SYS_SELECT", " 93", null));
		mapType.get("syscall (openbsd-386)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-386)", "Statfs_t struct, F_spare [3]uint32"));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SYS_GETTIMEOFDAY", " 116", null));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SYS_SETITIMER", " 83", null));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "BIOCSRTIMEOUT", " 2148024941", null));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SIOCBRDGSADDR", " 3223873860", null));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SYS_UTIMENSAT", " 326", null));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SYS_GETDIRENTRIES", null, "ideal-int"));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SYS_CLOCK_SETTIME", " 233", null));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SYS_GETFSSTAT", " 306", null));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "TIOCGTSTAMP", " 1074295899", null));
		mapType.get("syscall (openbsd-386)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-386)", "FdSet struct, Bits [32]int32"));
		mapType.get("syscall (openbsd-386)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-386)", "Kevent_t struct, Data int32"));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SYS_NANOSLEEP", " 240", null));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "RTF_FMASK", " 63496", null));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SYS_WAIT4", " 7", null));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SYS_STAT", " 291", null));
		mapType.get("syscall (openbsd-386)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-386)", "Mclpool struct, Grown uint32"));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "RTM_VERSION", " 4", null));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SizeofIfData", " 208", null));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "BIOCGRTIMEOUT", " 1074283118", null));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SYS_FHSTATFS", " 309", null));
		mapType.get("syscall (openbsd-386)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-386)", "Stat_t struct, Ino uint32"));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SYS_UTIMES", " 138", null));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SYS_GETDIRENTRIES", " 312", null));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SizeofRtMsghdr", " 88", null));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SYS_GETITIMER", " 86", null));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SIOCBRDGGPARAM", " 3224922456", null));
		mapType.get("syscall (openbsd-386)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-386)", "Stat_t struct, Lspare0 int32"));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SYS_SETTIMEOFDAY", " 122", null));
		mapType.get("syscall (openbsd-386)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-386)", "Dirent struct, Fileno uint32"));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SizeofRtMetrics", " 48", null));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SYS_CLOCK_GETTIME", " 232", null));
		mapType.get("syscall (openbsd-386)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-386)", "Timespec struct, Sec int32"));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SYS_FUTIMENS", " 327", null));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SIOCBRDGDADDR", " 2150132039", null));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "ImplementsGetwd", " false", null));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SYS_FSTAT", " 292", null));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SizeofIfMsghdr", " 232", null));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SYS_CLOCK_GETRES", " 234", null));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SYS_FUTIMES", " 206", null));
		mapType.get("syscall (openbsd-386)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-386)", "Statfs_t struct, F_ctime uint32"));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SYS_STATFS", " 307", null));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SYS_FSTATAT", " 316", null));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SYS_KEVENT", " 270", null));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SYS___THRSLEEP", " 300", null));
		mapType.get("syscall (openbsd-386)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-386)", "Stat_t struct, Lspare1 int32"));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SYS_FSTATFS", " 308", null));
		mapType.get("syscall (openbsd-386)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-386)", "Timeval struct, Sec int32"));
		mapType.get("syscall (openbsd-386)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-386)", "RtMetrics struct, Expire uint32"));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SYS_GETRUSAGE", " 117", null));
		mapType.get("syscall (openbsd-386)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-386)", "Stat_t struct, Qspare [2]int64"));

		pkgs.add("syscall (netbsd-arm-cgo)");
		mapConst.putIfAbsent("syscall (netbsd-arm-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (netbsd-arm-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (netbsd-arm-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (netbsd-arm-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (netbsd-arm-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (netbsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (netbsd-arm-cgo)", "IfMsghdr struct, Pad_cgo_1 [4]uint8"));
		mapConst.get("syscall (netbsd-arm-cgo)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-arm-cgo)", "ImplementsGetwd", " false", null));
		mapConst.get("syscall (netbsd-arm-cgo)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-arm-cgo)", "SizeofIfData", " 132", null));
		mapFunc.get("syscall (netbsd-arm-cgo)").add(new FuncGoLangApiSignature("syscall (netbsd-arm-cgo)", "Fchflags",
				new String[] { "string", " int" }, new String[] { "error" }));

		pkgs.add("syscall (darwin-amd64-cgo)");
		mapConst.putIfAbsent("syscall (darwin-amd64-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (darwin-amd64-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (darwin-amd64-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (darwin-amd64-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (darwin-amd64-cgo)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (darwin-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (darwin-amd64-cgo)", "ImplementsGetwd", " false", null));
		mapFunc.get("syscall (darwin-amd64-cgo)").add(new FuncGoLangApiSignature("syscall (darwin-amd64-cgo)",
				"Fchflags", new String[] { "string", " int" }, new String[] { "error" }));

		pkgs.add("syscall (netbsd-386-cgo)");
		mapConst.putIfAbsent("syscall (netbsd-386-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (netbsd-386-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (netbsd-386-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (netbsd-386-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (netbsd-386-cgo)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (netbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-386-cgo)", "ImplementsGetwd", " false", null));

		pkgs.add("text/template/parse");
		mapConst.putIfAbsent("text/template/parse", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("text/template/parse", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("text/template/parse", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("text/template/parse", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("text/template/parse", new HashSet<VarGoLangApiSignature>());

		mapType.get("text/template/parse")
				.add(new TypeGoLangApiSignature("text/template/parse", "Node interface { Copy, String, Type }"));
		mapType.get("text/template/parse").add(new TypeGoLangApiSignature("text/template/parse", "DotNode bool"));

		pkgs.add("unicode");
		mapConst.putIfAbsent("unicode", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("unicode", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("unicode", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("unicode", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("unicode", new HashSet<VarGoLangApiSignature>());

		mapConst.get("unicode").add(new ConstGoLangApiSignature("unicode", "Version", " \"9.0.0\"", null));
		mapConst.get("unicode").add(new ConstGoLangApiSignature("unicode", "Version", " \"11.0.0\"", null));
		mapConst.get("unicode").add(new ConstGoLangApiSignature("unicode", "Version", " \"6.2.0\"", null));
		mapConst.get("unicode").add(new ConstGoLangApiSignature("unicode", "Version", " \"6.3.0\"", null));
		mapConst.get("unicode").add(new ConstGoLangApiSignature("unicode", "Version", " \"12.0.0\"", null));
		mapConst.get("unicode").add(new ConstGoLangApiSignature("unicode", "Version", " \"8.0.0\"", null));
		mapConst.get("unicode").add(new ConstGoLangApiSignature("unicode", "Version", " \"10.0.0\"", null));
		mapConst.get("unicode").add(new ConstGoLangApiSignature("unicode", "Version", " \"7.0.0\"", null));

		pkgs.add("text/scanner");
		mapConst.putIfAbsent("text/scanner", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("text/scanner", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("text/scanner", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("text/scanner", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("text/scanner", new HashSet<VarGoLangApiSignature>());

		mapConst.get("text/scanner").add(new ConstGoLangApiSignature("text/scanner", "GoTokens", " 1012", null));

		pkgs.add("encoding/json");
		mapConst.putIfAbsent("encoding/json", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("encoding/json", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("encoding/json", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("encoding/json", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("encoding/json", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("encoding/json").add(new MethodGoLangApiSignature("encoding/json", "*RawMessage", "MarshalJSON",
				new String[] { "" }, new String[] { "[]uint8", " error" }));

		pkgs.add("math");
		mapConst.putIfAbsent("math", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("math", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("math", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("math", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("math", new HashSet<VarGoLangApiSignature>());

		mapConst.get("math").add(new ConstGoLangApiSignature("math", "MaxFloat64", " 1.79769e+308  ", null));
		mapConst.get("math")
				.add(new ConstGoLangApiSignature("math", "SmallestNonzeroFloat64", " 4.94066e-324  ", null));
		mapConst.get("math").add(new ConstGoLangApiSignature("math", "SmallestNonzeroFloat32", " 1.4013e-45  ", null));

		pkgs.add("syscall (darwin-amd64)");
		mapConst.putIfAbsent("syscall (darwin-amd64)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (darwin-amd64)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (darwin-amd64)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (darwin-amd64)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (darwin-amd64)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (darwin-amd64)")
				.add(new ConstGoLangApiSignature("syscall (darwin-amd64)", "ImplementsGetwd", " false", null));
		mapFunc.get("syscall (darwin-amd64)").add(new FuncGoLangApiSignature("syscall (darwin-amd64)", "Fchflags",
				new String[] { "string", " int" }, new String[] { "error" }));

		pkgs.add("syscall (freebsd-amd64)");
		mapConst.putIfAbsent("syscall (freebsd-amd64)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (freebsd-amd64)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (freebsd-amd64)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (freebsd-amd64)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (freebsd-amd64)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (freebsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-amd64)", "ELAST", " 94", null));
		mapType.get("syscall (freebsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64)", "Stat_t struct, Gen uint32"));
		mapType.get("syscall (freebsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64)", "Statfs_t struct, Mntfromname [88]int8"));
		mapConst.get("syscall (freebsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-amd64)", "ImplementsGetwd", " false", null));
		mapConst.get("syscall (freebsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-amd64)", "O_CLOEXEC", " 0", null));
		mapType.get("syscall (freebsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64)", "Stat_t struct, Rdev uint32"));
		mapType.get("syscall (freebsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64)", "Dirent struct, Fileno uint32"));
		mapConst.get("syscall (freebsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-amd64)", "DLT_MATCHING_MAX", " 242", null));
		mapConst.get("syscall (freebsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-amd64)", "AF_MAX", " 38", null));
		mapFunc.get("syscall (freebsd-amd64)").add(new FuncGoLangApiSignature("syscall (freebsd-amd64)", "Mknod",
				new String[] { "string", " uint32", " int" }, new String[] { "error" }));
		mapType.get("syscall (freebsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64)", "Stat_t struct, Lspare int32"));
		mapType.get("syscall (freebsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64)", "Statfs_t struct, Mntonname [88]int8"));
		mapFunc.get("syscall (freebsd-amd64)").add(new FuncGoLangApiSignature("syscall (freebsd-amd64)", "Fchflags",
				new String[] { "string", " int" }, new String[] { "error" }));
		mapType.get("syscall (freebsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64)", "Stat_t struct, Dev uint32"));
		mapType.get("syscall (freebsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64)", "Dirent struct, Namlen uint8"));
		mapType.get("syscall (freebsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64)", "Stat_t struct, Ino uint32"));
		mapType.get("syscall (freebsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64)", "Stat_t struct, Nlink uint16"));
		mapType.get("syscall (freebsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64)", "Stat_t struct, Blksize uint32"));

		pkgs.add("syscall (windows-amd64)");
		mapConst.putIfAbsent("syscall (windows-amd64)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (windows-amd64)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (windows-amd64)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (windows-amd64)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (windows-amd64)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "TOKEN_ALL_ACCESS", " 983295", null));
		mapType.get("syscall (windows-amd64)")
				.add(new TypeGoLangApiSignature("syscall (windows-amd64)", "AddrinfoW struct, Addr uintptr"));
		mapType.get("syscall (windows-amd64)").add(new TypeGoLangApiSignature("syscall (windows-amd64)",
				"CertChainPolicyPara struct, ExtraPolicyPara uintptr"));
		mapType.get("syscall (windows-amd64)")
				.add(new TypeGoLangApiSignature("syscall (windows-amd64)", "RawSockaddrAny struct, Pad [96]int8"));
		mapType.get("syscall (windows-amd64)").add(new TypeGoLangApiSignature("syscall (windows-amd64)",
				"CertChainPolicyStatus struct, ExtraPolicyStatus uintptr"));
	}

	private void build1() {
		mapType.get("syscall (windows-amd64)").add(
				new TypeGoLangApiSignature("syscall (windows-amd64)", "CertRevocationInfo struct, CrlInfo uintptr"));
		mapType.get("syscall (windows-amd64)")
				.add(new TypeGoLangApiSignature("syscall (windows-amd64)", "CertContext struct, CertInfo uintptr"));
		mapType.get("syscall (windows-amd64)").add(new TypeGoLangApiSignature("syscall (windows-amd64)",
				"CertRevocationInfo struct, OidSpecificInfo uintptr"));
		mapType.get("syscall (windows-amd64)").add(
				new TypeGoLangApiSignature("syscall (windows-amd64)", "CertSimpleChain struct, TrustListInfo uintptr"));

		pkgs.add("syscall (linux-amd64)");
		mapConst.putIfAbsent("syscall (linux-amd64)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (linux-amd64)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (linux-amd64)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (linux-amd64)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (linux-amd64)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (linux-amd64)")
				.add(new TypeGoLangApiSignature("syscall (linux-amd64)", "Cmsghdr struct, X__cmsg_data [0]uint8"));

	}

}