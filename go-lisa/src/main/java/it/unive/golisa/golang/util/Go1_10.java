package it.unive.golisa.golang.util;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import it.unive.golisa.golang.api.signature.ConstGoLangApiSignature;
import it.unive.golisa.golang.api.signature.FuncGoLangApiSignature;
import it.unive.golisa.golang.api.signature.MethodGoLangApiSignature;
import it.unive.golisa.golang.api.signature.TypeGoLangApiSignature;
import it.unive.golisa.golang.api.signature.VarGoLangApiSignature;

/**
 * Auto-generated by GoLiSA build
 */
public class Go1_10 {
	private final Map<String, Set<ConstGoLangApiSignature>> mapConst;
	private final Map<String, Set<FuncGoLangApiSignature>> mapFunc;
	private final Map<String, Set<MethodGoLangApiSignature>> mapMethod;
	private final Map<String, Set<TypeGoLangApiSignature>> mapType;
	private final Map<String, Set<VarGoLangApiSignature>> mapVar;
	private final Set<String> pkgs;

	public Go1_10() {
		pkgs = new HashSet<>();
		mapConst = new HashMap<String, Set<ConstGoLangApiSignature>>();
		mapFunc = new HashMap<String, Set<FuncGoLangApiSignature>>();
		mapMethod = new HashMap<String, Set<MethodGoLangApiSignature>>();
		mapType = new HashMap<String, Set<TypeGoLangApiSignature>>();
		mapVar = new HashMap<String, Set<VarGoLangApiSignature>>();

		build();
	}

	public Set<String> getPackages() {
		return pkgs;
	}

	public Map<String, Set<ConstGoLangApiSignature>> getMapConst() {
		return mapConst;
	}

	public Map<String, Set<FuncGoLangApiSignature>> getMapFunc() {
		return mapFunc;
	}

	public Map<String, Set<MethodGoLangApiSignature>> getMapMethod() {
		return mapMethod;
	}

	public Map<String, Set<TypeGoLangApiSignature>> getMapType() {
		return mapType;
	}

	public Map<String, Set<VarGoLangApiSignature>> getMapVar() {
		return mapVar;
	}

	private void build() {
		build0();
		build1();
	}

	private void build0() {
		pkgs.add("crypto/tls");
		mapConst.putIfAbsent("crypto/tls", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("crypto/tls", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("crypto/tls", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("crypto/tls", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("crypto/tls", new HashSet<VarGoLangApiSignature>());

		mapConst.get("crypto/tls").add(new ConstGoLangApiSignature("crypto/tls", "ECDSAWithSHA1", " 515", null));
		mapConst.get("crypto/tls")
				.add(new ConstGoLangApiSignature("crypto/tls", "ECDSAWithSHA1", null, "SignatureScheme"));

		pkgs.add("database/sql/driver");
		mapConst.putIfAbsent("database/sql/driver", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("database/sql/driver", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("database/sql/driver", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("database/sql/driver", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("database/sql/driver", new HashSet<VarGoLangApiSignature>());

		mapType.get("database/sql/driver").add(new TypeGoLangApiSignature("database/sql/driver",
				"SessionResetter interface, ResetSession(context.Context) error"));
		mapType.get("database/sql/driver")
				.add(new TypeGoLangApiSignature("database/sql/driver", "Connector interface { Connect, Driver }"));
		mapType.get("database/sql/driver").add(new TypeGoLangApiSignature("database/sql/driver",
				"Connector interface, Connect(context.Context) (Conn, error)"));
		mapType.get("database/sql/driver")
				.add(new TypeGoLangApiSignature("database/sql/driver", "DriverContext interface { OpenConnector }"));
		mapType.get("database/sql/driver")
				.add(new TypeGoLangApiSignature("database/sql/driver", "Connector interface, Driver() Driver"));
		mapType.get("database/sql/driver").add(new TypeGoLangApiSignature("database/sql/driver",
				"DriverContext interface, OpenConnector(string) (Connector, error)"));
		mapType.get("database/sql/driver")
				.add(new TypeGoLangApiSignature("database/sql/driver", "SessionResetter interface { ResetSession }"));

		pkgs.add("bufio");
		mapConst.putIfAbsent("bufio", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("bufio", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("bufio", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("bufio", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("bufio", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("bufio").add(
				new MethodGoLangApiSignature("bufio", "*Reader", "Size", new String[] { "" }, new String[] { "int" }));
		mapMethod.get("bufio").add(
				new MethodGoLangApiSignature("bufio", "*Writer", "Size", new String[] { "" }, new String[] { "int" }));

		pkgs.add("encoding/csv");
		mapConst.putIfAbsent("encoding/csv", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("encoding/csv", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("encoding/csv", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("encoding/csv", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("encoding/csv", new HashSet<VarGoLangApiSignature>());

		mapType.get("encoding/csv").add(new TypeGoLangApiSignature("encoding/csv", "ParseError struct, StartLine int"));

		pkgs.add("flag");
		mapConst.putIfAbsent("flag", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("flag", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("flag", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("flag", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("flag", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("flag").add(new MethodGoLangApiSignature("flag", "*FlagSet", "ErrorHandling", new String[] { "" },
				new String[] { "ErrorHandling" }));
		mapMethod.get("flag").add(new MethodGoLangApiSignature("flag", "*FlagSet", "Name", new String[] { "" },
				new String[] { "string" }));
		mapMethod.get("flag").add(new MethodGoLangApiSignature("flag", "*FlagSet", "Output", new String[] { "" },
				new String[] { "io.Writer" }));

		pkgs.add("syscall (freebsd-arm-cgo)");
		mapConst.putIfAbsent("syscall (freebsd-arm-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (freebsd-arm-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (freebsd-arm-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (freebsd-arm-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (freebsd-arm-cgo)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (freebsd-arm-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm-cgo)", "SYS_UTIMENSAT", " 547", null));
		mapConst.get("syscall (freebsd-arm-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm-cgo)", "SYS_UTIMENSAT", null, "ideal-int"));

		pkgs.add("syscall (freebsd-386-cgo)");
		mapConst.putIfAbsent("syscall (freebsd-386-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (freebsd-386-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (freebsd-386-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (freebsd-386-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (freebsd-386-cgo)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (freebsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-386-cgo)", "SYS_UTIMENSAT", null, "ideal-int"));
		mapConst.get("syscall (freebsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-386-cgo)", "SYS_UTIMENSAT", " 547", null));

		pkgs.add("syscall (freebsd-amd64-cgo)");
		mapConst.putIfAbsent("syscall (freebsd-amd64-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (freebsd-amd64-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (freebsd-amd64-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (freebsd-amd64-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (freebsd-amd64-cgo)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (freebsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-amd64-cgo)", "SYS_UTIMENSAT", null, "ideal-int"));
		mapConst.get("syscall (freebsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-amd64-cgo)", "SYS_UTIMENSAT", " 547", null));

		pkgs.add("crypto/x509/pkix");
		mapConst.putIfAbsent("crypto/x509/pkix", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("crypto/x509/pkix", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("crypto/x509/pkix", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("crypto/x509/pkix", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("crypto/x509/pkix", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("crypto/x509/pkix").add(new MethodGoLangApiSignature("crypto/x509/pkix", "Name", "String",
				new String[] { "" }, new String[] { "string" }));
		mapMethod.get("crypto/x509/pkix").add(new MethodGoLangApiSignature("crypto/x509/pkix", "RDNSequence", "String",
				new String[] { "" }, new String[] { "string" }));

		pkgs.add("encoding/xml");
		mapConst.putIfAbsent("encoding/xml", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("encoding/xml", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("encoding/xml", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("encoding/xml", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("encoding/xml", new HashSet<VarGoLangApiSignature>());

		mapType.get("encoding/xml").add(new TypeGoLangApiSignature("encoding/xml", "TokenReader interface { Token }"));
		mapFunc.get("encoding/xml").add(new FuncGoLangApiSignature("encoding/xml", "NewTokenDecoder",
				new String[] { "TokenReader" }, new String[] { "*Decoder" }));
		mapType.get("encoding/xml")
				.add(new TypeGoLangApiSignature("encoding/xml", "TokenReader interface, Token() (Token, error)"));

		pkgs.add("syscall (freebsd-386)");
		mapConst.putIfAbsent("syscall (freebsd-386)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (freebsd-386)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (freebsd-386)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (freebsd-386)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (freebsd-386)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (freebsd-386)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-386)", "SYS_UTIMENSAT", " 547", null));
		mapConst.get("syscall (freebsd-386)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-386)", "SYS_UTIMENSAT", null, "ideal-int"));

		pkgs.add("strings");
		mapConst.putIfAbsent("strings", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("strings", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("strings", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("strings", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("strings", new HashSet<VarGoLangApiSignature>());

		mapType.get("strings").add(new TypeGoLangApiSignature("strings", "Builder struct"));
		mapMethod.get("strings").add(new MethodGoLangApiSignature("strings", "*Builder", "WriteRune",
				new String[] { "int32" }, new String[] { "int", " error" }));
		mapMethod.get("strings").add(new MethodGoLangApiSignature("strings", "*Builder", "Write",
				new String[] { "[]uint8" }, new String[] { "int", " error" }));
		mapMethod.get("strings").add(new MethodGoLangApiSignature("strings", "*Builder", "String", new String[] { "" },
				new String[] { "string" }));
		mapMethod.get("strings").add(new MethodGoLangApiSignature("strings", "*Builder", "Grow", new String[] { "int" },
				new String[] { "" }));
		mapMethod.get("strings").add(new MethodGoLangApiSignature("strings", "*Builder", "Len", new String[] { "" },
				new String[] { "int" }));
		mapMethod.get("strings").add(
				new MethodGoLangApiSignature("strings", "*Builder", "Reset", new String[] { "" }, new String[] { "" }));
		mapMethod.get("strings").add(new MethodGoLangApiSignature("strings", "*Builder", "WriteByte",
				new String[] { "uint8" }, new String[] { "error" }));
		mapMethod.get("strings").add(new MethodGoLangApiSignature("strings", "*Builder", "WriteString",
				new String[] { "string" }, new String[] { "int", " error" }));

		pkgs.add("encoding/hex");
		mapConst.putIfAbsent("encoding/hex", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("encoding/hex", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("encoding/hex", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("encoding/hex", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("encoding/hex", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("encoding/hex").add(new FuncGoLangApiSignature("encoding/hex", "NewDecoder",
				new String[] { "io.Reader" }, new String[] { "io.Reader" }));
		mapFunc.get("encoding/hex").add(new FuncGoLangApiSignature("encoding/hex", "NewEncoder",
				new String[] { "io.Writer" }, new String[] { "io.Writer" }));

		pkgs.add("crypto/x509");
		mapConst.putIfAbsent("crypto/x509", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("crypto/x509", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("crypto/x509", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("crypto/x509", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("crypto/x509", new HashSet<VarGoLangApiSignature>());

		mapConst.get("crypto/x509").add(
				new ConstGoLangApiSignature("crypto/x509", "ExtKeyUsageMicrosoftCommercialCodeSigning", " 12", null));
		mapType.get("crypto/x509")
				.add(new TypeGoLangApiSignature("crypto/x509", "CertificateInvalidError struct, Detail string"));
		mapConst.get("crypto/x509")
				.add(new ConstGoLangApiSignature("crypto/x509", "ExtKeyUsageMicrosoftKernelCodeSigning", " 13", null));
		mapConst.get("crypto/x509")
				.add(new ConstGoLangApiSignature("crypto/x509", "TooManyConstraints", null, "InvalidReason"));
		mapFunc.get("crypto/x509").add(new FuncGoLangApiSignature("crypto/x509", "MarshalPKCS1PublicKey",
				new String[] { "*rsa.PublicKey" }, new String[] { "[]uint8" }));
		mapType.get("crypto/x509")
				.add(new TypeGoLangApiSignature("crypto/x509", "Certificate struct, URIs []*url.URL"));
		mapConst.get("crypto/x509").add(
				new ConstGoLangApiSignature("crypto/x509", "CANotAuthorizedForExtKeyUsage", null, "InvalidReason"));
		mapType.get("crypto/x509")
				.add(new TypeGoLangApiSignature("crypto/x509", "Certificate struct, PermittedEmailAddresses []string"));
		mapConst.get("crypto/x509")
				.add(new ConstGoLangApiSignature("crypto/x509", "CANotAuthorizedForExtKeyUsage", " 9", null));
		mapConst.get("crypto/x509").add(new ConstGoLangApiSignature("crypto/x509", "TooManyConstraints", " 8", null));
		mapConst.get("crypto/x509")
				.add(new ConstGoLangApiSignature("crypto/x509", "NameConstraintsWithoutSANs", " 6", null));
		mapConst.get("crypto/x509").add(new ConstGoLangApiSignature("crypto/x509",
				"ExtKeyUsageMicrosoftKernelCodeSigning", null, "ExtKeyUsage"));
		mapConst.get("crypto/x509").add(new ConstGoLangApiSignature("crypto/x509",
				"ExtKeyUsageMicrosoftCommercialCodeSigning", null, "ExtKeyUsage"));
		mapType.get("crypto/x509")
				.add(new TypeGoLangApiSignature("crypto/x509", "Certificate struct, PermittedURIDomains []string"));
		mapConst.get("crypto/x509")
				.add(new ConstGoLangApiSignature("crypto/x509", "NameConstraintsWithoutSANs", null, "InvalidReason"));
		mapConst.get("crypto/x509").add(new ConstGoLangApiSignature("crypto/x509", "UnconstrainedName", " 7", null));
		mapType.get("crypto/x509")
				.add(new TypeGoLangApiSignature("crypto/x509", "Certificate struct, ExcludedIPRanges []*net.IPNet"));
		mapType.get("crypto/x509")
				.add(new TypeGoLangApiSignature("crypto/x509", "Certificate struct, ExcludedEmailAddresses []string"));
		mapType.get("crypto/x509")
				.add(new TypeGoLangApiSignature("crypto/x509", "Certificate struct, PermittedIPRanges []*net.IPNet"));
		mapFunc.get("crypto/x509").add(new FuncGoLangApiSignature("crypto/x509", "ParsePKCS1PublicKey",
				new String[] { "[]uint8" }, new String[] { "*rsa.PublicKey", " error" }));
		mapMethod.get("crypto/x509").add(new MethodGoLangApiSignature("crypto/x509", "PublicKeyAlgorithm", "String",
				new String[] { "" }, new String[] { "string" }));
		mapType.get("crypto/x509")
				.add(new TypeGoLangApiSignature("crypto/x509", "VerifyOptions struct, MaxConstraintComparisions int"));
		mapFunc.get("crypto/x509").add(new FuncGoLangApiSignature("crypto/x509", "MarshalPKCS8PrivateKey",
				new String[] { "interface{}" }, new String[] { "[]uint8", " error" }));
		mapType.get("crypto/x509")
				.add(new TypeGoLangApiSignature("crypto/x509", "Certificate struct, ExcludedURIDomains []string"));
		mapConst.get("crypto/x509")
				.add(new ConstGoLangApiSignature("crypto/x509", "UnconstrainedName", null, "InvalidReason"));
		mapType.get("crypto/x509")
				.add(new TypeGoLangApiSignature("crypto/x509", "CertificateRequest struct, URIs []*url.URL"));

		pkgs.add("math/rand, func Shuffle(int");
		mapConst.putIfAbsent("math/rand, func Shuffle(int", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("math/rand, func Shuffle(int", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("math/rand, func Shuffle(int", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("math/rand, func Shuffle(int", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("math/rand, func Shuffle(int", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("math/rand, func Shuffle(int").add(new FuncGoLangApiSignature("math/rand", "Shuffle",
				new String[] { "int", " func(int", " int" }, new String[] { ")" }));

		pkgs.add("net");
		mapConst.putIfAbsent("net", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("net").add(new MethodGoLangApiSignature("net", "*UnixListener", "SyscallConn",
				new String[] { "" }, new String[] { "syscall.RawConn", " error" }));
		mapMethod.get("net").add(new MethodGoLangApiSignature("net", "*TCPListener", "SyscallConn", new String[] { "" },
				new String[] { "syscall.RawConn", " error" }));

		pkgs.add("net/smtp");
		mapConst.putIfAbsent("net/smtp", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net/smtp", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net/smtp", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net/smtp", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net/smtp", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("net/smtp").add(new MethodGoLangApiSignature("net/smtp", "*Client", "Noop", new String[] { "" },
				new String[] { "error" }));

		pkgs.add("syscall (freebsd-arm)");
		mapConst.putIfAbsent("syscall (freebsd-arm)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (freebsd-arm)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (freebsd-arm)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (freebsd-arm)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (freebsd-arm)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (freebsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm)", "SYS_UTIMENSAT", null, "ideal-int"));
		mapConst.get("syscall (freebsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm)", "SYS_UTIMENSAT", " 547", null));

		pkgs.add("syscall (windows-386)");
		mapConst.putIfAbsent("syscall (windows-386)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (windows-386)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (windows-386)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (windows-386)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (windows-386)", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("syscall (windows-386)")
				.add(new FuncGoLangApiSignature("syscall (windows-386)", "CreateProcessAsUser",
						new String[] { "Token", " *uint16", " *uint16", " *SecurityAttributes", " *SecurityAttributes",
								" bool", " uint32", " *uint16", " *uint16", " *StartupInfo", " *ProcessInformation" },
						new String[] { "error" }));
		mapType.get("syscall (windows-386)")
				.add(new TypeGoLangApiSignature("syscall (windows-386)", "SysProcAttr struct, Token Token"));

		pkgs.add("os");
		mapConst.putIfAbsent("os", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("os", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("os", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("os", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("os", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("os").add(new MethodGoLangApiSignature("os", "*File", "SetDeadline", new String[] { "time.Time" },
				new String[] { "error" }));
		mapMethod.get("os").add(new MethodGoLangApiSignature("os", "*PathError", "Timeout", new String[] { "" },
				new String[] { "bool" }));
		mapFunc.get("os")
				.add(new FuncGoLangApiSignature("os", "IsTimeout", new String[] { "error" }, new String[] { "bool" }));
		mapMethod.get("os").add(new MethodGoLangApiSignature("os", "*File", "SetReadDeadline",
				new String[] { "time.Time" }, new String[] { "error" }));
		mapVar.get("os").add(new VarGoLangApiSignature("os", "ErrNoDeadline", "error"));
		mapMethod.get("os").add(new MethodGoLangApiSignature("os", "*SyscallError", "Timeout", new String[] { "" },
				new String[] { "bool" }));
		mapMethod.get("os").add(new MethodGoLangApiSignature("os", "*File", "SetWriteDeadline",
				new String[] { "time.Time" }, new String[] { "error" }));

		pkgs.add("archive/tar");
		mapConst.putIfAbsent("archive/tar", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("archive/tar", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("archive/tar", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("archive/tar", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("archive/tar", new HashSet<VarGoLangApiSignature>());

		mapType.get("archive/tar").add(new TypeGoLangApiSignature("archive/tar", "Header struct, Format Format"));
		mapConst.get("archive/tar").add(new ConstGoLangApiSignature("archive/tar", "FormatPAX", " 4", null));
		mapConst.get("archive/tar").add(new ConstGoLangApiSignature("archive/tar", "FormatUSTAR", " 2", null));
		mapConst.get("archive/tar").add(new ConstGoLangApiSignature("archive/tar", "FormatUSTAR", null, "Format"));
		mapConst.get("archive/tar").add(new ConstGoLangApiSignature("archive/tar", "FormatGNU", null, "Format"));
		mapConst.get("archive/tar").add(new ConstGoLangApiSignature("archive/tar", "FormatPAX", null, "Format"));
		mapConst.get("archive/tar").add(new ConstGoLangApiSignature("archive/tar", "FormatUnknown", null, "Format"));
		mapMethod.get("archive/tar").add(new MethodGoLangApiSignature("archive/tar", "Format", "String",
				new String[] { "" }, new String[] { "string" }));
		mapType.get("archive/tar")
				.add(new TypeGoLangApiSignature("archive/tar", "Header struct, PAXRecords map[string]string"));
		mapConst.get("archive/tar").add(new ConstGoLangApiSignature("archive/tar", "FormatGNU", " 8", null));
		mapConst.get("archive/tar").add(new ConstGoLangApiSignature("archive/tar", "FormatUnknown", " 0", null));
		mapType.get("archive/tar").add(new TypeGoLangApiSignature("archive/tar", "Format int"));

		pkgs.add("math/big");
		mapConst.putIfAbsent("math/big", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("math/big", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("math/big", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("math/big", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("math/big", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "Sqrt",
				new String[] { "*Float" }, new String[] { "*Float" }));
		mapConst.get("math/big").add(new ConstGoLangApiSignature("math/big", "MaxBase", " 62", null));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Int", "CmpAbs",
				new String[] { "*Int" }, new String[] { "int" }));

		pkgs.add("archive/zip");
		mapConst.putIfAbsent("archive/zip", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("archive/zip", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("archive/zip", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("archive/zip", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("archive/zip", new HashSet<VarGoLangApiSignature>());

		mapType.get("archive/zip")
				.add(new TypeGoLangApiSignature("archive/zip", "FileHeader struct, Modified time.Time"));
		mapType.get("archive/zip").add(new TypeGoLangApiSignature("archive/zip", "FileHeader struct, NonUTF8 bool"));
		mapMethod.get("archive/zip").add(new MethodGoLangApiSignature("archive/zip", "*Writer", "SetComment",
				new String[] { "string" }, new String[] { "error" }));

		pkgs.add("encoding/asn1");
		mapConst.putIfAbsent("encoding/asn1", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("encoding/asn1", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("encoding/asn1", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("encoding/asn1", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("encoding/asn1", new HashSet<VarGoLangApiSignature>());

		mapConst.get("encoding/asn1")
				.add(new ConstGoLangApiSignature("encoding/asn1", "TagNumericString", " 18", null));
		mapFunc.get("encoding/asn1").add(new FuncGoLangApiSignature("encoding/asn1", "MarshalWithParams",
				new String[] { "interface{}", " string" }, new String[] { "[]uint8", " error" }));
		mapConst.get("encoding/asn1")
				.add(new ConstGoLangApiSignature("encoding/asn1", "TagNumericString", null, "ideal-int"));

		pkgs.add("math/rand, method (*Rand) Shuffle(int");
		mapConst.putIfAbsent("math/rand, method (*Rand) Shuffle(int", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("math/rand, method (*Rand) Shuffle(int", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("math/rand, method (*Rand) Shuffle(int", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("math/rand, method (*Rand) Shuffle(int", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("math/rand, method (*Rand) Shuffle(int", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("math/rand, method (*Rand) Shuffle(int").add(new MethodGoLangApiSignature("math/rand", "*Rand",
				"Shuffle", new String[] { "int", " func(int", " int" }, new String[] { ")" }));

		pkgs.add("database/sql");
		mapConst.putIfAbsent("database/sql", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("database/sql", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("database/sql", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("database/sql", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("database/sql", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("database/sql").add(new FuncGoLangApiSignature("database/sql", "OpenDB",
				new String[] { "driver.Connector" }, new String[] { "*DB" }));

		pkgs.add("debug/macho");
		mapConst.putIfAbsent("debug/macho", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("debug/macho", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("debug/macho", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("debug/macho", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("debug/macho", new HashSet<VarGoLangApiSignature>());

		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "ARM_RELOC_LOCAL_SECTDIFF", null, "RelocTypeARM"));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "FlagNoMultiDefs", " 512", null));
		mapType.get("debug/macho").add(new TypeGoLangApiSignature("debug/macho", "Section struct, Relocs []Reloc"));
		mapConst.get("debug/macho").add(
				new ConstGoLangApiSignature("debug/macho", "ARM64_RELOC_TLVP_LOAD_PAGEOFF12", null, "RelocTypeARM64"));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "FlagNoHeapExecution", " 16777216", null));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "GENERIC_RELOC_VANILLA", " 0", null));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "FlagNoReexportedDylibs", " 1048576", null));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "FlagLazyInit", null, "uint32"));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "X86_64_RELOC_SIGNED", " 1", null));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "X86_64_RELOC_SIGNED", null, "RelocTypeX86_64"));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "FlagNoUndefs", " 1", null));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "FlagNoFixPrebinding", null, "uint32"));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "ARM_RELOC_PAIR", null, "RelocTypeARM"));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "ARM64_RELOC_TLVP_LOAD_PAGEOFF12", " 9", null));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "ARM_RELOC_VANILLA", " 0", null));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "FlagAllModsBound", " 4096", null));
		mapMethod.get("debug/macho").add(new MethodGoLangApiSignature("debug/macho", "RelocTypeARM64", "GoString",
				new String[] { "" }, new String[] { "string" }));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "FlagPrebindable", null, "uint32"));
		mapMethod.get("debug/macho").add(new MethodGoLangApiSignature("debug/macho", "RelocTypeX86_64", "GoString",
				new String[] { "" }, new String[] { "string" }));
		mapType.get("debug/macho").add(new TypeGoLangApiSignature("debug/macho", "Rpath struct, Path string"));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "ARM_THUMB_32BIT_BRANCH", " 7", null));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "FlagSetuidSafe", null, "uint32"));
		mapType.get("debug/macho").add(new TypeGoLangApiSignature("debug/macho", "Reloc struct, Scattered bool"));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "X86_64_RELOC_SIGNED_4", " 8", null));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "X86_64_RELOC_GOT", " 4", null));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "ARM64_RELOC_GOT_LOAD_PAGE21", null, "RelocTypeARM64"));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "X86_64_RELOC_GOT", null, "RelocTypeX86_64"));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "ARM64_RELOC_POINTER_TO_GOT", null, "RelocTypeARM64"));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "ARM64_RELOC_UNSIGNED", null, "RelocTypeARM64"));
		mapMethod.get("debug/macho").add(new MethodGoLangApiSignature("debug/macho", "Type", "GoString",
				new String[] { "" }, new String[] { "string" }));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "FlagSubsectionsViaSymbols", " 8192", null));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "X86_64_RELOC_SIGNED_4", null, "RelocTypeX86_64"));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "ARM64_RELOC_BRANCH26", " 2", null));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "ARM64_RELOC_POINTER_TO_GOT", " 7", null));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "FlagSubsectionsViaSymbols", null, "uint32"));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "FlagTwoLevel", null, "uint32"));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "FlagPIE", null, "uint32"));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "FlagNoHeapExecution", null, "uint32"));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "ARM64_RELOC_PAGE21", " 3", null));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "FlagNoUndefs", null, "uint32"));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "X86_64_RELOC_GOT_LOAD", null, "RelocTypeX86_64"));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "ARM_RELOC_LOCAL_SECTDIFF", " 3", null));
		mapType.get("debug/macho").add(new TypeGoLangApiSignature("debug/macho", "Reloc struct, Len uint8"));
		mapMethod.get("debug/macho").add(new MethodGoLangApiSignature("debug/macho", "RelocTypeARM", "GoString",
				new String[] { "" }, new String[] { "string" }));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "GENERIC_RELOC_SECTDIFF", null, "RelocTypeGeneric"));
		mapConst.get("debug/macho").add(
				new ConstGoLangApiSignature("debug/macho", "ARM64_RELOC_GOT_LOAD_PAGEOFF12", null, "RelocTypeARM64"));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "GENERIC_RELOC_PB_LA_PTR", " 3", null));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "FlagSplitSegs", " 32", null));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "FlagBindsToWeak", " 65536", null));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "GENERIC_RELOC_VANILLA", null, "RelocTypeGeneric"));
		mapType.get("debug/macho").add(new TypeGoLangApiSignature("debug/macho", "RpathCmd struct, Path uint32"));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "ARM64_RELOC_GOT_LOAD_PAGEOFF12", " 6", null));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "ARM_RELOC_VANILLA", null, "RelocTypeARM"));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "FlagHasTLVDescriptors", " 8388608", null));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "X86_64_RELOC_BRANCH", null, "RelocTypeX86_64"));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "ARM64_RELOC_GOT_LOAD_PAGE21", " 5", null));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "FlagAppExtensionSafe", " 33554432", null));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "FlagForceFlat", " 256", null));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "X86_64_RELOC_TLV", null, "RelocTypeX86_64"));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "ARM64_RELOC_SUBTRACTOR", null, "RelocTypeARM64"));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "ARM_THUMB_32BIT_BRANCH", null, "RelocTypeARM"));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "FlagAppExtensionSafe", null, "uint32"));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "FlagIncrLink", null, "uint32"));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "ARM64_RELOC_UNSIGNED", " 0", null));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "ARM_RELOC_HALF", null, "RelocTypeARM"));
		mapType.get("debug/macho").add(new TypeGoLangApiSignature("debug/macho", "Reloc struct, Value uint32"));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "FlagLazyInit", " 64", null));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "GENERIC_RELOC_PAIR", null, "RelocTypeGeneric"));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "X86_64_RELOC_SIGNED_1", " 6", null));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "FlagDyldLink", " 4", null));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "FlagAllowStackExecution", " 131072", null));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "ARM64_RELOC_BRANCH26", null, "RelocTypeARM64"));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "ARM_THUMB_RELOC_BR22", " 6", null));
		mapType.get("debug/macho").add(new TypeGoLangApiSignature("debug/macho", "RpathCmd struct, Len uint32"));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "FlagWeakDefines", null, "uint32"));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "ARM_RELOC_HALF", " 8", null));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "FlagForceFlat", null, "uint32"));
		mapType.get("debug/macho").add(new TypeGoLangApiSignature("debug/macho", "RpathCmd struct, Cmd LoadCmd"));
		mapMethod.get("debug/macho").add(new MethodGoLangApiSignature("debug/macho", "RelocTypeARM", "String",
				new String[] { "" }, new String[] { "string" }));
		mapType.get("debug/macho").add(new TypeGoLangApiSignature("debug/macho", "Rpath struct"));
		mapType.get("debug/macho").add(new TypeGoLangApiSignature("debug/macho", "Reloc struct"));
		mapType.get("debug/macho").add(new TypeGoLangApiSignature("debug/macho", "RelocTypeARM64 int"));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "FlagBindAtLoad", " 8", null));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "ARM64_RELOC_ADDEND", " 10", null));
		mapConst.get("debug/macho").add(
				new ConstGoLangApiSignature("debug/macho", "ARM64_RELOC_TLVP_LOAD_PAGE21", null, "RelocTypeARM64"));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "FlagDeadStrippableDylib", null, "uint32"));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "ARM64_RELOC_PAGEOFF12", " 4", null));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "FlagDeadStrippableDylib", " 4194304", null));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "ARM_RELOC_BR24", " 5", null));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "FlagSplitSegs", null, "uint32"));
		mapType.get("debug/macho").add(new TypeGoLangApiSignature("debug/macho", "RelocTypeARM int"));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "GENERIC_RELOC_TLV", null, "RelocTypeGeneric"));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "ARM64_RELOC_TLVP_LOAD_PAGE21", " 8", null));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "FlagAllModsBound", null, "uint32"));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "FlagNoReexportedDylibs", null, "uint32"));
		mapConst.get("debug/macho").add(
				new ConstGoLangApiSignature("debug/macho", "GENERIC_RELOC_LOCAL_SECTDIFF", null, "RelocTypeGeneric"));
		mapType.get("debug/macho").add(new TypeGoLangApiSignature("debug/macho", "Reloc struct, Type uint8"));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "X86_64_RELOC_UNSIGNED", " 0", null));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "FlagPIE", " 2097152", null));
		mapMethod.get("debug/macho").add(new MethodGoLangApiSignature("debug/macho", "Rpath", "Raw",
				new String[] { "" }, new String[] { "[]uint8" }));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "FlagNoMultiDefs", null, "uint32"));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "ARM_RELOC_SECTDIFF", " 2", null));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "X86_64_RELOC_UNSIGNED", null, "RelocTypeX86_64"));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "ARM64_RELOC_PAGEOFF12", null, "RelocTypeARM64"));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "LoadCmdRpath", null, "LoadCmd"));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "X86_64_RELOC_SUBTRACTOR", null, "RelocTypeX86_64"));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "GENERIC_RELOC_PB_LA_PTR", null, "RelocTypeGeneric"));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "ARM64_RELOC_SUBTRACTOR", " 1", null));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "X86_64_RELOC_SUBTRACTOR", " 5", null));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "ARM64_RELOC_ADDEND", null, "RelocTypeARM64"));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "FlagPrebindable", " 2048", null));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "FlagPrebound", null, "uint32"));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "FlagBindsToWeak", null, "uint32"));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "FlagCanonical", " 16384", null));
		mapMethod.get("debug/macho").add(new MethodGoLangApiSignature("debug/macho", "RelocTypeGeneric", "GoString",
				new String[] { "" }, new String[] { "string" }));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "ARM_RELOC_BR24", null, "RelocTypeARM"));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "ARM_RELOC_SECTDIFF", null, "RelocTypeARM"));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "FlagAllowStackExecution", null, "uint32"));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "FlagNoFixPrebinding", " 1024", null));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "X86_64_RELOC_SIGNED_2", " 7", null));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "ARM_RELOC_HALF_SECTDIFF", " 9", null));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "X86_64_RELOC_SIGNED_2", null, "RelocTypeX86_64"));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "ARM64_RELOC_PAGE21", null, "RelocTypeARM64"));
		mapMethod.get("debug/macho").add(new MethodGoLangApiSignature("debug/macho", "Type", "String",
				new String[] { "" }, new String[] { "string" }));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "GENERIC_RELOC_PAIR", " 1", null));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "ARM_THUMB_RELOC_BR22", null, "RelocTypeARM"));
		mapType.get("debug/macho").add(new TypeGoLangApiSignature("debug/macho", "RpathCmd struct"));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "ARM_RELOC_HALF_SECTDIFF", null, "RelocTypeARM"));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "FlagIncrLink", " 2", null));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "X86_64_RELOC_GOT_LOAD", " 3", null));
		mapType.get("debug/macho").add(new TypeGoLangApiSignature("debug/macho", "RelocTypeGeneric int"));
		mapType.get("debug/macho").add(new TypeGoLangApiSignature("debug/macho", "RelocTypeX86_64 int"));
		mapType.get("debug/macho").add(new TypeGoLangApiSignature("debug/macho", "Reloc struct, Extern bool"));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "ARM_RELOC_PAIR", " 1", null));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "GENERIC_RELOC_LOCAL_SECTDIFF", " 4", null));
		mapMethod.get("debug/macho").add(new MethodGoLangApiSignature("debug/macho", "RelocTypeX86_64", "String",
				new String[] { "" }, new String[] { "string" }));
		mapMethod.get("debug/macho").add(new MethodGoLangApiSignature("debug/macho", "RelocTypeARM64", "String",
				new String[] { "" }, new String[] { "string" }));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "FlagCanonical", null, "uint32"));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "LoadCmdRpath", " 2147483676", null));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "X86_64_RELOC_BRANCH", " 2", null));
		mapType.get("debug/macho").add(new TypeGoLangApiSignature("debug/macho", "Reloc struct, Pcrel bool"));
		mapMethod.get("debug/macho").add(new MethodGoLangApiSignature("debug/macho", "RelocTypeGeneric", "String",
				new String[] { "" }, new String[] { "string" }));
		mapType.get("debug/macho").add(new TypeGoLangApiSignature("debug/macho", "Rpath struct, embedded LoadBytes"));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "FlagPrebound", " 16", null));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "FlagWeakDefines", " 32768", null));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "GENERIC_RELOC_SECTDIFF", " 2", null));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "FlagBindAtLoad", null, "uint32"));
		mapType.get("debug/macho").add(new TypeGoLangApiSignature("debug/macho", "Reloc struct, Addr uint32"));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "ARM_RELOC_PB_LA_PTR", " 4", null));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "FlagSetuidSafe", " 524288", null));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "FlagRootSafe", null, "uint32"));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "FlagHasTLVDescriptors", null, "uint32"));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "X86_64_RELOC_TLV", " 9", null));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "FlagDyldLink", null, "uint32"));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "FlagTwoLevel", " 128", null));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "ARM_RELOC_PB_LA_PTR", null, "RelocTypeARM"));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "FlagRootSafe", " 262144", null));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "GENERIC_RELOC_TLV", " 5", null));
		mapConst.get("debug/macho")
				.add(new ConstGoLangApiSignature("debug/macho", "X86_64_RELOC_SIGNED_1", null, "RelocTypeX86_64"));

		pkgs.add("unicode");
		mapConst.putIfAbsent("unicode", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("unicode", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("unicode", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("unicode", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("unicode", new HashSet<VarGoLangApiSignature>());

		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Masaram_Gondi", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Zanabazar_Square", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Regional_Indicator", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Nushu", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Soyombo", "*RangeTable"));
		mapConst.get("unicode").add(new ConstGoLangApiSignature("unicode", "Version", " \"10.0.0\"", null));

		pkgs.add("encoding/json");
		mapConst.putIfAbsent("encoding/json", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("encoding/json", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("encoding/json", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("encoding/json", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("encoding/json", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("encoding/json").add(new MethodGoLangApiSignature("encoding/json", "*Decoder",
				"DisallowUnknownFields", new String[] { "" }, new String[] { "" }));

		pkgs.add("math");
		mapConst.putIfAbsent("math", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("math", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("math", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("math", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("math", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("math").add(
				new FuncGoLangApiSignature("math", "Round", new String[] { "float64" }, new String[] { "float64" }));
		mapFunc.get("math").add(new FuncGoLangApiSignature("math", "RoundToEven", new String[] { "float64" },
				new String[] { "float64" }));
		mapFunc.get("math").add(
				new FuncGoLangApiSignature("math", "Erfinv", new String[] { "float64" }, new String[] { "float64" }));
		mapFunc.get("math").add(
				new FuncGoLangApiSignature("math", "Erfcinv", new String[] { "float64" }, new String[] { "float64" }));

		pkgs.add("syscall (freebsd-amd64)");
		mapConst.putIfAbsent("syscall (freebsd-amd64)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (freebsd-amd64)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (freebsd-amd64)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (freebsd-amd64)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (freebsd-amd64)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (freebsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-amd64)", "SYS_UTIMENSAT", " 547", null));
		mapConst.get("syscall (freebsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-amd64)", "SYS_UTIMENSAT", null, "ideal-int"));

		pkgs.add("time");
		mapConst.putIfAbsent("time", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("time", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("time", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("time", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("time", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("time").add(new FuncGoLangApiSignature("time", "LoadLocationFromTZData",
				new String[] { "string", " []uint8" }, new String[] { "*Location", " error" }));

		pkgs.add("debug/elf");
		mapConst.putIfAbsent("debug/elf", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("debug/elf", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("debug/elf", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("debug/elf", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("debug/elf", new HashSet<VarGoLangApiSignature>());

		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_386_8", null, "R_386"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_TLS_TPOFF32", " 19", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_PRIVATE_2", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_LDC_PC_G2", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_LDR_PC_G2", " 63", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_JUMP11", " 102", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_LDRS_SB_G0", " 78", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_ALU_PREL_11_0", " 53", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_PLTGOT16_HA", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_PC12", " 54", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_GOTOFF64", null, "R_X86_64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_TARGET2", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_PRIVATE_2", " 114", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_CALL", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_TLS_LE32", " 108", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_JUMP19", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_TLS_CALL", " 91", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_TLS_DTPOFF32", " 18", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_PRIVATE_15", null, "R_ARM"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_ARM_ALU_SBREL_27_20_CK", " 37", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_JUMP11", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_386_32PLT", null, "R_386"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_MOVT_PREL", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_TLS_LDO32", " 106", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_386_32PLT", " 11", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_386_TLS_GOTDESC", " 39", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_PLT32_ABS", " 94", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_LDC_SB_G2", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_TLS_DTPMOD32", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_GOTOFF12", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_MOVT_ABS", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_ALU_SB_G0", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_386_TLS_DESC", " 41", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_ALU_PC_G1_NC", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_GOT64", " 27", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_MOVW_BREL_NC", " 84", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_GOTPCREL64", " 28", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_SIZE64", null, "R_X86_64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_REX_GOTPCRELX", null, "R_X86_64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_ALU_SB_G0_NC", " 70", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_PRIVATE_9", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_PC64", null, "R_X86_64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_SIZE32", " 32", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSGD_ADR_PREL21", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_TLS_LDO32", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_386_TLS_GOTDESC", null, "R_386"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_PRIVATE_1", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_MOVT_ABS", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_MOVW_ABS_NC", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_LDR_PC_G1", " 62", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_TLSDESC", " 36", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_PRIVATE_1", " 113", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_GOTPC32_TLSDESC", " 34", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_JMP_IREL", " 247", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_REL16DX_HA", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_TLS_GD32", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_SECTOFF_LO_DS", " 61", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_386_TLS_DESC", null, "R_386"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TOCSAVE", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_PREL31", " 42", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_V4BX", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_MOVW_PREL_NC", " 49", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_TLS_LE32", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_IRELATIVE", " 37", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_JUMP6", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_PLT32_BND", " 40", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_IRELATIVE", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_PLTGOT16_LO", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_LDR_SB_G2", " 77", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_PRIVATE_14", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_JUMP8", " 103", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_PLTGOT16_HI", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_GOTPCRELX", null, "R_X86_64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_GOTPLT64", null, "R_X86_64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_PRIVATE_9", " 121", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_ALU_PCREL_7_0", " 32", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_ALU_PC_G0_NC", " 57", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_PLTGOT16_DS", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TOCSAVE", " 109", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_PRIVATE_8", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_MOVT_BREL", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_PLTGOT16", " 52", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_TLSDESC", null, "R_X86_64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_PRIVATE_0", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_TLS_LDO12", null, "R_ARM"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR64_LOCAL", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_PLTOFF64", " 31", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_MOVW_BREL", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_386_PC8", " 23", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_LD64_GOTPAGE_LO15", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_RXPC25", " 249", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_LDRS_SB_G1", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_MOVW_BREL_NC", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_PRIVATE_0", " 112", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_REL32_NOI", " 56", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_MOVT_BREL", " 88", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_SECTOFF_DS", " 61", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_MOVW_PREL_NC", " 45", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_JUMP24", " 30", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_ABS32_NOI", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_PRIVATE_15", " 127", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_MOVW_PREL_NC", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_386_GOT32X", null, "R_386"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_GOT_PREL", " 96", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_LDC_PC_G0", " 67", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_ALU_PCREL_7_0", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_TLS_TPOFF32", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_LDR_SB_G0", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_GOTPC64", " 29", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC", " 573", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_LDC_SB_G1", " 82", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSLD_ADR_PREL21", " 517", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_DTPREL16_HIGH", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_386_IRELATIVE", null, "R_386"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_386_TLS_DESC_CALL", " 40", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_REL32_NOI", null, "R_ARM"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSGD_MOVW_G1", " 515", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_LDRS_PC_G1", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_ALU_PCREL_23_15", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_TLS_GOTDESC", " 90", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_IRELATIVE", " 160", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_PRIVATE_8", " 120", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_386_SIZE32", " 38", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_GOTRELAX", " 99", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_PC32_BND", null, "R_X86_64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_PRIVATE_7", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_GOTOFF12", " 98", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_LDR_PC_G1", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_REL24_NOTOC", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_386_IRELATIVE", " 42", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_LDRS_SB_G2", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_JUMP24", null, "R_ARM"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TPREL16_HIGH", null, "R_PPC64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_LD64_GOTOFF_LO15", " 310", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_GOT_ABS", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_TLSDESC_CALL", " 35", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_GOTPCREL64", null, "R_X86_64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_PLT16_LO_DS", " 60", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_TLS_DESCSEQ32", " 130", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_DTPREL16_HIGHA", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_ALU_SB_G0", " 71", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_MOVW_BREL", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_PLT32_BND", null, "R_X86_64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSGD_MOVW_G0_NC", " 516", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_PRIVATE_7", " 119", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_ALU_PCREL_23_15", " 34", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_386_PC8", null, "R_386"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_LDC_SB_G0", " 81", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_LDR_SB_G1", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_ALU_PC_G0_NC", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_386_8", " 22", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_ALU_ABS_G3", " 135", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_LDRS_PC_G2", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_TLS_CALL", null, "R_ARM"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC", " 571", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_386_SIZE32", null, "R_386"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_386_GOT32X", " 43", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSLD_ADR_PAGE21", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_ALU_SB_G1_NC", " 72", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_MOVW_ABS_NC", null, "R_ARM"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_TLS_DESCSEQ32", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_ALU_ABS_G3", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_PC12", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_PRIVATE_6", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_PLTGOT16_HA", " 55", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_LDR_PC_G2", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_MOVT_PREL", " 50", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_REX_GOTPCRELX", " 42", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_PLTGOT16_HI", " 54", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_PLTGOT16_LO", " 53", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_386_TLS_DESC_CALL", null, "R_386"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_TLS_DESCSEQ16", " 129", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_386_PC16", " 21", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_TLS_GOTDESC", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_LDC_PC_G2", " 69", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TPREL16_HIGHA", " 113", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSLE_LDST128_TPREL_LO12", " 570", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR16_HIGHA", " 111", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR16_HIGHA", null, "R_PPC64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TPREL16_HIGHA", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_ALU_SB_G1", " 73", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_PRIVATE_13", " 125", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ENTRY", " 118", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ENTRY", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_RELATIVE64", " 38", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_SECTOFF_LO_DS", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_TLS_IE32", " 107", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_PRIVATE_12", " 124", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_PRIVATE_6", " 118", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_TARGET1", " 38", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_TLS_LE12", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_LDR_SB_G2", null, "R_ARM"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_LD64_GOTOFF_LO15", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_SIZE64", " 33", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_PRIVATE_11", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR16_HIGH", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_JUMP6", " 52", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_MOVW_ABS_NC", " 43", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_TLS_DESCSEQ16", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_PC32_BND", " 39", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_ALU_PREL_11_0", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_RXPC25", null, "R_ARM"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSLE_LDST128_TPREL_LO12", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_GOT_PREL", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_386_16", null, "R_386"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_JUMP19", " 51", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_MOVT_BREL", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_MOVW_PREL_NC", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_TLS_DESCSEQ", " 92", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_PLT16_LO_DS", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_ALU_SB_G2", " 74", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_PRIVATE_5", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_GOT_BREL12", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_SBREL31", " 39", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_LDRS_SB_G0", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_TLS_LDM32", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_TLS_CALL", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_GOTRELAX", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_GOTPC64", null, "R_X86_64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_MOVW_ABS_NC", " 47", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_MOVW_BREL_NC", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR16_HIGH", " 110", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_PLTGOT16_DS", " 65", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_386_16", " 20", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_TLSDESC_CALL", null, "R_X86_64"));
	}

	private void build1() {
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_ALU_PC_G1", " 60", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_PRIVATE_5", " 117", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_LDC_PC_G1", " 68", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_PRIVATE_14", " 126", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_TLS_IE12GP", " 111", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_TLS_IE32", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_ALU_PC_G0", " 58", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_LDRS_PC_G2", " 66", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_IRELATIVE", " 248", null));
		mapConst.get("debug/elf").add(
				new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_ALU_ABS_G2_NC", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_PLTOFF64", null, "R_X86_64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_386_PC16", null, "R_386"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_PRIVATE_10", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_IRELATIVE", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_LDRS_PC_G0", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_REL16DX_HA", " 246", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_MOVT_ABS", " 48", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_LDC_SB_G2", " 83", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_SBREL31", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_SECTOFF_DS", null, "R_PPC64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_ARM_LDR_SBREL_11_10_NC", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_TLS_LE12", " 110", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_TLS_LDO12", " 109", null));
		mapConst.get("debug/elf").add(
				new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSLD_LDST128_DTPREL_LO12", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSGD_MOVW_G0_NC", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_CALL", " 28", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_PLT32_ABS", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_ALU_SB_G1_NC", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_ALU_PCREL_15_8", null, "R_ARM"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_PLTGOT_LO_DS", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_PLTGOT_LO_DS", " 66", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_PRIVATE_4", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_LDRS_SB_G2", " 80", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_TLS_DTPMOD32", " 17", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_MOVW_BREL", " 89", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_LDC_PC_G0", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_PREL31", null, "R_ARM"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_ALU_ABS_G2_NC", " 134", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSLD_LDST128_DTPREL_LO12", " 572", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR64_LOCAL", " 117", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_V4BX", " 40", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_ALU_PC_G2", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_GOTPCRELX", " 41", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_ALU_PC_G2", " 61", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_PRIVATE_4", " 116", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_MOVW_BREL_NC", " 87", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSGD_ADR_PREL21", " 512", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_LDRS_PC_G1", " 65", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_PRIVATE_10", " 122", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_PRIVATE_13", null, "R_ARM"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_ALU_ABS_G0_NC", " 132", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_ARM_LDR_SBREL_11_10_NC", " 35", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_LDR_SB_G1", " 76", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_ARM_ALU_SBREL_19_12_NC", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_JUMP24", null, "R_ARM"));
		mapConst.get("debug/elf").add(
				new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_ABS32_NOI", " 55", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_TLS_DESCSEQ", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_JMP_IREL", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_LDC_SB_G0", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_GOTPC32", null, "R_X86_64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_ME_TOO", " 128", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_PLTGOT16", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_REL24_NOTOC", " 116", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_TLS_DTPOFF32", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_BASE_ABS", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_MOVT_PREL", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_ALU_SB_G2", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_GOTPC32", " 26", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSLD_ADR_PREL21", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_GOT_ABS", " 95", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_ALU_PCREL_15_8", " 33", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_BASE_ABS", " 31", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_ALU_ABS_G0_NC", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_ALU_PC_G1_NC", " 59", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_TLS_IE12GP", null, "R_ARM"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSLD_ADR_PAGE21", " 518", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_MOVW_BREL", " 86", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_GOT_BREL12", " 97", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_PRIVATE_3", null, "R_ARM"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_GOTPC32_TLSDESC", null, "R_X86_64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_LDRS_SB_G1", " 79", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_PC64", " 24", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSGD_MOVW_G1", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_LDC_PC_G1", null, "R_ARM"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_ALU_ABS_G1_NC", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_DTPREL16_HIGH", " 114", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TPREL16_HIGH", " 112", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_ME_TOO", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_MOVT_ABS", " 44", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_ARM_ALU_SBREL_19_12_NC", " 36", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_PRIVATE_3", " 115", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_ALU_PC_G1", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_TARGET2", " 41", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_GOT_BREL12", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_TLS_LDM32", " 105", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_JUMP24", " 29", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_TLS_CALL", " 93", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_DTPREL16_HIGHA", " 115", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_GOT64", null, "R_X86_64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_PRIVATE_11", " 123", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_JUMP8", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_GOTOFF64", " 25", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_LDRS_PC_G0", " 64", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_SIZE32", null, "R_X86_64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_ALU_PC_G0", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_GOTPLT64", " 30", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_RELATIVE64", null, "R_X86_64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_TARGET1", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_PRIVATE_12", null, "R_ARM"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_LD64_GOTPAGE_LO15", " 313", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_LDR_SB_G0", " 75", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_MOVT_PREL", " 46", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_TLS_GD32", " 104", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_MOVT_BREL", " 85", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_ARM_ALU_SBREL_27_20_CK", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_X86_64_IRELATIVE", null, "R_X86_64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_LDC_SB_G1", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_ALU_SB_G0_NC", null, "R_ARM"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_GOT_BREL12", " 131", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_ARM_ALU_SB_G1", null, "R_ARM"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_ARM_THM_ALU_ABS_G1_NC", " 133", null));

		pkgs.add("html/template");
		mapConst.putIfAbsent("html/template", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("html/template", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("html/template", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("html/template", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("html/template", new HashSet<VarGoLangApiSignature>());

		mapType.get("html/template").add(new TypeGoLangApiSignature("html/template", "Srcset string"));

		pkgs.add("syscall (windows-amd64)");
		mapConst.putIfAbsent("syscall (windows-amd64)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (windows-amd64)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (windows-amd64)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (windows-amd64)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (windows-amd64)", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("syscall (windows-amd64)")
				.add(new FuncGoLangApiSignature("syscall (windows-amd64)", "CreateProcessAsUser",
						new String[] { "Token", " *uint16", " *uint16", " *SecurityAttributes", " *SecurityAttributes",
								" bool", " uint32", " *uint16", " *uint16", " *StartupInfo", " *ProcessInformation" },
						new String[] { "error" }));
		mapType.get("syscall (windows-amd64)")
				.add(new TypeGoLangApiSignature("syscall (windows-amd64)", "SysProcAttr struct, Token Token"));

	}

}