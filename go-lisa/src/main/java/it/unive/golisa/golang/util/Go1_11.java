package it.unive.golisa.golang.util;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import it.unive.golisa.golang.api.signature.ConstGoLangApiSignature;
import it.unive.golisa.golang.api.signature.FuncGoLangApiSignature;
import it.unive.golisa.golang.api.signature.MethodGoLangApiSignature;
import it.unive.golisa.golang.api.signature.TypeGoLangApiSignature;
import it.unive.golisa.golang.api.signature.VarGoLangApiSignature;

/**
 * Auto-generated by GoLiSA build
 */
public class Go1_11 {
	private final Map<String, Set<ConstGoLangApiSignature>> mapConst;
	private final Map<String, Set<FuncGoLangApiSignature>> mapFunc;
	private final Map<String, Set<MethodGoLangApiSignature>> mapMethod;
	private final Map<String, Set<TypeGoLangApiSignature>> mapType;
	private final Map<String, Set<VarGoLangApiSignature>> mapVar;
	private final Set<String> pkgs;

	public Go1_11() {
		pkgs = new HashSet<>();
		mapConst = new HashMap<String, Set<ConstGoLangApiSignature>>();
		mapFunc = new HashMap<String, Set<FuncGoLangApiSignature>>();
		mapMethod = new HashMap<String, Set<MethodGoLangApiSignature>>();
		mapType = new HashMap<String, Set<TypeGoLangApiSignature>>();
		mapVar = new HashMap<String, Set<VarGoLangApiSignature>>();

		build();
	}

	public Set<String> getPackages() {
		return pkgs;
	}

	public Map<String, Set<ConstGoLangApiSignature>> getMapConst() {
		return mapConst;
	}

	public Map<String, Set<FuncGoLangApiSignature>> getMapFunc() {
		return mapFunc;
	}

	public Map<String, Set<MethodGoLangApiSignature>> getMapMethod() {
		return mapMethod;
	}

	public Map<String, Set<TypeGoLangApiSignature>> getMapType() {
		return mapType;
	}

	public Map<String, Set<VarGoLangApiSignature>> getMapVar() {
		return mapVar;
	}

	private void build() {
		build0();
		build1();
	}

	private void build0() {
		pkgs.add("crypto/tls");
		mapConst.putIfAbsent("crypto/tls", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("crypto/tls", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("crypto/tls", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("crypto/tls", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("crypto/tls", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("crypto/tls")
				.add(new MethodGoLangApiSignature("crypto/tls", "*ConnectionState", "ExportKeyingMaterial",
						new String[] { "string", " []uint8", " int" }, new String[] { "[]uint8", " error" }));

		pkgs.add("syscall");
		mapConst.putIfAbsent("syscall", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall").add(new ConstGoLangApiSignature("syscall", "ImplementsGetwd", " true", null));

		pkgs.add("syscall (netbsd-amd64-cgo)");
		mapConst.putIfAbsent("syscall (netbsd-amd64-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (netbsd-amd64-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (netbsd-amd64-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (netbsd-amd64-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (netbsd-amd64-cgo)", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("syscall (netbsd-amd64-cgo)").add(new FuncGoLangApiSignature("syscall (netbsd-amd64-cgo)", "Pipe2",
				new String[] { "[]int", " int" }, new String[] { "error" }));
		mapFunc.get("syscall (netbsd-amd64-cgo)").add(new FuncGoLangApiSignature("syscall (netbsd-amd64-cgo)",
				"Accept4", new String[] { "int", " int" }, new String[] { "int", " Sockaddr", " error" }));

		pkgs.add("regexp/syntax");
		mapConst.putIfAbsent("regexp/syntax", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("regexp/syntax", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("regexp/syntax", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("regexp/syntax", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("regexp/syntax", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("regexp/syntax").add(new MethodGoLangApiSignature("regexp/syntax", "Op", "String",
				new String[] { "" }, new String[] { "string" }));

		pkgs.add("crypto/cipher");
		mapConst.putIfAbsent("crypto/cipher", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("crypto/cipher", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("crypto/cipher", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("crypto/cipher", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("crypto/cipher", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("crypto/cipher").add(new FuncGoLangApiSignature("crypto/cipher", "NewGCMWithTagSize",
				new String[] { "Block", " int" }, new String[] { "AEAD", " error" }));

		pkgs.add("syscall (netbsd-amd64)");
		mapConst.putIfAbsent("syscall (netbsd-amd64)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (netbsd-amd64)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (netbsd-amd64)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (netbsd-amd64)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (netbsd-amd64)", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("syscall (netbsd-amd64)").add(new FuncGoLangApiSignature("syscall (netbsd-amd64)", "Pipe2",
				new String[] { "[]int", " int" }, new String[] { "error" }));
		mapFunc.get("syscall (netbsd-amd64)").add(new FuncGoLangApiSignature("syscall (netbsd-amd64)", "Accept4",
				new String[] { "int", " int" }, new String[] { "int", " Sockaddr", " error" }));

		pkgs.add("debug/pe");
		mapConst.putIfAbsent("debug/pe", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("debug/pe", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("debug/pe", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("debug/pe", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("debug/pe", new HashSet<VarGoLangApiSignature>());

		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DIRECTORY_ENTRY_BASERELOC", " 5", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DIRECTORY_ENTRY_SECURITY", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DIRECTORY_ENTRY_EXPORT", " 0", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DIRECTORY_ENTRY_ARCHITECTURE", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DIRECTORY_ENTRY_EXPORT", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT", " 11", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_FILE_MACHINE_ARM64", null, "ideal-int"));
		mapConst.get("debug/pe").add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DIRECTORY_ENTRY_TLS", " 9", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG", " 10", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_FILE_MACHINE_ARM64", " 43620", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DIRECTORY_ENTRY_ARCHITECTURE", " 7", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DIRECTORY_ENTRY_EXCEPTION", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DIRECTORY_ENTRY_TLS", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DIRECTORY_ENTRY_IAT", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT", " 13", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DIRECTORY_ENTRY_EXCEPTION", " 3", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DIRECTORY_ENTRY_BASERELOC", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DIRECTORY_ENTRY_GLOBALPTR", null, "ideal-int"));
		mapConst.get("debug/pe").add(
				new ConstGoLangApiSignature("debug/pe", "IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR", " 14", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DIRECTORY_ENTRY_SECURITY", " 4", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DIRECTORY_ENTRY_IMPORT", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DIRECTORY_ENTRY_DEBUG", null, "ideal-int"));
		mapConst.get("debug/pe").add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DIRECTORY_ENTRY_IAT", " 12", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DIRECTORY_ENTRY_GLOBALPTR", " 8", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DIRECTORY_ENTRY_IMPORT", " 1", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DIRECTORY_ENTRY_RESOURCE", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DIRECTORY_ENTRY_DEBUG", " 6", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DIRECTORY_ENTRY_RESOURCE", " 2", null));

		pkgs.add("runtime/trace, func WithRegion(context.Context, string");
		mapConst.putIfAbsent("runtime/trace, func WithRegion(context.Context, string",
				new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("runtime/trace, func WithRegion(context.Context, string",
				new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("runtime/trace, func WithRegion(context.Context, string",
				new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("runtime/trace, func WithRegion(context.Context, string",
				new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("runtime/trace, func WithRegion(context.Context, string",
				new HashSet<VarGoLangApiSignature>());

		mapFunc.get("runtime/trace, func WithRegion(context.Context, string")
				.add(new FuncGoLangApiSignature("runtime/trace", "WithRegion",
						new String[] { "context.Context", " string", " func(" }, new String[] { ")" }));

		pkgs.add("syscall (netbsd-arm)");
		mapConst.putIfAbsent("syscall (netbsd-arm)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (netbsd-arm)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (netbsd-arm)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (netbsd-arm)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (netbsd-arm)", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("syscall (netbsd-arm)").add(new FuncGoLangApiSignature("syscall (netbsd-arm)", "Pipe2",
				new String[] { "[]int", " int" }, new String[] { "error" }));
		mapFunc.get("syscall (netbsd-arm)").add(new FuncGoLangApiSignature("syscall (netbsd-arm)", "Accept4",
				new String[] { "int", " int" }, new String[] { "int", " Sockaddr", " error" }));

		pkgs.add("net");
		mapConst.putIfAbsent("net", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net", new HashSet<VarGoLangApiSignature>());

		mapType.get("net").add(new TypeGoLangApiSignature("net", "ListenConfig struct"));
		mapMethod.get("net").add(new MethodGoLangApiSignature("net", "*ListenConfig", "ListenPacket",
				new String[] { "context.Context", " string", " string" }, new String[] { "PacketConn", " error" }));
		mapMethod.get("net").add(new MethodGoLangApiSignature("net", "*ListenConfig", "Listen",
				new String[] { "context.Context", " string", " string" }, new String[] { "Listener", " error" }));
		mapType.get("net").add(new TypeGoLangApiSignature("net",
				"ListenConfig struct, Control func(string, string, syscall.RawConn) error"));
		mapType.get("net").add(new TypeGoLangApiSignature("net",
				"Dialer struct, Control func(string, string, syscall.RawConn) error"));

		pkgs.add("net/http/httptrace");
		mapConst.putIfAbsent("net/http/httptrace", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net/http/httptrace", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net/http/httptrace", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net/http/httptrace", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net/http/httptrace", new HashSet<VarGoLangApiSignature>());

		mapType.get("net/http/httptrace").add(new TypeGoLangApiSignature("net/http/httptrace",
				"ClientTrace struct, Got1xxResponse func(int, textproto.MIMEHeader) error"));
		mapType.get("net/http/httptrace").add(new TypeGoLangApiSignature("net/http/httptrace",
				"ClientTrace struct, WroteHeaderField func(string, []string)"));

		pkgs.add("crypto/rsa");
		mapConst.putIfAbsent("crypto/rsa", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("crypto/rsa", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("crypto/rsa", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("crypto/rsa", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("crypto/rsa", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("crypto/rsa").add(new MethodGoLangApiSignature("crypto/rsa", "*PrivateKey", "Size",
				new String[] { "" }, new String[] { "int" }));
		mapMethod.get("crypto/rsa").add(new MethodGoLangApiSignature("crypto/rsa", "*PublicKey", "Size",
				new String[] { "" }, new String[] { "int" }));

		pkgs.add("syscall (windows-386)");
		mapConst.putIfAbsent("syscall (windows-386)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (windows-386)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (windows-386)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (windows-386)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (windows-386)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (windows-386)").add(new TypeGoLangApiSignature("syscall (windows-386)",
				"CertChainPolicyPara struct, ExtraPolicyPara Pointer"));
		mapType.get("syscall (windows-386)")
				.add(new TypeGoLangApiSignature("syscall (windows-386)", "CertInfo struct"));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "TOKEN_ADJUST_SESSIONID", " 256", null));
		mapType.get("syscall (windows-386)")
				.add(new TypeGoLangApiSignature("syscall (windows-386)", "AddrinfoW struct, Addr Pointer"));
		mapType.get("syscall (windows-386)")
				.add(new TypeGoLangApiSignature("syscall (windows-386)", "CertContext struct, CertInfo *CertInfo"));
		mapType.get("syscall (windows-386)").add(new TypeGoLangApiSignature("syscall (windows-386)",
				"CertRevocationInfo struct, CrlInfo *CertRevocationCrlInfo"));
		mapType.get("syscall (windows-386)")
				.add(new TypeGoLangApiSignature("syscall (windows-386)", "Pointer *struct"));
		mapType.get("syscall (windows-386)")
				.add(new TypeGoLangApiSignature("syscall (windows-386)", "CertRevocationCrlInfo struct"));
		mapType.get("syscall (windows-386)").add(new TypeGoLangApiSignature("syscall (windows-386)",
				"CertRevocationInfo struct, OidSpecificInfo Pointer"));
		mapType.get("syscall (windows-386)")
				.add(new TypeGoLangApiSignature("syscall (windows-386)", "CertTrustListInfo struct"));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "TOKEN_ADJUST_SESSIONID", null, "ideal-int"));
		mapType.get("syscall (windows-386)").add(new TypeGoLangApiSignature("syscall (windows-386)",
				"CertSimpleChain struct, TrustListInfo *CertTrustListInfo"));
		mapType.get("syscall (windows-386)").add(new TypeGoLangApiSignature("syscall (windows-386)",
				"CertChainPolicyStatus struct, ExtraPolicyStatus Pointer"));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "TOKEN_ALL_ACCESS", " 983551", null));

		pkgs.add("os");
		mapConst.putIfAbsent("os", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("os", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("os", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("os", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("os", new HashSet<VarGoLangApiSignature>());

		mapConst.get("os").add(new ConstGoLangApiSignature("os", "ModeIrregular", null, "FileMode"));
		mapConst.get("os").add(new ConstGoLangApiSignature("os", "ModeIrregular", " 524288", null));
		mapConst.get("os").add(new ConstGoLangApiSignature("os", "ModeType", " 2399666176", null));
		mapFunc.get("os").add(new FuncGoLangApiSignature("os", "UserCacheDir", new String[] { "" },
				new String[] { "string", " error" }));

		pkgs.add("go/token");
		mapConst.putIfAbsent("go/token", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("go/token", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("go/token", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("go/token", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("go/token", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("go/token").add(new MethodGoLangApiSignature("go/token", "*File", "AddLineColumnInfo",
				new String[] { "int", " string", " int", " int" }, new String[] { "" }));

		pkgs.add("net/http/httputil");
		mapConst.putIfAbsent("net/http/httputil", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net/http/httputil", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net/http/httputil", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net/http/httputil", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net/http/httputil", new HashSet<VarGoLangApiSignature>());

		mapType.get("net/http/httputil").add(new TypeGoLangApiSignature("net/http/httputil",
				"ReverseProxy struct, ErrorHandler func(http.ResponseWriter, *http.Request, error)"));

		pkgs.add("runtime/trace");
		mapConst.putIfAbsent("runtime/trace", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("runtime/trace", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("runtime/trace", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("runtime/trace", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("runtime/trace", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("runtime/trace").add(new FuncGoLangApiSignature("runtime/trace", "StartRegion",
				new String[] { "context.Context", " string" }, new String[] { "*Region" }));
		mapFunc.get("runtime/trace").add(new FuncGoLangApiSignature("runtime/trace", "Logf",
				new String[] { "context.Context", " string", " string", " ...interface{}" }, new String[] { "" }));
		mapMethod.get("runtime/trace").add(new MethodGoLangApiSignature("runtime/trace", "*Task", "End",
				new String[] { "" }, new String[] { "" }));
		mapType.get("runtime/trace").add(new TypeGoLangApiSignature("runtime/trace", "Task struct"));
		mapType.get("runtime/trace").add(new TypeGoLangApiSignature("runtime/trace", "Region struct"));
		mapMethod.get("runtime/trace").add(new MethodGoLangApiSignature("runtime/trace", "*Region", "End",
				new String[] { "" }, new String[] { "" }));
		mapFunc.get("runtime/trace").add(new FuncGoLangApiSignature("runtime/trace", "Log",
				new String[] { "context.Context", " string", " string" }, new String[] { "" }));
		mapFunc.get("runtime/trace").add(new FuncGoLangApiSignature("runtime/trace", "NewTask",
				new String[] { "context.Context", " string" }, new String[] { "context.Context", " *Task" }));
		mapFunc.get("runtime/trace").add(
				new FuncGoLangApiSignature("runtime/trace", "IsEnabled", new String[] { "" }, new String[] { "bool" }));

		pkgs.add("syscall (openbsd-amd64-cgo)");
		mapConst.putIfAbsent("syscall (openbsd-amd64-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (openbsd-amd64-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (openbsd-amd64-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (openbsd-amd64-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (openbsd-amd64-cgo)", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("syscall (openbsd-amd64-cgo)").add(new FuncGoLangApiSignature("syscall (openbsd-amd64-cgo)",
				"Pipe2", new String[] { "[]int", " int" }, new String[] { "error" }));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SYS_ACCEPT4", " 93", null));
		mapFunc.get("syscall (openbsd-amd64-cgo)").add(new FuncGoLangApiSignature("syscall (openbsd-amd64-cgo)",
				"Accept4", new String[] { "int", " int" }, new String[] { "int", " Sockaddr", " error" }));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SYS_ACCEPT4", null, "ideal-int"));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SYS_PIPE2", null, "ideal-int"));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SYS_PIPE2", " 101", null));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SOCK_CLOEXEC", " 32768", null));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SOCK_NONBLOCK", null, "ideal-int"));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SOCK_CLOEXEC", null, "ideal-int"));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SOCK_NONBLOCK", " 16384", null));

		pkgs.add("syscall (openbsd-386-cgo)");
		mapConst.putIfAbsent("syscall (openbsd-386-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (openbsd-386-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (openbsd-386-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (openbsd-386-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (openbsd-386-cgo)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SOCK_NONBLOCK", null, "ideal-int"));
		mapFunc.get("syscall (openbsd-386-cgo)").add(new FuncGoLangApiSignature("syscall (openbsd-386-cgo)", "Pipe2",
				new String[] { "[]int", " int" }, new String[] { "error" }));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SOCK_CLOEXEC", " 32768", null));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SOCK_NONBLOCK", " 16384", null));
		mapFunc.get("syscall (openbsd-386-cgo)").add(new FuncGoLangApiSignature("syscall (openbsd-386-cgo)", "Accept4",
				new String[] { "int", " int" }, new String[] { "int", " Sockaddr", " error" }));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SYS_PIPE2", " 101", null));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SOCK_CLOEXEC", null, "ideal-int"));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SYS_ACCEPT4", " 93", null));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SYS_ACCEPT4", null, "ideal-int"));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "SYS_PIPE2", null, "ideal-int"));

		pkgs.add("go/types");
		mapConst.putIfAbsent("go/types", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("go/types", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("go/types", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("go/types", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("go/types", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "NewInterfaceType",
				new String[] { "[]*Func", " []Type" }, new String[] { "*Interface" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Var", "Embedded", new String[] { "" },
				new String[] { "bool" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Interface", "EmbeddedType",
				new String[] { "int" }, new String[] { "Type" }));

		pkgs.add("syscall (netbsd-386)");
		mapConst.putIfAbsent("syscall (netbsd-386)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (netbsd-386)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (netbsd-386)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (netbsd-386)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (netbsd-386)", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("syscall (netbsd-386)").add(new FuncGoLangApiSignature("syscall (netbsd-386)", "Pipe2",
				new String[] { "[]int", " int" }, new String[] { "error" }));
		mapFunc.get("syscall (netbsd-386)").add(new FuncGoLangApiSignature("syscall (netbsd-386)", "Accept4",
				new String[] { "int", " int" }, new String[] { "int", " Sockaddr", " error" }));

		pkgs.add("net/http");
		mapConst.putIfAbsent("net/http", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net/http", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net/http", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net/http", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net/http", new HashSet<VarGoLangApiSignature>());

		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "SameSiteLaxMode", null, "SameSite"));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "SameSiteDefaultMode", " 1", null));
		mapType.get("net/http").add(new TypeGoLangApiSignature("net/http", "Cookie struct, SameSite SameSite"));
		mapType.get("net/http").add(new TypeGoLangApiSignature("net/http", "Transport struct, MaxConnsPerHost int"));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "SameSiteDefaultMode", null, "SameSite"));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "SameSiteStrictMode", " 3", null));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "SameSiteStrictMode", null, "SameSite"));
		mapType.get("net/http").add(new TypeGoLangApiSignature("net/http", "SameSite int"));
		mapConst.get("net/http")
				.add(new ConstGoLangApiSignature("net/http", "StatusMisdirectedRequest", null, "ideal-int"));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "SameSiteLaxMode", " 2", null));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "StatusMisdirectedRequest", " 421", null));

		pkgs.add("go/ast");
		mapConst.putIfAbsent("go/ast", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("go/ast", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("go/ast", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("go/ast", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("go/ast", new HashSet<VarGoLangApiSignature>());

		mapType.get("go/ast").add(new TypeGoLangApiSignature("go/ast", "CompositeLit struct, Incomplete bool"));

		pkgs.add("syscall (openbsd-amd64)");
		mapConst.putIfAbsent("syscall (openbsd-amd64)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (openbsd-amd64)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (openbsd-amd64)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (openbsd-amd64)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (openbsd-amd64)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SYS_PIPE2", " 101", null));
		mapFunc.get("syscall (openbsd-amd64)").add(new FuncGoLangApiSignature("syscall (openbsd-amd64)", "Pipe2",
				new String[] { "[]int", " int" }, new String[] { "error" }));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SYS_ACCEPT4", null, "ideal-int"));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SYS_PIPE2", null, "ideal-int"));
		mapFunc.get("syscall (openbsd-amd64)").add(new FuncGoLangApiSignature("syscall (openbsd-amd64)", "Accept4",
				new String[] { "int", " int" }, new String[] { "int", " Sockaddr", " error" }));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SOCK_NONBLOCK", null, "ideal-int"));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SOCK_CLOEXEC", " 32768", null));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SOCK_NONBLOCK", " 16384", null));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SOCK_CLOEXEC", null, "ideal-int"));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "SYS_ACCEPT4", " 93", null));

		pkgs.add("database/sql");
		mapConst.putIfAbsent("database/sql", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("database/sql", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("database/sql", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("database/sql", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("database/sql", new HashSet<VarGoLangApiSignature>());

		mapType.get("database/sql")
				.add(new TypeGoLangApiSignature("database/sql", "DBStats struct, WaitDuration time.Duration"));
		mapMethod.get("database/sql").add(new MethodGoLangApiSignature("database/sql", "IsolationLevel", "String",
				new String[] { "" }, new String[] { "string" }));
		mapType.get("database/sql").add(new TypeGoLangApiSignature("database/sql", "DBStats struct, WaitCount int64"));
		mapType.get("database/sql").add(new TypeGoLangApiSignature("database/sql", "DBStats struct, InUse int"));
		mapType.get("database/sql")
				.add(new TypeGoLangApiSignature("database/sql", "DBStats struct, MaxIdleClosed int64"));
		mapType.get("database/sql").add(new TypeGoLangApiSignature("database/sql", "DBStats struct, Idle int"));
		mapType.get("database/sql")
				.add(new TypeGoLangApiSignature("database/sql", "DBStats struct, MaxLifetimeClosed int64"));
		mapType.get("database/sql")
				.add(new TypeGoLangApiSignature("database/sql", "DBStats struct, MaxOpenConnections int"));

		pkgs.add("syscall (openbsd-386)");
		mapConst.putIfAbsent("syscall (openbsd-386)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (openbsd-386)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (openbsd-386)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (openbsd-386)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (openbsd-386)", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("syscall (openbsd-386)").add(new FuncGoLangApiSignature("syscall (openbsd-386)", "Pipe2",
				new String[] { "[]int", " int" }, new String[] { "error" }));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SOCK_NONBLOCK", " 16384", null));
		mapFunc.get("syscall (openbsd-386)").add(new FuncGoLangApiSignature("syscall (openbsd-386)", "Accept4",
				new String[] { "int", " int" }, new String[] { "int", " Sockaddr", " error" }));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SOCK_NONBLOCK", null, "ideal-int"));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SYS_ACCEPT4", null, "ideal-int"));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SYS_PIPE2", null, "ideal-int"));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SYS_PIPE2", " 101", null));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SOCK_CLOEXEC", " 32768", null));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SOCK_CLOEXEC", null, "ideal-int"));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "SYS_ACCEPT4", " 93", null));

		pkgs.add("syscall (netbsd-arm-cgo)");
		mapConst.putIfAbsent("syscall (netbsd-arm-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (netbsd-arm-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (netbsd-arm-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (netbsd-arm-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (netbsd-arm-cgo)", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("syscall (netbsd-arm-cgo)").add(new FuncGoLangApiSignature("syscall (netbsd-arm-cgo)", "Pipe2",
				new String[] { "[]int", " int" }, new String[] { "error" }));
		mapFunc.get("syscall (netbsd-arm-cgo)").add(new FuncGoLangApiSignature("syscall (netbsd-arm-cgo)", "Accept4",
				new String[] { "int", " int" }, new String[] { "int", " Sockaddr", " error" }));

		pkgs.add("debug/macho");
		mapConst.putIfAbsent("debug/macho", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("debug/macho", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("debug/macho", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("debug/macho", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("debug/macho", new HashSet<VarGoLangApiSignature>());

		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "CpuArm64", " 16777228", null));
		mapConst.get("debug/macho").add(new ConstGoLangApiSignature("debug/macho", "CpuArm64", null, "Cpu"));

		pkgs.add("syscall (netbsd-386-cgo)");
		mapConst.putIfAbsent("syscall (netbsd-386-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (netbsd-386-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (netbsd-386-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (netbsd-386-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (netbsd-386-cgo)", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("syscall (netbsd-386-cgo)").add(new FuncGoLangApiSignature("syscall (netbsd-386-cgo)", "Pipe2",
				new String[] { "[]int", " int" }, new String[] { "error" }));
		mapFunc.get("syscall (netbsd-386-cgo)").add(new FuncGoLangApiSignature("syscall (netbsd-386-cgo)", "Accept4",
				new String[] { "int", " int" }, new String[] { "int", " Sockaddr", " error" }));

		pkgs.add("text/template/parse");
		mapConst.putIfAbsent("text/template/parse", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("text/template/parse", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("text/template/parse", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("text/template/parse", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("text/template/parse", new HashSet<VarGoLangApiSignature>());

		mapType.get("text/template/parse")
				.add(new TypeGoLangApiSignature("text/template/parse", "PipeNode struct, IsAssign bool"));

		pkgs.add("debug/elf");
		mapConst.putIfAbsent("debug/elf", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("debug/elf", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("debug/elf", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("debug/elf", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("debug/elf", new HashSet<VarGoLangApiSignature>());

		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_ADD8", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_MSP430", " 105", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_JAVELIN", " 77", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_MCST_ELBRUS", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_R32C", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_ALTERA_NIOS2", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_C166", " 116", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_RELATIVE", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_XTENSA", " 94", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_CYPRESS_M8C", " 161", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_INTEL205", " 205", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_VISIUM", " 221", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_ARCA", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_VIDEOCORE3", " 137", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_COGE", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_QDSP6", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_ADD16", null, "R_RISCV"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_TPREL_LO12_I", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_RX", " 173", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_SE_C17", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_Z80", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_PJ", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_OPEN8", " 196", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_EXCESS", " 111", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_FR30", " 84", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_NONE", " 0", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_TI_PRU", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_SHARC", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_BA2", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_ADD32", " 35", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_68HC08", " 71", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_TLS_DTPMOD64", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_F2MC16", " 104", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_LO12_I", " 27", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_SET8", " 54", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_KMX32", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_SVX", " 73", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_IP2K", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_TLS_DTPMOD64", " 7", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_ARC_COMPACT2", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_KVARC", " 214", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_GOT_HI20", " 20", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_CRIS", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_INTEL206", " 206", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_ECOG16", " 176", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_DSPIC30F", " 118", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_KMX8", " 213", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_CSR_KALIMBA", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_TLS_GD_HI20", " 22", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_GPREL_I", " 47", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_ARC_COMPACT", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_78KOR", " 199", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_DXP", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_COPY", " 4", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_BA1", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_MOXIE", " 223", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_BRANCH", null, "R_RISCV"));
		mapMethod.get("debug/elf").add(new MethodGoLangApiSignature("debug/elf", "R_RISCV", "String",
				new String[] { "" }, new String[] { "string" }));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_TILE64", " 187", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_PCREL_LO12_S", " 25", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_TPREL_LO12_S", " 31", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_TI_C6000", " 140", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_ST7", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_CE", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_AVR", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_SUB8", " 37", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_TMM_GPP", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_GNU_VTENTRY", " 42", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_RISCV", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_METAG", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_SET16", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_NONE", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_ST200", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_DSP24", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_CRX", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_ECOG1X", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_CR16", " 177", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_UNICORE", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_OPENRISC", " 92", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_TI_ARP32", " 143", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_SUB64", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_SUB16", " 38", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_CRAYNV2", " 172", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_STM8", " 186", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_FX66", " 66", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_SE_C33", " 107", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_68HC11", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_COREA_2ND", " 194", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_ECOG2", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_BPF", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_RVC_BRANCH", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_RS08", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_RVC_JUMP", " 45", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_L10M", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "ELFOSABI_AROS", " 15", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_ARC_COMPACT2", " 195", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_AVR32", " 185", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_TLS_DTPMOD32", " 6", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_68HC16", " 69", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_COPY", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "ELFOSABI_CLOUDABI", null, "OSABI"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_TPREL_HI20", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_68HC05", " 72", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_TLS_TPREL32", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "ELFOSABI_CLOUDABI", " 17", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_PCREL_LO12_I", " 24", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_SLE9X", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_SNP1K", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_TPREL_S", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_HUANY", null, "Machine"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_GNU_VTINHERIT", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_ECOG2", " 134", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_ECOG1", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_ECOG16", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_TPC", " 98", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_MAXQ30", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_ALIGN", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_D30V", " 86", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_TLS_TPREL64", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_OPEN8", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_D10V", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_TI_C5500", " 142", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_JUMP_SLOT", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_FR30", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_TRIMEDIA", " 163", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_SVX", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_HI20", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_TPREL_HI20", " 29", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_ARC_COMPACT", " 93", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_LO12_S", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_ETPU", " 178", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_MCST_ELBRUS", " 175", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_FT32", " 222", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_PDSP", " 63", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_NORC", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_LATTICEMICO32", " 138", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_SUB16", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_FT32", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_MN10300", " 89", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_XTENSA", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_TILE64", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_VAX", " 75", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_BLACKFIN", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_RVC_LUI", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_M32R", " 88", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_BLACKFIN", " 106", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_MN10200", " 90", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_NORC", " 218", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_DSP24", " 136", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_ST7", " 68", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_TPREL_ADD", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_PDP10", " 64", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_CYPRESS_M8C", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_LATTICEMICO32", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_RVC_JUMP", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_KMX32", " 211", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_8051", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_TILEPRO", " 188", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_MANIK", " 171", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_ECOG1", " 168", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_STXP7X", " 166", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_UNICORE", " 110", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_RL78", " 197", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_TPREL_S", " 50", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_CALL_PLT", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_SUB6", " 52", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_MICROBLAZE", " 189", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_SET32", " 56", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_MOXIE", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_RELAX", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_DSPIC30F", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_COREA_1ST", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_PDP11", " 65", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_FIREPATH", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_VIDEOCORE", " 95", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_LANAI", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_VIDEOCORE5", " 198", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_NS32K", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_ECOG1X", " 168", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_PCREL_HI20", " 23", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_SCORE7", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_TI_ARP32", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_RVC_BRANCH", " 44", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_ST9PLUS", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_JAVELIN", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_TI_C2000", " 141", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "ELFOSABI_FENIXOS", null, "OSABI"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_CRAYNV2", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_ADD16", " 34", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_M16C", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_PRISM", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_78KOR", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_CUDA", " 190", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_K10M", " 181", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_AMDGPU", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_TI_C5500", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_CR16", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_KMX8", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_BA1", " 201", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_KMX16", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_68HC16", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_C166", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_CLOUDSHIELD", " 192", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_TPREL_LO12_I", " 30", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_TILEGX", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_32", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_METAG", " 174", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_TLS_DTPREL64", " 9", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_TLS_GD_HI20", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_Z80", " 220", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_EXCESS", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_MMDSP_PLUS", " 160", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_STXP7X", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_KVARC", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_BRANCH", " 16", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_AMDGPU", " 224", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_SCORE7", " 135", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_COREA_2ND", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_V850", " 87", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_CSR_KALIMBA", " 219", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_GNU_VTENTRY", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_INTEL206", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_PCREL_HI20", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_MCHP_PIC", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_SET8", null, "R_RISCV"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_TLS_DTPREL64", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_8051", " 165", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_ALTERA_NIOS2", " 113", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_JAL", " 17", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_ADD8", " 33", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_ARCA", " 109", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_D10V", " 85", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_AVR32", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_68HC11", " 70", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_F2MC16", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_D30V", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_TI_C6000", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_BA2", " 202", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_MAXQ30", " 169", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_SUB64", " 40", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_LANAI", " 244", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_COGE", " 216", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_GPREL_I", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_ST9PLUS", " 67", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_SNP1K", " 99", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_SE_C17", " 139", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_64", " 2", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_ST19", " 74", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_MMIX", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_MSP430", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_SUB8", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_TLS_TPREL32", " 10", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_SE_C33", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_68HC05", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_SHARC", " 133", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_INTEL205", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_NDS32", " 167", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_ADD64", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_M16C", " 117", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_MN10200", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_CALL", null, "R_RISCV"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_PCREL_LO12_S", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_K10M", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_RISCV", " 243", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_XCORE", " 203", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_TLS_DTPREL32", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_CE", " 119", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_MMIX", " 80", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_TLS_GOT_HI20", " 21", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_TPREL_I", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "ELFOSABI_AROS", null, "OSABI"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_XIMO16", " 170", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_SET6", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_TI_C2000", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_GNU_VTINHERIT", " 41", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_CRX", " 114", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_ETPU", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_TPREL_ADD", " 32", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_RELAX", " 51", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_QDSP6", " 164", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_PDP10", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_SLE9X", " 179", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_RL78", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_32", " 1", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_ST19", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_SEP", " 108", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_CRIS", " 76", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_LO12_S", " 28", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_ALIGN", " 43", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_GPREL_S", " 48", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_LO12_I", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_ADD32", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_VIDEOCORE3", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_OPENRISC", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_GOT_HI20", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_64", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_SET32", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_SUB32", " 39", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_ZSP", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_TLS_DTPREL32", " 8", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_DXP", " 112", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_SUB6", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_VISIUM", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_TSK3000", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_HI20", " 26", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_INTEL209", " 209", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_PCREL_LO12_I", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_RVC_LUI", " 46", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_SET16", " 55", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_TMM_GPP", " 96", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_XGATE", " 115", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_COOL", " 217", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_CLOUDSHIELD", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_JUMP_SLOT", " 5", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_SEP", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_68HC08", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_XCORE", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_CDP", " 215", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_TLS_TPREL64", " 11", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_CR", " 103", null));
		mapType.get("debug/elf").add(new TypeGoLangApiSignature("debug/elf", "R_RISCV int"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_COREA_1ST", " 193", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_PRISM", " 82", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_L10M", " 180", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_CR", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_ST200", " 100", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_VIDEOCORE5", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_NDS32", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_FIREPATH", " 78", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_TLS_DTPMOD32", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_COOL", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_ADD64", " 36", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_CUDA", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_INTEL209", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_MICROBLAZE", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_XGATE", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_ZSP", " 79", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_CALL_PLT", " 19", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_CDP", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_BPF", " 247", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_PDP11", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_RX", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_TILEGX", " 191", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_MANIK", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_MMDSP_PLUS", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_VIDEOCORE", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_KM32", " 210", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_TI_PRU", " 144", null));
	}

	private void build1() {
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "ELFOSABI_FENIXOS", " 16", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_NS32K", " 97", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_RS08", " 132", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_INTEL207", " 207", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_TILEPRO", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_CALL", " 18", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_TSK3000", " 131", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_PJ", " 91", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_R32C", " 162", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_TLS_GOT_HI20", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_MAX", " 102", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_GPREL_S", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_STM8", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_M32C", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_INTEL208", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_TPC", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_V850", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_TRIMEDIA", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_RELATIVE", " 3", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_FX66", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_M32C", " 120", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_TPREL_LO12_S", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_HUANY", " 81", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_PDSP", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_KMX16", " 212", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_MAX", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_KM32", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_INTEL208", " 208", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_AVR", " 83", null));
		mapMethod.get("debug/elf").add(new MethodGoLangApiSignature("debug/elf", "R_RISCV", "GoString",
				new String[] { "" }, new String[] { "string" }));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_VAX", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_56800EX", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_MCHP_PIC", " 204", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_XIMO16", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_JAL", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_SET6", " 53", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_TPREL_I", " 49", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_SUB32", null, "R_RISCV"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_IP2K", " 101", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_MN10300", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_INTEL207", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_M32R", null, "Machine"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_56800EX", " 200", null));

		pkgs.add("os/signal");
		mapConst.putIfAbsent("os/signal", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("os/signal", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("os/signal", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("os/signal", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("os/signal", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("os/signal").add(new FuncGoLangApiSignature("os/signal", "Ignored", new String[] { "os.Signal" },
				new String[] { "bool" }));

		pkgs.add("syscall (windows-amd64)");
		mapConst.putIfAbsent("syscall (windows-amd64)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (windows-amd64)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (windows-amd64)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (windows-amd64)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (windows-amd64)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (windows-amd64)")
				.add(new TypeGoLangApiSignature("syscall (windows-amd64)", "AddrinfoW struct, Addr Pointer"));
		mapType.get("syscall (windows-amd64)")
				.add(new TypeGoLangApiSignature("syscall (windows-amd64)", "CertTrustListInfo struct"));
		mapType.get("syscall (windows-amd64)")
				.add(new TypeGoLangApiSignature("syscall (windows-amd64)", "CertInfo struct"));
		mapType.get("syscall (windows-amd64)").add(new TypeGoLangApiSignature("syscall (windows-amd64)",
				"CertRevocationInfo struct, OidSpecificInfo Pointer"));
		mapType.get("syscall (windows-amd64)")
				.add(new TypeGoLangApiSignature("syscall (windows-amd64)", "Pointer *struct"));
		mapType.get("syscall (windows-amd64)").add(new TypeGoLangApiSignature("syscall (windows-amd64)",
				"CertRevocationInfo struct, CrlInfo *CertRevocationCrlInfo"));
		mapType.get("syscall (windows-amd64)")
				.add(new TypeGoLangApiSignature("syscall (windows-amd64)", "CertRevocationCrlInfo struct"));
		mapType.get("syscall (windows-amd64)").add(new TypeGoLangApiSignature("syscall (windows-amd64)",
				"CertSimpleChain struct, TrustListInfo *CertTrustListInfo"));
		mapType.get("syscall (windows-amd64)").add(new TypeGoLangApiSignature("syscall (windows-amd64)",
				"CertChainPolicyStatus struct, ExtraPolicyStatus Pointer"));
		mapType.get("syscall (windows-amd64)").add(new TypeGoLangApiSignature("syscall (windows-amd64)",
				"CertChainPolicyPara struct, ExtraPolicyPara Pointer"));
		mapConst.get("syscall (windows-amd64)").add(
				new ConstGoLangApiSignature("syscall (windows-amd64)", "TOKEN_ADJUST_SESSIONID", null, "ideal-int"));
		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "TOKEN_ADJUST_SESSIONID", " 256", null));
		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "TOKEN_ALL_ACCESS", " 983551", null));
		mapType.get("syscall (windows-amd64)")
				.add(new TypeGoLangApiSignature("syscall (windows-amd64)", "CertContext struct, CertInfo *CertInfo"));

	}

}