package it.unive.golisa.golang.util;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import it.unive.golisa.golang.api.signature.ConstGoLangApiSignature;
import it.unive.golisa.golang.api.signature.FuncGoLangApiSignature;
import it.unive.golisa.golang.api.signature.MethodGoLangApiSignature;
import it.unive.golisa.golang.api.signature.TypeGoLangApiSignature;
import it.unive.golisa.golang.api.signature.VarGoLangApiSignature;

/**
 * Auto-generated by GoLiSA build
 */
public class Go1_12 {
	private final Map<String, Set<ConstGoLangApiSignature>> mapConst;
	private final Map<String, Set<FuncGoLangApiSignature>> mapFunc;
	private final Map<String, Set<MethodGoLangApiSignature>> mapMethod;
	private final Map<String, Set<TypeGoLangApiSignature>> mapType;
	private final Map<String, Set<VarGoLangApiSignature>> mapVar;
	private final Set<String> pkgs;

	public Go1_12() {
		pkgs = new HashSet<>();
		mapConst = new HashMap<String, Set<ConstGoLangApiSignature>>();
		mapFunc = new HashMap<String, Set<FuncGoLangApiSignature>>();
		mapMethod = new HashMap<String, Set<MethodGoLangApiSignature>>();
		mapType = new HashMap<String, Set<TypeGoLangApiSignature>>();
		mapVar = new HashMap<String, Set<VarGoLangApiSignature>>();

		build();
	}

	public Set<String> getPackages() {
		return pkgs;
	}

	public Map<String, Set<ConstGoLangApiSignature>> getMapConst() {
		return mapConst;
	}

	public Map<String, Set<FuncGoLangApiSignature>> getMapFunc() {
		return mapFunc;
	}

	public Map<String, Set<MethodGoLangApiSignature>> getMapMethod() {
		return mapMethod;
	}

	public Map<String, Set<TypeGoLangApiSignature>> getMapType() {
		return mapType;
	}

	public Map<String, Set<VarGoLangApiSignature>> getMapVar() {
		return mapVar;
	}

	private void build() {
		build0();
	}

	private void build0() {
		pkgs.add("crypto/tls");
		mapConst.putIfAbsent("crypto/tls", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("crypto/tls", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("crypto/tls", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("crypto/tls", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("crypto/tls", new HashSet<VarGoLangApiSignature>());

		mapConst.get("crypto/tls").add(new ConstGoLangApiSignature("crypto/tls", "VersionTLS13", null, "ideal-int"));
		mapConst.get("crypto/tls")
				.add(new ConstGoLangApiSignature("crypto/tls", "TLS_AES_128_GCM_SHA256", " 4865", null));
		mapConst.get("crypto/tls")
				.add(new ConstGoLangApiSignature("crypto/tls", "TLS_AES_256_GCM_SHA384", null, "uint16"));
		mapConst.get("crypto/tls").add(new ConstGoLangApiSignature("crypto/tls", "VersionTLS13", " 772", null));
		mapConst.get("crypto/tls")
				.add(new ConstGoLangApiSignature("crypto/tls", "TLS_CHACHA20_POLY1305_SHA256", null, "uint16"));
		mapConst.get("crypto/tls")
				.add(new ConstGoLangApiSignature("crypto/tls", "TLS_AES_256_GCM_SHA384", " 4866", null));
		mapConst.get("crypto/tls")
				.add(new ConstGoLangApiSignature("crypto/tls", "TLS_CHACHA20_POLY1305_SHA256", " 4867", null));
		mapConst.get("crypto/tls")
				.add(new ConstGoLangApiSignature("crypto/tls", "TLS_AES_128_GCM_SHA256", null, "uint16"));
		mapType.get("crypto/tls")
				.add(new TypeGoLangApiSignature("crypto/tls", "RecordHeaderError struct, Conn net.Conn"));

		pkgs.add("syscall");
		mapConst.putIfAbsent("syscall", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall").add(new TypeGoLangApiSignature("syscall", "RawSockaddrUnix struct"));

		pkgs.add("expvar");
		mapConst.putIfAbsent("expvar", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("expvar", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("expvar", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("expvar", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("expvar", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("expvar").add(new MethodGoLangApiSignature("expvar", "*Map", "Delete", new String[] { "string" },
				new String[] { "" }));

		pkgs.add("log");
		mapConst.putIfAbsent("log", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("log", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("log", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("log", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("log", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("log").add(new MethodGoLangApiSignature("log", "*Logger", "Writer", new String[] { "" },
				new String[] { "io.Writer" }));

		pkgs.add("syscall (freebsd-arm-cgo)");
		mapConst.putIfAbsent("syscall (freebsd-arm-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (freebsd-arm-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (freebsd-arm-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (freebsd-arm-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (freebsd-arm-cgo)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (freebsd-arm-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm-cgo)", "S_IRWXO", null, "ideal-int"));
		mapType.get("syscall (freebsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm-cgo)", "Stat_t struct, Ino uint64"));
		mapFunc.get("syscall (freebsd-arm-cgo)").add(new FuncGoLangApiSignature("syscall (freebsd-arm-cgo)", "Fstatat",
				new String[] { "int", " string", " *Stat_t", " int" }, new String[] { "error" }));
		mapType.get("syscall (freebsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm-cgo)", "Stat_t struct, Dev uint64"));
		mapType.get("syscall (freebsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm-cgo)", "Stat_t struct, Gen uint64"));
		mapConst.get("syscall (freebsd-arm-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm-cgo)", "S_IRWXG", null, "ideal-int"));
		mapType.get("syscall (freebsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm-cgo)", "Stat_t struct, Blksize int32"));
		mapType.get("syscall (freebsd-arm-cgo)").add(
				new TypeGoLangApiSignature("syscall (freebsd-arm-cgo)", "Statfs_t struct, Mntfromname [1024]int8"));
		mapType.get("syscall (freebsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm-cgo)", "Stat_t struct, Padding0 int16"));
		mapType.get("syscall (freebsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm-cgo)", "Dirent struct, Off int64"));
		mapType.get("syscall (freebsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm-cgo)", "Stat_t struct, Padding1 int32"));
		mapType.get("syscall (freebsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm-cgo)", "Dirent struct, Namlen uint16"));
		mapType.get("syscall (freebsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm-cgo)", "Dirent struct, Fileno uint64"));
		mapType.get("syscall (freebsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm-cgo)", "Stat_t struct, Nlink uint64"));
		mapType.get("syscall (freebsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm-cgo)", "Stat_t struct, Spare [10]uint64"));
		mapType.get("syscall (freebsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm-cgo)", "Stat_t struct, Rdev uint64"));
		mapType.get("syscall (freebsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm-cgo)", "Dirent struct, Pad1 uint16"));
		mapType.get("syscall (freebsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm-cgo)", "Statfs_t struct, Mntonname [1024]int8"));
		mapFunc.get("syscall (freebsd-arm-cgo)").add(new FuncGoLangApiSignature("syscall (freebsd-arm-cgo)", "Mknod",
				new String[] { "string", " uint32", " uint64" }, new String[] { "error" }));
		mapType.get("syscall (freebsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm-cgo)", "Dirent struct, Pad0 uint8"));
		mapConst.get("syscall (freebsd-arm-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm-cgo)", "S_IRWXO", " 7", null));
		mapConst.get("syscall (freebsd-arm-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm-cgo)", "S_IRWXG", " 56", null));

		pkgs.add("syscall (freebsd-386-cgo)");
		mapConst.putIfAbsent("syscall (freebsd-386-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (freebsd-386-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (freebsd-386-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (freebsd-386-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (freebsd-386-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (freebsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386-cgo)", "Stat_t struct, Blksize int32"));
		mapType.get("syscall (freebsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386-cgo)", "Stat_t struct, Nlink uint64"));
		mapType.get("syscall (freebsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386-cgo)", "Dirent struct, Fileno uint64"));
		mapType.get("syscall (freebsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386-cgo)", "Stat_t struct, Gen uint64"));
		mapType.get("syscall (freebsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386-cgo)", "Stat_t struct, Btim_ext int32"));
		mapType.get("syscall (freebsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386-cgo)", "Stat_t struct, Ctim_ext int32"));
		mapType.get("syscall (freebsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386-cgo)", "Stat_t struct, Padding0 int16"));
		mapType.get("syscall (freebsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386-cgo)", "Stat_t struct, Atim_ext int32"));
		mapType.get("syscall (freebsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386-cgo)", "Stat_t struct, Dev uint64"));
		mapType.get("syscall (freebsd-386-cgo)").add(
				new TypeGoLangApiSignature("syscall (freebsd-386-cgo)", "Statfs_t struct, Mntfromname [1024]int8"));
		mapConst.get("syscall (freebsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-386-cgo)", "S_IRWXG", null, "ideal-int"));
		mapType.get("syscall (freebsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386-cgo)", "Dirent struct, Off int64"));
		mapType.get("syscall (freebsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386-cgo)", "Stat_t struct, Ino uint64"));
		mapConst.get("syscall (freebsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-386-cgo)", "S_IRWXG", " 56", null));
		mapFunc.get("syscall (freebsd-386-cgo)").add(new FuncGoLangApiSignature("syscall (freebsd-386-cgo)", "Fstatat",
				new String[] { "int", " string", " *Stat_t", " int" }, new String[] { "error" }));
		mapType.get("syscall (freebsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386-cgo)", "Dirent struct, Pad0 uint8"));
		mapType.get("syscall (freebsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386-cgo)", "Stat_t struct, Rdev uint64"));
		mapType.get("syscall (freebsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386-cgo)", "Statfs_t struct, Mntonname [1024]int8"));
		mapType.get("syscall (freebsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386-cgo)", "Dirent struct, Pad1 uint16"));
		mapType.get("syscall (freebsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386-cgo)", "Stat_t struct, Spare [10]uint64"));
		mapConst.get("syscall (freebsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-386-cgo)", "S_IRWXO", null, "ideal-int"));
		mapConst.get("syscall (freebsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-386-cgo)", "S_IRWXO", " 7", null));
		mapFunc.get("syscall (freebsd-386-cgo)").add(new FuncGoLangApiSignature("syscall (freebsd-386-cgo)", "Mknod",
				new String[] { "string", " uint32", " uint64" }, new String[] { "error" }));
		mapType.get("syscall (freebsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386-cgo)", "Stat_t struct, Mtim_ext int32"));
		mapType.get("syscall (freebsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386-cgo)", "Dirent struct, Namlen uint16"));
		mapType.get("syscall (freebsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386-cgo)", "Stat_t struct, Padding1 int32"));

		pkgs.add("syscall (freebsd-amd64-cgo)");
		mapConst.putIfAbsent("syscall (freebsd-amd64-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (freebsd-amd64-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (freebsd-amd64-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (freebsd-amd64-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (freebsd-amd64-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (freebsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64-cgo)", "Stat_t struct, Rdev uint64"));
		mapType.get("syscall (freebsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64-cgo)", "Stat_t struct, Gen uint64"));
		mapType.get("syscall (freebsd-amd64-cgo)").add(
				new TypeGoLangApiSignature("syscall (freebsd-amd64-cgo)", "Statfs_t struct, Mntonname [1024]int8"));
		mapFunc.get("syscall (freebsd-amd64-cgo)").add(new FuncGoLangApiSignature("syscall (freebsd-amd64-cgo)",
				"Fstatat", new String[] { "int", " string", " *Stat_t", " int" }, new String[] { "error" }));
		mapType.get("syscall (freebsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64-cgo)", "Stat_t struct, Nlink uint64"));
		mapType.get("syscall (freebsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64-cgo)", "Dirent struct, Fileno uint64"));
		mapType.get("syscall (freebsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64-cgo)", "Stat_t struct, Spare [10]uint64"));
		mapType.get("syscall (freebsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64-cgo)", "Dirent struct, Pad0 uint8"));
		mapConst.get("syscall (freebsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-amd64-cgo)", "S_IRWXG", null, "ideal-int"));
		mapType.get("syscall (freebsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64-cgo)", "Dirent struct, Pad1 uint16"));
		mapType.get("syscall (freebsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64-cgo)", "Dirent struct, Off int64"));
		mapConst.get("syscall (freebsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-amd64-cgo)", "S_IRWXO", null, "ideal-int"));
		mapType.get("syscall (freebsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64-cgo)", "Stat_t struct, Dev uint64"));
		mapType.get("syscall (freebsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64-cgo)", "Stat_t struct, Padding0 int16"));
		mapType.get("syscall (freebsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64-cgo)", "Stat_t struct, Ino uint64"));
		mapType.get("syscall (freebsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64-cgo)", "Stat_t struct, Blksize int32"));
		mapType.get("syscall (freebsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64-cgo)", "Stat_t struct, Padding1 int32"));
		mapConst.get("syscall (freebsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-amd64-cgo)", "S_IRWXG", " 56", null));
		mapFunc.get("syscall (freebsd-amd64-cgo)").add(new FuncGoLangApiSignature("syscall (freebsd-amd64-cgo)",
				"Mknod", new String[] { "string", " uint32", " uint64" }, new String[] { "error" }));
		mapType.get("syscall (freebsd-amd64-cgo)").add(
				new TypeGoLangApiSignature("syscall (freebsd-amd64-cgo)", "Statfs_t struct, Mntfromname [1024]int8"));
		mapConst.get("syscall (freebsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-amd64-cgo)", "S_IRWXO", " 7", null));
		mapType.get("syscall (freebsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64-cgo)", "Dirent struct, Namlen uint16"));

		pkgs.add("os/exec");
		mapConst.putIfAbsent("os/exec", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("os/exec", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("os/exec", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("os/exec", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("os/exec", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("os/exec").add(new MethodGoLangApiSignature("os/exec", "ExitError", "ExitCode",
				new String[] { "" }, new String[] { "int" }));

		pkgs.add("reflect");
		mapConst.putIfAbsent("reflect", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("reflect", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("reflect", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("reflect", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("reflect", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("reflect").add(new MethodGoLangApiSignature("reflect", "Value", "MapRange", new String[] { "" },
				new String[] { "*MapIter" }));
		mapMethod.get("reflect").add(new MethodGoLangApiSignature("reflect", "*MapIter", "Key", new String[] { "" },
				new String[] { "Value" }));
		mapMethod.get("reflect").add(new MethodGoLangApiSignature("reflect", "*MapIter", "Next", new String[] { "" },
				new String[] { "bool" }));
		mapType.get("reflect").add(new TypeGoLangApiSignature("reflect", "MapIter struct"));
		mapMethod.get("reflect").add(new MethodGoLangApiSignature("reflect", "*MapIter", "Value", new String[] { "" },
				new String[] { "Value" }));

		pkgs.add("syscall (freebsd-386)");
		mapConst.putIfAbsent("syscall (freebsd-386)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (freebsd-386)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (freebsd-386)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (freebsd-386)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (freebsd-386)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (freebsd-386)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386)", "Stat_t struct, Rdev uint64"));
		mapConst.get("syscall (freebsd-386)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-386)", "S_IRWXO", " 7", null));
		mapType.get("syscall (freebsd-386)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386)", "Dirent struct, Pad1 uint16"));
		mapType.get("syscall (freebsd-386)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386)", "Dirent struct, Fileno uint64"));
		mapType.get("syscall (freebsd-386)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386)", "Dirent struct, Pad0 uint8"));
		mapType.get("syscall (freebsd-386)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386)", "Dirent struct, Namlen uint16"));
		mapType.get("syscall (freebsd-386)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386)", "Stat_t struct, Nlink uint64"));
		mapType.get("syscall (freebsd-386)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386)", "Stat_t struct, Btim_ext int32"));
		mapType.get("syscall (freebsd-386)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386)", "Stat_t struct, Ctim_ext int32"));
		mapType.get("syscall (freebsd-386)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386)", "Stat_t struct, Gen uint64"));
		mapType.get("syscall (freebsd-386)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386)", "Stat_t struct, Mtim_ext int32"));
		mapType.get("syscall (freebsd-386)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386)", "Stat_t struct, Ino uint64"));
		mapType.get("syscall (freebsd-386)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386)", "Stat_t struct, Blksize int32"));
		mapType.get("syscall (freebsd-386)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386)", "Statfs_t struct, Mntonname [1024]int8"));
		mapConst.get("syscall (freebsd-386)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-386)", "S_IRWXG", null, "ideal-int"));
		mapType.get("syscall (freebsd-386)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386)", "Stat_t struct, Spare [10]uint64"));
		mapConst.get("syscall (freebsd-386)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-386)", "S_IRWXG", " 56", null));
		mapFunc.get("syscall (freebsd-386)").add(new FuncGoLangApiSignature("syscall (freebsd-386)", "Fstatat",
				new String[] { "int", " string", " *Stat_t", " int" }, new String[] { "error" }));
		mapType.get("syscall (freebsd-386)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386)", "Stat_t struct, Padding1 int32"));
		mapType.get("syscall (freebsd-386)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386)", "Statfs_t struct, Mntfromname [1024]int8"));
		mapType.get("syscall (freebsd-386)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386)", "Stat_t struct, Padding0 int16"));
		mapType.get("syscall (freebsd-386)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386)", "Dirent struct, Off int64"));
		mapType.get("syscall (freebsd-386)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386)", "Stat_t struct, Dev uint64"));
		mapType.get("syscall (freebsd-386)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386)", "Stat_t struct, Atim_ext int32"));
		mapConst.get("syscall (freebsd-386)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-386)", "S_IRWXO", null, "ideal-int"));
		mapFunc.get("syscall (freebsd-386)").add(new FuncGoLangApiSignature("syscall (freebsd-386)", "Mknod",
				new String[] { "string", " uint32", " uint64" }, new String[] { "error" }));

		pkgs.add("strings");
		mapConst.putIfAbsent("strings", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("strings", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("strings", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("strings", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("strings", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("strings").add(new FuncGoLangApiSignature("strings", "ReplaceAll",
				new String[] { "string", " string", " string" }, new String[] { "string" }));
		mapMethod.get("strings").add(new MethodGoLangApiSignature("strings", "*Builder", "Cap", new String[] { "" },
				new String[] { "int" }));

		pkgs.add("debug/pe");
		mapConst.putIfAbsent("debug/pe", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("debug/pe", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("debug/pe", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("debug/pe", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("debug/pe", new HashSet<VarGoLangApiSignature>());

		mapConst.get("debug/pe").add(new ConstGoLangApiSignature("debug/pe", "IMAGE_FILE_MACHINE_ARMNT", " 452", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_FILE_MACHINE_ARMNT", null, "ideal-int"));

		pkgs.add("runtime/debug");
		mapConst.putIfAbsent("runtime/debug", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("runtime/debug", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("runtime/debug", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("runtime/debug", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("runtime/debug", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("runtime/debug").add(new FuncGoLangApiSignature("runtime/debug", "ReadBuildInfo",
				new String[] { "" }, new String[] { "*BuildInfo", " bool" }));
		mapType.get("runtime/debug").add(new TypeGoLangApiSignature("runtime/debug", "BuildInfo struct"));
		mapType.get("runtime/debug").add(new TypeGoLangApiSignature("runtime/debug", "Module struct, Version string"));
		mapType.get("runtime/debug").add(new TypeGoLangApiSignature("runtime/debug", "Module struct, Sum string"));
		mapType.get("runtime/debug").add(new TypeGoLangApiSignature("runtime/debug", "Module struct, Path string"));
		mapType.get("runtime/debug").add(new TypeGoLangApiSignature("runtime/debug", "BuildInfo struct, Path string"));
		mapType.get("runtime/debug").add(new TypeGoLangApiSignature("runtime/debug", "Module struct, Replace *Module"));
		mapType.get("runtime/debug").add(new TypeGoLangApiSignature("runtime/debug", "BuildInfo struct, Main Module"));
		mapType.get("runtime/debug").add(new TypeGoLangApiSignature("runtime/debug", "Module struct"));
		mapType.get("runtime/debug")
				.add(new TypeGoLangApiSignature("runtime/debug", "BuildInfo struct, Deps []*Module"));

		pkgs.add("syscall (freebsd-arm)");
		mapConst.putIfAbsent("syscall (freebsd-arm)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (freebsd-arm)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (freebsd-arm)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (freebsd-arm)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (freebsd-arm)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (freebsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm)", "Stat_t struct, Nlink uint64"));
		mapType.get("syscall (freebsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm)", "Dirent struct, Fileno uint64"));
		mapType.get("syscall (freebsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm)", "Statfs_t struct, Mntfromname [1024]int8"));
		mapType.get("syscall (freebsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm)", "Stat_t struct, Spare [10]uint64"));
		mapFunc.get("syscall (freebsd-arm)").add(new FuncGoLangApiSignature("syscall (freebsd-arm)", "Fstatat",
				new String[] { "int", " string", " *Stat_t", " int" }, new String[] { "error" }));
		mapType.get("syscall (freebsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm)", "Dirent struct, Namlen uint16"));
		mapConst.get("syscall (freebsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm)", "S_IRWXO", " 7", null));
		mapType.get("syscall (freebsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm)", "Statfs_t struct, Mntonname [1024]int8"));
		mapConst.get("syscall (freebsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm)", "S_IRWXG", " 56", null));
		mapConst.get("syscall (freebsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm)", "S_IRWXG", null, "ideal-int"));
		mapType.get("syscall (freebsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm)", "Dirent struct, Pad0 uint8"));
		mapType.get("syscall (freebsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm)", "Stat_t struct, Gen uint64"));
		mapType.get("syscall (freebsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm)", "Dirent struct, Pad1 uint16"));
		mapType.get("syscall (freebsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm)", "Stat_t struct, Rdev uint64"));
		mapConst.get("syscall (freebsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-arm)", "S_IRWXO", null, "ideal-int"));
		mapFunc.get("syscall (freebsd-arm)").add(new FuncGoLangApiSignature("syscall (freebsd-arm)", "Mknod",
				new String[] { "string", " uint32", " uint64" }, new String[] { "error" }));
		mapType.get("syscall (freebsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm)", "Stat_t struct, Dev uint64"));
		mapType.get("syscall (freebsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm)", "Stat_t struct, Ino uint64"));
		mapType.get("syscall (freebsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm)", "Stat_t struct, Padding1 int32"));
		mapType.get("syscall (freebsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm)", "Dirent struct, Off int64"));
		mapType.get("syscall (freebsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm)", "Stat_t struct, Blksize int32"));
		mapType.get("syscall (freebsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm)", "Stat_t struct, Padding0 int16"));

		pkgs.add("syscall (windows-386)");
		mapConst.putIfAbsent("syscall (windows-386)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (windows-386)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (windows-386)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (windows-386)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (windows-386)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (windows-386)")
				.add(new TypeGoLangApiSignature("syscall (windows-386)", "RawSockaddrUnix struct, Path [108]int8"));
		mapType.get("syscall (windows-386)")
				.add(new TypeGoLangApiSignature("syscall (windows-386)", "RawSockaddrAny struct, Pad [100]int8"));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "UNIX_PATH_MAX", null, "ideal-int"));
		mapFunc.get("syscall (windows-386)")
				.add(new FuncGoLangApiSignature("syscall (windows-386)", "Syscall18",
						new String[] { "uintptr", " uintptr", " uintptr", " uintptr", " uintptr", " uintptr",
								" uintptr", " uintptr", " uintptr", " uintptr", " uintptr", " uintptr", " uintptr",
								" uintptr", " uintptr", " uintptr", " uintptr", " uintptr", " uintptr", " uintptr" },
						new String[] { "uintptr", " uintptr", " Errno" }));
		mapType.get("syscall (windows-386)")
				.add(new TypeGoLangApiSignature("syscall (windows-386)", "RawSockaddrUnix struct, Family uint16"));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "UNIX_PATH_MAX", " 108", null));

		pkgs.add("os");
		mapConst.putIfAbsent("os", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("os", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("os", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("os", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("os", new HashSet<VarGoLangApiSignature>());

		mapConst.get("os").add(new ConstGoLangApiSignature("os", "ModeType", " 2401763328", null));
		mapMethod.get("os").add(new MethodGoLangApiSignature("os", "*ProcessState", "ExitCode", new String[] { "" },
				new String[] { "int" }));
		mapFunc.get("os").add(new FuncGoLangApiSignature("os", "UserHomeDir", new String[] { "" },
				new String[] { "string", " error" }));
		mapMethod.get("os").add(new MethodGoLangApiSignature("os", "*File", "SyscallConn", new String[] { "" },
				new String[] { "syscall.RawConn", " error" }));

		pkgs.add("go/token");
		mapConst.putIfAbsent("go/token", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("go/token", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("go/token", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("go/token", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("go/token", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("go/token").add(new MethodGoLangApiSignature("go/token", "*File", "LineStart",
				new String[] { "int" }, new String[] { "Pos" }));

		pkgs.add("go/importer");
		mapConst.putIfAbsent("go/importer", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("go/importer", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("go/importer", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("go/importer", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("go/importer", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("go/importer").add(new FuncGoLangApiSignature("go/importer", "ForCompiler",
				new String[] { "*token.FileSet", " string", " Lookup" }, new String[] { "types.Importer" }));

		pkgs.add("io");
		mapConst.putIfAbsent("io", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("io", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("io", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("io", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("io", new HashSet<VarGoLangApiSignature>());

		mapType.get("io").add(new TypeGoLangApiSignature("io", "StringWriter interface { WriteString }"));
		mapType.get("io")
				.add(new TypeGoLangApiSignature("io", "StringWriter interface, WriteString(string) (int, error)"));

		pkgs.add("syscall (openbsd-amd64-cgo)");
		mapConst.putIfAbsent("syscall (openbsd-amd64-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (openbsd-amd64-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (openbsd-amd64-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (openbsd-amd64-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (openbsd-amd64-cgo)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "S_IRWXO", null, "ideal-int"));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "S_IRWXO", " 7", null));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "S_IRWXG", " 56", null));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "S_IRWXG", null, "ideal-int"));

		pkgs.add("go/doc");
		mapConst.putIfAbsent("go/doc", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("go/doc", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("go/doc", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("go/doc", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("go/doc", new HashSet<VarGoLangApiSignature>());

		mapConst.get("go/doc").add(new ConstGoLangApiSignature("go/doc", "PreserveAST", " 4", null));
		mapConst.get("go/doc").add(new ConstGoLangApiSignature("go/doc", "PreserveAST", null, "Mode"));

		pkgs.add("syscall (openbsd-386-cgo)");
		mapConst.putIfAbsent("syscall (openbsd-386-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (openbsd-386-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (openbsd-386-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (openbsd-386-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (openbsd-386-cgo)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "S_IRWXO", null, "ideal-int"));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "S_IRWXG", null, "ideal-int"));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "S_IRWXG", " 56", null));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "S_IRWXO", " 7", null));

		pkgs.add("math/bits");
		mapConst.putIfAbsent("math/bits", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("math/bits", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("math/bits", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("math/bits", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("math/bits", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "Div32",
				new String[] { "uint32", " uint32", " uint32" }, new String[] { "uint32", " uint32" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "Div",
				new String[] { "uint", " uint", " uint" }, new String[] { "uint", " uint" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "Sub32",
				new String[] { "uint32", " uint32", " uint32" }, new String[] { "uint32", " uint32" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "Mul", new String[] { "uint", " uint" },
				new String[] { "uint", " uint" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "Sub64",
				new String[] { "uint64", " uint64", " uint64" }, new String[] { "uint64", " uint64" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "Add",
				new String[] { "uint", " uint", " uint" }, new String[] { "uint", " uint" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "Sub",
				new String[] { "uint", " uint", " uint" }, new String[] { "uint", " uint" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "Add64",
				new String[] { "uint64", " uint64", " uint64" }, new String[] { "uint64", " uint64" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "Add32",
				new String[] { "uint32", " uint32", " uint32" }, new String[] { "uint32", " uint32" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "Mul32",
				new String[] { "uint32", " uint32" }, new String[] { "uint32", " uint32" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "Div64",
				new String[] { "uint64", " uint64", " uint64" }, new String[] { "uint64", " uint64" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "Mul64",
				new String[] { "uint64", " uint64" }, new String[] { "uint64", " uint64" }));

		pkgs.add("net/http");
		mapConst.putIfAbsent("net/http", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net/http", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net/http", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net/http", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net/http", new HashSet<VarGoLangApiSignature>());

		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "StatusTooEarly", " 425", null));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "StatusTooEarly", null, "ideal-int"));
		mapMethod.get("net/http").add(new MethodGoLangApiSignature("net/http", "*Client", "CloseIdleConnections",
				new String[] { "" }, new String[] { "" }));

		pkgs.add("syscall (openbsd-amd64)");
		mapConst.putIfAbsent("syscall (openbsd-amd64)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (openbsd-amd64)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (openbsd-amd64)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (openbsd-amd64)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (openbsd-amd64)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "S_IRWXG", " 56", null));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "S_IRWXO", null, "ideal-int"));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "S_IRWXO", " 7", null));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "S_IRWXG", null, "ideal-int"));

		pkgs.add("syscall (openbsd-386)");
		mapConst.putIfAbsent("syscall (openbsd-386)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (openbsd-386)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (openbsd-386)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (openbsd-386)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (openbsd-386)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "S_IRWXO", null, "ideal-int"));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "S_IRWXG", " 56", null));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "S_IRWXO", " 7", null));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "S_IRWXG", null, "ideal-int"));

		pkgs.add("bytes");
		mapConst.putIfAbsent("bytes", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("bytes", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("bytes", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("bytes", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("bytes", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("bytes").add(new FuncGoLangApiSignature("bytes", "ReplaceAll",
				new String[] { "[]uint8", " []uint8", " []uint8" }, new String[] { "[]uint8" }));

		pkgs.add("syscall (freebsd-amd64)");
		mapConst.putIfAbsent("syscall (freebsd-amd64)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (freebsd-amd64)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (freebsd-amd64)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (freebsd-amd64)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (freebsd-amd64)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (freebsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64)", "Dirent struct, Pad1 uint16"));
		mapType.get("syscall (freebsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64)", "Statfs_t struct, Mntonname [1024]int8"));
		mapType.get("syscall (freebsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64)", "Stat_t struct, Gen uint64"));
		mapType.get("syscall (freebsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64)", "Dirent struct, Pad0 uint8"));
		mapFunc.get("syscall (freebsd-amd64)").add(new FuncGoLangApiSignature("syscall (freebsd-amd64)", "Fstatat",
				new String[] { "int", " string", " *Stat_t", " int" }, new String[] { "error" }));
		mapType.get("syscall (freebsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64)", "Stat_t struct, Spare [10]uint64"));
		mapType.get("syscall (freebsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64)", "Stat_t struct, Rdev uint64"));
		mapConst.get("syscall (freebsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-amd64)", "S_IRWXO", null, "ideal-int"));
		mapType.get("syscall (freebsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64)", "Dirent struct, Fileno uint64"));
		mapType.get("syscall (freebsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64)", "Stat_t struct, Dev uint64"));
		mapConst.get("syscall (freebsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-amd64)", "S_IRWXG", null, "ideal-int"));
		mapType.get("syscall (freebsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64)", "Stat_t struct, Nlink uint64"));
		mapType.get("syscall (freebsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64)", "Dirent struct, Namlen uint16"));
		mapFunc.get("syscall (freebsd-amd64)").add(new FuncGoLangApiSignature("syscall (freebsd-amd64)", "Mknod",
				new String[] { "string", " uint32", " uint64" }, new String[] { "error" }));
		mapType.get("syscall (freebsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64)", "Stat_t struct, Ino uint64"));
		mapType.get("syscall (freebsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64)", "Stat_t struct, Blksize int32"));
		mapConst.get("syscall (freebsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-amd64)", "S_IRWXO", " 7", null));
		mapType.get("syscall (freebsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64)", "Statfs_t struct, Mntfromname [1024]int8"));
		mapType.get("syscall (freebsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64)", "Dirent struct, Off int64"));
		mapType.get("syscall (freebsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64)", "Stat_t struct, Padding0 int16"));
		mapConst.get("syscall (freebsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (freebsd-amd64)", "S_IRWXG", " 56", null));
		mapType.get("syscall (freebsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64)", "Stat_t struct, Padding1 int32"));

		pkgs.add("debug/elf");
		mapConst.putIfAbsent("debug/elf", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("debug/elf", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("debug/elf", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("debug/elf", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("debug/elf", new HashSet<VarGoLangApiSignature>());

		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_32_PCREL", " 57", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_RISCV_32_PCREL", null, "R_RISCV"));

		pkgs.add("syscall (windows-amd64)");
		mapConst.putIfAbsent("syscall (windows-amd64)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (windows-amd64)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (windows-amd64)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (windows-amd64)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (windows-amd64)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "UNIX_PATH_MAX", " 108", null));
		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "UNIX_PATH_MAX", null, "ideal-int"));
		mapType.get("syscall (windows-amd64)")
				.add(new TypeGoLangApiSignature("syscall (windows-amd64)", "RawSockaddrAny struct, Pad [100]int8"));
		mapFunc.get("syscall (windows-amd64)")
				.add(new FuncGoLangApiSignature("syscall (windows-amd64)", "Syscall18",
						new String[] { "uintptr", " uintptr", " uintptr", " uintptr", " uintptr", " uintptr",
								" uintptr", " uintptr", " uintptr", " uintptr", " uintptr", " uintptr", " uintptr",
								" uintptr", " uintptr", " uintptr", " uintptr", " uintptr", " uintptr", " uintptr" },
						new String[] { "uintptr", " uintptr", " Errno" }));
		mapType.get("syscall (windows-amd64)")
				.add(new TypeGoLangApiSignature("syscall (windows-amd64)", "RawSockaddrUnix struct, Path [108]int8"));
		mapType.get("syscall (windows-amd64)")
				.add(new TypeGoLangApiSignature("syscall (windows-amd64)", "RawSockaddrUnix struct, Family uint16"));

	}

}