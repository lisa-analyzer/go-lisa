package it.unive.golisa.golang.util;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import it.unive.golisa.golang.api.signature.ConstGoLangApiSignature;
import it.unive.golisa.golang.api.signature.FuncGoLangApiSignature;
import it.unive.golisa.golang.api.signature.MethodGoLangApiSignature;
import it.unive.golisa.golang.api.signature.TypeGoLangApiSignature;
import it.unive.golisa.golang.api.signature.VarGoLangApiSignature;

/**
 * Auto-generated by GoLiSA build
 */
public class Go1_14 {
	private final Map<String, Set<ConstGoLangApiSignature>> mapConst;
	private final Map<String, Set<FuncGoLangApiSignature>> mapFunc;
	private final Map<String, Set<MethodGoLangApiSignature>> mapMethod;
	private final Map<String, Set<TypeGoLangApiSignature>> mapType;
	private final Map<String, Set<VarGoLangApiSignature>> mapVar;
	private final Set<String> pkgs;

	public Go1_14() {
		pkgs = new HashSet<>();
		mapConst = new HashMap<String, Set<ConstGoLangApiSignature>>();
		mapFunc = new HashMap<String, Set<FuncGoLangApiSignature>>();
		mapMethod = new HashMap<String, Set<MethodGoLangApiSignature>>();
		mapType = new HashMap<String, Set<TypeGoLangApiSignature>>();
		mapVar = new HashMap<String, Set<VarGoLangApiSignature>>();

		build();
	}

	public Set<String> getPackages() {
		return pkgs;
	}

	public Map<String, Set<ConstGoLangApiSignature>> getMapConst() {
		return mapConst;
	}

	public Map<String, Set<FuncGoLangApiSignature>> getMapFunc() {
		return mapFunc;
	}

	public Map<String, Set<MethodGoLangApiSignature>> getMapMethod() {
		return mapMethod;
	}

	public Map<String, Set<TypeGoLangApiSignature>> getMapType() {
		return mapType;
	}

	public Map<String, Set<VarGoLangApiSignature>> getMapVar() {
		return mapVar;
	}

	private void build() {
		build0();
	}

	private void build0() {
		pkgs.add("crypto/tls");
		mapConst.putIfAbsent("crypto/tls", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("crypto/tls", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("crypto/tls", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("crypto/tls", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("crypto/tls", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("crypto/tls").add(new MethodGoLangApiSignature("crypto/tls", "*ClientHelloInfo",
				"SupportsCertificate", new String[] { "*Certificate" }, new String[] { "error" }));
		mapConst.get("crypto/tls").add(new ConstGoLangApiSignature("crypto/tls",
				"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256", null, "uint16"));
		mapConst.get("crypto/tls").add(new ConstGoLangApiSignature("crypto/tls",
				"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256", " 52393", null));
		mapConst.get("crypto/tls").add(new ConstGoLangApiSignature("crypto/tls",
				"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256", null, "uint16"));
		mapType.get("crypto/tls").add(new TypeGoLangApiSignature("crypto/tls", "CipherSuite struct, Name string"));
		mapFunc.get("crypto/tls").add(new FuncGoLangApiSignature("crypto/tls", "CipherSuites", new String[] { "" },
				new String[] { "[]*CipherSuite" }));
		mapType.get("crypto/tls").add(new TypeGoLangApiSignature("crypto/tls", "CipherSuite struct, Insecure bool"));
		mapFunc.get("crypto/tls").add(new FuncGoLangApiSignature("crypto/tls", "InsecureCipherSuites",
				new String[] { "" }, new String[] { "[]*CipherSuite" }));
		mapType.get("crypto/tls").add(new TypeGoLangApiSignature("crypto/tls", "CipherSuite struct, ID uint16"));
		mapType.get("crypto/tls")
				.add(new TypeGoLangApiSignature("crypto/tls", "CipherSuite struct, SupportedVersions []uint16"));
		mapConst.get("crypto/tls").add(new ConstGoLangApiSignature("crypto/tls",
				"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256", " 52392", null));
		mapType.get("crypto/tls")
				.add(new TypeGoLangApiSignature("crypto/tls", "CertificateRequestInfo struct, Version uint16"));
		mapType.get("crypto/tls").add(new TypeGoLangApiSignature("crypto/tls", "CipherSuite struct"));
		mapMethod.get("crypto/tls").add(new MethodGoLangApiSignature("crypto/tls", "*CertificateRequestInfo",
				"SupportsCertificate", new String[] { "*Certificate" }, new String[] { "error" }));
		mapFunc.get("crypto/tls").add(new FuncGoLangApiSignature("crypto/tls", "CipherSuiteName",
				new String[] { "uint16" }, new String[] { "string" }));
		mapType.get("crypto/tls").add(new TypeGoLangApiSignature("crypto/tls",
				"Certificate struct, SupportedSignatureAlgorithms []SignatureScheme"));

		pkgs.add("syscall (windows-386)");
		mapConst.putIfAbsent("syscall (windows-386)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (windows-386)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (windows-386)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (windows-386)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (windows-386)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "CTRL_SHUTDOWN_EVENT", " 6", null));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "CTRL_SHUTDOWN_EVENT", null, "ideal-int"));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "CTRL_LOGOFF_EVENT", null, "ideal-int"));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "CTRL_CLOSE_EVENT", null, "ideal-int"));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "CTRL_CLOSE_EVENT", " 2", null));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "CTRL_LOGOFF_EVENT", " 5", null));

		pkgs.add("log");
		mapConst.putIfAbsent("log", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("log", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("log", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("log", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("log", new HashSet<VarGoLangApiSignature>());

		mapConst.get("log").add(new ConstGoLangApiSignature("log", "Lmsgprefix", null, "ideal-int"));
		mapConst.get("log").add(new ConstGoLangApiSignature("log", "Lmsgprefix", " 64", null));

		pkgs.add("go/doc");
		mapConst.putIfAbsent("go/doc", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("go/doc", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("go/doc", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("go/doc", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("go/doc", new HashSet<VarGoLangApiSignature>());

		mapType.get("go/doc").add(new TypeGoLangApiSignature("go/doc", "Example struct, Suffix string"));
		mapFunc.get("go/doc")
				.add(new FuncGoLangApiSignature("go/doc", "NewFromFiles",
						new String[] { "*token.FileSet", " []*ast.File", " string", " ...interface{}" },
						new String[] { "*Package", " error" }));
		mapType.get("go/doc").add(new TypeGoLangApiSignature("go/doc", "Type struct, Examples []*Example"));
		mapType.get("go/doc").add(new TypeGoLangApiSignature("go/doc", "Package struct, Examples []*Example"));
		mapType.get("go/doc").add(new TypeGoLangApiSignature("go/doc", "Func struct, Examples []*Example"));

		pkgs.add("testing");
		mapConst.putIfAbsent("testing", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("testing", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("testing", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("testing", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("testing", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("testing").add(new MethodGoLangApiSignature("testing", "*B", "Cleanup", new String[] { "func(" },
				new String[] { ")" }));
		mapMethod.get("testing").add(new MethodGoLangApiSignature("testing", "*T", "Cleanup", new String[] { "func(" },
				new String[] { ")" }));
		mapType.get("testing").add(new TypeGoLangApiSignature("testing", "TB interface, Cleanup(func())"));

		pkgs.add("math/bits");
		mapConst.putIfAbsent("math/bits", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("math/bits", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("math/bits", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("math/bits", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("math/bits", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "Rem",
				new String[] { "uint", " uint", " uint" }, new String[] { "uint" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "Rem32",
				new String[] { "uint32", " uint32", " uint32" }, new String[] { "uint32" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "Rem64",
				new String[] { "uint64", " uint64", " uint64" }, new String[] { "uint64" }));

		pkgs.add("encoding/asn1");
		mapConst.putIfAbsent("encoding/asn1", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("encoding/asn1", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("encoding/asn1", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("encoding/asn1", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("encoding/asn1", new HashSet<VarGoLangApiSignature>());

		mapConst.get("encoding/asn1")
				.add(new ConstGoLangApiSignature("encoding/asn1", "TagBMPString", null, "ideal-int"));
		mapConst.get("encoding/asn1").add(new ConstGoLangApiSignature("encoding/asn1", "TagBMPString", " 30", null));

		pkgs.add("net/http");
		mapConst.putIfAbsent("net/http", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net/http", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net/http", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net/http", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net/http", new HashSet<VarGoLangApiSignature>());

		mapType.get("net/http").add(new TypeGoLangApiSignature("net/http",
				"Transport struct, DialTLSContext func(context.Context, string, string) (net.Conn, error)"));
		mapMethod.get("net/http").add(new MethodGoLangApiSignature("net/http", "Header", "Values",
				new String[] { "string" }, new String[] { "[]string" }));

		pkgs.add("mime/multipart");
		mapConst.putIfAbsent("mime/multipart", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("mime/multipart", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("mime/multipart", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("mime/multipart", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("mime/multipart", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("mime/multipart").add(new MethodGoLangApiSignature("mime/multipart", "*Reader", "NextRawPart",
				new String[] { "" }, new String[] { "*Part", " error" }));

		pkgs.add("hash/maphash");
		mapConst.putIfAbsent("hash/maphash", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("hash/maphash", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("hash/maphash", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("hash/maphash", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("hash/maphash", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("hash/maphash").add(new MethodGoLangApiSignature("hash/maphash", "*Hash", "Size",
				new String[] { "" }, new String[] { "int" }));
		mapMethod.get("hash/maphash").add(new MethodGoLangApiSignature("hash/maphash", "*Hash", "BlockSize",
				new String[] { "" }, new String[] { "int" }));
		mapMethod.get("hash/maphash").add(new MethodGoLangApiSignature("hash/maphash", "*Hash", "WriteByte",
				new String[] { "uint8" }, new String[] { "error" }));
		mapMethod.get("hash/maphash").add(new MethodGoLangApiSignature("hash/maphash", "*Hash", "Seed",
				new String[] { "" }, new String[] { "Seed" }));
		mapMethod.get("hash/maphash").add(new MethodGoLangApiSignature("hash/maphash", "*Hash", "WriteString",
				new String[] { "string" }, new String[] { "int", " error" }));
		mapMethod.get("hash/maphash").add(new MethodGoLangApiSignature("hash/maphash", "*Hash", "Reset",
				new String[] { "" }, new String[] { "" }));
		mapMethod.get("hash/maphash").add(new MethodGoLangApiSignature("hash/maphash", "*Hash", "Sum",
				new String[] { "[]uint8" }, new String[] { "[]uint8" }));
		mapFunc.get("hash/maphash").add(
				new FuncGoLangApiSignature("hash/maphash", "MakeSeed", new String[] { "" }, new String[] { "Seed" }));
		mapType.get("hash/maphash").add(new TypeGoLangApiSignature("hash/maphash", "Hash struct"));
		mapMethod.get("hash/maphash").add(new MethodGoLangApiSignature("hash/maphash", "*Hash", "SetSeed",
				new String[] { "Seed" }, new String[] { "" }));
		mapMethod.get("hash/maphash").add(new MethodGoLangApiSignature("hash/maphash", "*Hash", "Sum64",
				new String[] { "" }, new String[] { "uint64" }));
		mapMethod.get("hash/maphash").add(new MethodGoLangApiSignature("hash/maphash", "*Hash", "Write",
				new String[] { "[]uint8" }, new String[] { "int", " error" }));
		mapType.get("hash/maphash").add(new TypeGoLangApiSignature("hash/maphash", "Seed struct"));

		pkgs.add("net/http/httptest");
		mapConst.putIfAbsent("net/http/httptest", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net/http/httptest", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net/http/httptest", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net/http/httptest", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net/http/httptest", new HashSet<VarGoLangApiSignature>());

		mapType.get("net/http/httptest")
				.add(new TypeGoLangApiSignature("net/http/httptest", "Server struct, EnableHTTP2 bool"));

		pkgs.add("strconv");
		mapConst.putIfAbsent("strconv", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("strconv", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("strconv", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("strconv", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("strconv", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("strconv").add(new MethodGoLangApiSignature("strconv", "*NumError", "Unwrap", new String[] { "" },
				new String[] { "error" }));

		pkgs.add("unicode");
		mapConst.putIfAbsent("unicode", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("unicode", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("unicode", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("unicode", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("unicode", new HashSet<VarGoLangApiSignature>());

		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Nyiakeng_Puachue_Hmong", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Wancho", "*RangeTable"));
		mapConst.get("unicode").add(new ConstGoLangApiSignature("unicode", "Version", " \"12.0.0\"", null));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Elymaic", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Nandinagari", "*RangeTable"));

		pkgs.add("encoding/json");
		mapConst.putIfAbsent("encoding/json", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("encoding/json", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("encoding/json", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("encoding/json", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("encoding/json", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("encoding/json").add(new MethodGoLangApiSignature("encoding/json", "*Decoder", "InputOffset",
				new String[] { "" }, new String[] { "int64" }));

		pkgs.add("go/build");
		mapConst.putIfAbsent("go/build", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("go/build", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("go/build", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("go/build", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("go/build", new HashSet<VarGoLangApiSignature>());

		mapType.get("go/build").add(new TypeGoLangApiSignature("go/build", "Context struct, Dir string"));

		pkgs.add("math");
		mapConst.putIfAbsent("math", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("math", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("math", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("math", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("math", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("math").add(new FuncGoLangApiSignature("math", "FMA",
				new String[] { "float64", " float64", " float64" }, new String[] { "float64" }));

		pkgs.add("syscall (windows-amd64)");
		mapConst.putIfAbsent("syscall (windows-amd64)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (windows-amd64)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (windows-amd64)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (windows-amd64)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (windows-amd64)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "CTRL_CLOSE_EVENT", null, "ideal-int"));
		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "CTRL_SHUTDOWN_EVENT", null, "ideal-int"));
		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "CTRL_CLOSE_EVENT", " 2", null));
		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "CTRL_SHUTDOWN_EVENT", " 6", null));
		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "CTRL_LOGOFF_EVENT", " 5", null));
		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "CTRL_LOGOFF_EVENT", null, "ideal-int"));

		pkgs.add("debug/dwarf");
		mapConst.putIfAbsent("debug/dwarf", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("debug/dwarf", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("debug/dwarf", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("debug/dwarf", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("debug/dwarf", new HashSet<VarGoLangApiSignature>());

		mapConst.get("debug/dwarf")
				.add(new ConstGoLangApiSignature("debug/dwarf", "AttrCallTargetClobbered", " 132", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrNoreturn", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "TagCallSite", " 72", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrAlignment", " 136", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrSmall", " 93", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "TagImmutableType", " 75", null));
		mapConst.get("debug/dwarf")
				.add(new ConstGoLangApiSignature("debug/dwarf", "AttrCallDataLocation", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassStrOffsetsPtr", " 19", null));
		mapConst.get("debug/dwarf")
				.add(new ConstGoLangApiSignature("debug/dwarf", "ClassStrOffsetsPtr", null, "Class"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "TagCoarrayType", " 68", null));
		mapMethod.get("debug/dwarf").add(new MethodGoLangApiSignature("debug/dwarf", "*Reader", "ByteOrder",
				new String[] { "" }, new String[] { "binary.ByteOrder" }));
		mapConst.get("debug/dwarf")
				.add(new ConstGoLangApiSignature("debug/dwarf", "AttrCallAllTailCalls", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "TagDynamicType", null, "Tag"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "TagGenericSubrange", " 69", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrDataBitOffset", " 107", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrAlignment", null, "Attr"));
		mapConst.get("debug/dwarf")
				.add(new ConstGoLangApiSignature("debug/dwarf", "AttrCallTargetClobbered", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrObjectPointer", " 100", null));
		mapConst.get("debug/dwarf")
				.add(new ConstGoLangApiSignature("debug/dwarf", "TagCallSiteParameter", null, "Tag"));
		mapConst.get("debug/dwarf")
				.add(new ConstGoLangApiSignature("debug/dwarf", "AttrCallAllSourceCalls", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "TagSkeletonUnit", null, "Tag"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrRank", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrPure", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrSmall", null, "Attr"));
		mapConst.get("debug/dwarf")
				.add(new ConstGoLangApiSignature("debug/dwarf", "AttrStringLengthByteSize", " 112", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassLocList", null, "Class"));
		mapConst.get("debug/dwarf")
				.add(new ConstGoLangApiSignature("debug/dwarf", "AttrRvalueReference", " 120", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrCallReturnPC", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrConstExpr", " 108", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrDecimalScale", " 92", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrSignature", " 105", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassRngList", " 17", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrConstExpr", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrRecursive", " 104", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrSignature", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrCallParameter", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrBinaryScale", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrElemental", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "TagCoarrayType", null, "Tag"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrElemental", " 102", null));
		mapConst.get("debug/dwarf")
				.add(new ConstGoLangApiSignature("debug/dwarf", "AttrCallAllSourceCalls", " 123", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrDecimalScale", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrExplicit", " 99", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrRnglistsBase", " 116", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrStrOffsetsBase", null, "Attr"));
		mapConst.get("debug/dwarf")
				.add(new ConstGoLangApiSignature("debug/dwarf", "AttrStringLengthBitSize", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "TagCallSite", null, "Tag"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrCallOrigin", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrExportSymbols", " 137", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrRecursive", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrNoreturn", " 135", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrCallPC", " 129", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrReference", " 119", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrMutable", " 97", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrCallTailCall", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrRnglistsBase", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrDecimalSign", " 94", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrAddrBase", " 115", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrPictureString", " 96", null));
		mapMethod.get("debug/dwarf").add(new MethodGoLangApiSignature("debug/dwarf", "*LineReader", "Files",
				new String[] { "" }, new String[] { "[]*LineFile" }));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrDefaulted", " 139", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrDeleted", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrCallParameter", " 128", null));
		mapConst.get("debug/dwarf")
				.add(new ConstGoLangApiSignature("debug/dwarf", "AttrRvalueReference", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrStrOffsetsBase", " 114", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrReference", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrLoclistsBase", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrRank", " 113", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrDecimalSign", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrCallDataValue", " 134", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrCallTarget", " 131", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrMainSubprogram", " 106", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrCallValue", " 126", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrThreadsScaled", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrPictureString", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassRngListsPtr", " 18", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassAddrPtr", " 15", null));
		mapConst.get("debug/dwarf")
				.add(new ConstGoLangApiSignature("debug/dwarf", "AttrStringLengthBitSize", " 111", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrCallAllCalls", " 122", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrDefaulted", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrAddrBase", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrMacros", " 121", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrDeleted", " 138", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrLoclistsBase", " 140", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrObjectPointer", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrPure", " 103", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "TagSkeletonUnit", " 74", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrDigitCount", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrDataBitOffset", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrThreadsScaled", " 98", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrCallPC", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrCallTarget", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassRngList", null, "Class"));
		mapConst.get("debug/dwarf")
				.add(new ConstGoLangApiSignature("debug/dwarf", "TagCallSiteParameter", " 73", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "TagDynamicType", " 70", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrCallValue", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrLinkageName", " 110", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "TagGenericSubrange", null, "Tag"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrDigitCount", " 95", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "TagImmutableType", null, "Tag"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrCallTailCall", " 130", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrDwoName", " 118", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrCallOrigin", " 127", null));
		mapConst.get("debug/dwarf")
				.add(new ConstGoLangApiSignature("debug/dwarf", "AttrStringLengthByteSize", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrBinaryScale", " 91", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrEndianity", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrLinkageName", null, "Attr"));
		mapMethod.get("debug/dwarf").add(new MethodGoLangApiSignature("debug/dwarf", "*Data", "AddSection",
				new String[] { "string", " []uint8" }, new String[] { "error" }));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassLocList", " 16", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrMacros", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrCallAllCalls", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassRngListsPtr", null, "Class"));
		mapConst.get("debug/dwarf")
				.add(new ConstGoLangApiSignature("debug/dwarf", "AttrCallAllTailCalls", " 124", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrCallDataValue", null, "Attr"));
		mapConst.get("debug/dwarf")
				.add(new ConstGoLangApiSignature("debug/dwarf", "AttrCallDataLocation", " 133", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrExplicit", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrMainSubprogram", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrDwoName", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrMutable", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassAddrPtr", null, "Class"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrExportSymbols", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "TagAtomicType", null, "Tag"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrEnumClass", " 109", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "TagAtomicType", " 71", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrEnumClass", null, "Attr"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrEndianity", " 101", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "AttrCallReturnPC", " 125", null));

		pkgs.add("net/textproto");
		mapConst.putIfAbsent("net/textproto", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net/textproto", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net/textproto", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net/textproto", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net/textproto", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("net/textproto").add(new MethodGoLangApiSignature("net/textproto", "MIMEHeader", "Values",
				new String[] { "string" }, new String[] { "[]string" }));

	}

}