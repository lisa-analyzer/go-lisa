package it.unive.golisa.golang.util;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import it.unive.golisa.golang.api.signature.ConstGoLangApiSignature;
import it.unive.golisa.golang.api.signature.FuncGoLangApiSignature;
import it.unive.golisa.golang.api.signature.MethodGoLangApiSignature;
import it.unive.golisa.golang.api.signature.TypeGoLangApiSignature;
import it.unive.golisa.golang.api.signature.VarGoLangApiSignature;

/**
 * Auto-generated by GoLiSA build
 */
public class Go1_15 {
	private final Map<String, Set<ConstGoLangApiSignature>> mapConst;
	private final Map<String, Set<FuncGoLangApiSignature>> mapFunc;
	private final Map<String, Set<MethodGoLangApiSignature>> mapMethod;
	private final Map<String, Set<TypeGoLangApiSignature>> mapType;
	private final Map<String, Set<VarGoLangApiSignature>> mapVar;
	private final Set<String> pkgs;

	public Go1_15() {
		pkgs = new HashSet<>();
		mapConst = new HashMap<String, Set<ConstGoLangApiSignature>>();
		mapFunc = new HashMap<String, Set<FuncGoLangApiSignature>>();
		mapMethod = new HashMap<String, Set<MethodGoLangApiSignature>>();
		mapType = new HashMap<String, Set<TypeGoLangApiSignature>>();
		mapVar = new HashMap<String, Set<VarGoLangApiSignature>>();

		build();
	}

	public Set<String> getPackages() {
		return pkgs;
	}

	public Map<String, Set<ConstGoLangApiSignature>> getMapConst() {
		return mapConst;
	}

	public Map<String, Set<FuncGoLangApiSignature>> getMapFunc() {
		return mapFunc;
	}

	public Map<String, Set<MethodGoLangApiSignature>> getMapMethod() {
		return mapMethod;
	}

	public Map<String, Set<TypeGoLangApiSignature>> getMapType() {
		return mapType;
	}

	public Map<String, Set<VarGoLangApiSignature>> getMapVar() {
		return mapVar;
	}

	private void build() {
		build0();
	}

	private void build0() {
		pkgs.add("crypto/tls");
		mapConst.putIfAbsent("crypto/tls", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("crypto/tls", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("crypto/tls", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("crypto/tls", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("crypto/tls", new HashSet<VarGoLangApiSignature>());

		mapType.get("crypto/tls").add(new TypeGoLangApiSignature("crypto/tls", "Dialer struct, NetDialer *net.Dialer"));
		mapMethod.get("crypto/tls").add(new MethodGoLangApiSignature("crypto/tls", "ClientAuthType", "String",
				new String[] { "" }, new String[] { "string" }));
		mapType.get("crypto/tls").add(new TypeGoLangApiSignature("crypto/tls", "Dialer struct"));
		mapMethod.get("crypto/tls").add(new MethodGoLangApiSignature("crypto/tls", "*Dialer", "Dial",
				new String[] { "string", " string" }, new String[] { "net.Conn", " error" }));
		mapType.get("crypto/tls").add(new TypeGoLangApiSignature("crypto/tls",
				"Config struct, VerifyConnection func(ConnectionState) error"));
		mapType.get("crypto/tls").add(new TypeGoLangApiSignature("crypto/tls", "Dialer struct, Config *Config"));
		mapMethod.get("crypto/tls").add(new MethodGoLangApiSignature("crypto/tls", "SignatureScheme", "String",
				new String[] { "" }, new String[] { "string" }));
		mapMethod.get("crypto/tls").add(new MethodGoLangApiSignature("crypto/tls", "*Dialer", "DialContext",
				new String[] { "context.Context", " string", " string" }, new String[] { "net.Conn", " error" }));
		mapMethod.get("crypto/tls").add(new MethodGoLangApiSignature("crypto/tls", "CurveID", "String",
				new String[] { "" }, new String[] { "string" }));

		pkgs.add("database/sql/driver");
		mapConst.putIfAbsent("database/sql/driver", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("database/sql/driver", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("database/sql/driver", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("database/sql/driver", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("database/sql/driver", new HashSet<VarGoLangApiSignature>());

		mapType.get("database/sql/driver")
				.add(new TypeGoLangApiSignature("database/sql/driver", "Validator interface, IsValid() bool"));
		mapType.get("database/sql/driver")
				.add(new TypeGoLangApiSignature("database/sql/driver", "Validator interface { IsValid }"));

		pkgs.add("regexp");
		mapConst.putIfAbsent("regexp", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("regexp", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("regexp", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("regexp", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("regexp", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("regexp").add(new MethodGoLangApiSignature("regexp", "*Regexp", "SubexpIndex",
				new String[] { "string" }, new String[] { "int" }));

		pkgs.add("bufio");
		mapConst.putIfAbsent("bufio", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("bufio", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("bufio", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("bufio", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("bufio", new HashSet<VarGoLangApiSignature>());

		mapVar.get("bufio").add(new VarGoLangApiSignature("bufio", "ErrBadReadCount", "error"));

		pkgs.add("os");
		mapConst.putIfAbsent("os", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("os", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("os", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("os", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("os", new HashSet<VarGoLangApiSignature>());

		mapVar.get("os").add(new VarGoLangApiSignature("os", "ErrDeadlineExceeded", "error"));
		mapMethod.get("os").add(new MethodGoLangApiSignature("os", "*File", "ReadFrom", new String[] { "io.Reader" },
				new String[] { "int64", " error" }));

		pkgs.add("math/big");
		mapConst.putIfAbsent("math/big", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("math/big", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("math/big", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("math/big", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("math/big", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Int", "FillBytes",
				new String[] { "[]uint8" }, new String[] { "[]uint8" }));

		pkgs.add("testing");
		mapConst.putIfAbsent("testing", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("testing", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("testing", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("testing", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("testing", new HashSet<VarGoLangApiSignature>());

		mapType.get("testing").add(new TypeGoLangApiSignature("testing", "TB interface, TempDir() string"));
		mapMethod.get("testing").add(new MethodGoLangApiSignature("testing", "*T", "TempDir", new String[] { "" },
				new String[] { "string" }));
		mapMethod.get("testing").add(new MethodGoLangApiSignature("testing", "*B", "TempDir", new String[] { "" },
				new String[] { "string" }));
		mapMethod.get("testing").add(new MethodGoLangApiSignature("testing", "*T", "Deadline", new String[] { "" },
				new String[] { "time.Time", " bool" }));

		pkgs.add("crypto/ed25519");
		mapConst.putIfAbsent("crypto/ed25519", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("crypto/ed25519", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("crypto/ed25519", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("crypto/ed25519", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("crypto/ed25519", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("crypto/ed25519").add(new MethodGoLangApiSignature("crypto/ed25519", "PrivateKey", "Equal",
				new String[] { "crypto.PrivateKey" }, new String[] { "bool" }));
		mapMethod.get("crypto/ed25519").add(new MethodGoLangApiSignature("crypto/ed25519", "PublicKey", "Equal",
				new String[] { "crypto.PublicKey" }, new String[] { "bool" }));

		pkgs.add("sync");
		mapConst.putIfAbsent("sync", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("sync", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("sync", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("sync", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("sync", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("sync").add(new MethodGoLangApiSignature("sync", "*Map", "LoadAndDelete",
				new String[] { "interface{}" }, new String[] { "interface{}", " bool" }));

		pkgs.add("database/sql");
		mapConst.putIfAbsent("database/sql", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("database/sql", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("database/sql", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("database/sql", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("database/sql", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("database/sql").add(new MethodGoLangApiSignature("database/sql", "*Row", "Err",
				new String[] { "" }, new String[] { "error" }));
		mapMethod.get("database/sql").add(new MethodGoLangApiSignature("database/sql", "*DB", "SetConnMaxIdleTime",
				new String[] { "time.Duration" }, new String[] { "" }));
		mapType.get("database/sql")
				.add(new TypeGoLangApiSignature("database/sql", "DBStats struct, MaxIdleTimeClosed int64"));

		pkgs.add("crypto");
		mapConst.putIfAbsent("crypto", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("crypto", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("crypto", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("crypto", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("crypto", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("crypto").add(new MethodGoLangApiSignature("crypto", "Hash", "String", new String[] { "" },
				new String[] { "string" }));

		pkgs.add("strconv");
		mapConst.putIfAbsent("strconv", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("strconv", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("strconv", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("strconv", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("strconv", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("strconv").add(new FuncGoLangApiSignature("strconv", "ParseComplex",
				new String[] { "string", " int" }, new String[] { "complex128", " error" }));
		mapFunc.get("strconv").add(new FuncGoLangApiSignature("strconv", "FormatComplex",
				new String[] { "complex128", " uint8", " int", " int" }, new String[] { "string" }));

		pkgs.add("debug/pe");
		mapConst.putIfAbsent("debug/pe", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("debug/pe", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("debug/pe", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("debug/pe", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("debug/pe", new HashSet<VarGoLangApiSignature>());

		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER", " 11", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DLLCHARACTERISTICS_APPCONTAINER", " 4096", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DLLCHARACTERISTICS_NX_COMPAT", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_FILE_EXECUTABLE_IMAGE", " 2", null));
		mapConst.get("debug/pe").add(
				new ConstGoLangApiSignature("debug/pe", "IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_SUBSYSTEM_WINDOWS_CE_GUI", null, "ideal-int"));
		mapConst.get("debug/pe").add(new ConstGoLangApiSignature("debug/pe",
				"IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE", null, "ideal-int"));
		mapConst.get("debug/pe").add(new ConstGoLangApiSignature("debug/pe", "IMAGE_FILE_RELOCS_STRIPPED", " 1", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_SUBSYSTEM_EFI_APPLICATION", " 10", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_SUBSYSTEM_EFI_ROM", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_SUBSYSTEM_WINDOWS_GUI", " 2", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA", " 32", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_SUBSYSTEM_WINDOWS_CE_GUI", " 9", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DLLCHARACTERISTICS_NO_BIND", " 2048", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_FILE_BYTES_REVERSED_LO", " 128", null));
		mapConst.get("debug/pe").add(new ConstGoLangApiSignature("debug/pe", "IMAGE_SUBSYSTEM_XBOX", " 14", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DLLCHARACTERISTICS_GUARD_CF", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_FILE_RELOCS_STRIPPED", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_SUBSYSTEM_WINDOWS_CUI", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_FILE_32BIT_MACHINE", null, "ideal-int"));
		mapConst.get("debug/pe").add(new ConstGoLangApiSignature("debug/pe", "IMAGE_SUBSYSTEM_OS2_CUI", " 5", null));
		mapConst.get("debug/pe").add(new ConstGoLangApiSignature("debug/pe", "IMAGE_FILE_SYSTEM", " 4096", null));
		mapConst.get("debug/pe").add(
				new ConstGoLangApiSignature("debug/pe", "IMAGE_DLLCHARACTERISTICS_NO_ISOLATION", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DLLCHARACTERISTICS_NO_SEH", " 1024", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_FILE_LINE_NUMS_STRIPPED", " 4", null));
		mapConst.get("debug/pe").add(new ConstGoLangApiSignature("debug/pe", "IMAGE_SUBSYSTEM_POSIX_CUI", " 7", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP", null, "ideal-int"));
		mapConst.get("debug/pe").add(new ConstGoLangApiSignature("debug/pe", "IMAGE_FILE_32BIT_MACHINE", " 256", null));
		mapConst.get("debug/pe").add(new ConstGoLangApiSignature("debug/pe",
				"IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE", " 32768", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_SUBSYSTEM_EFI_APPLICATION", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER", " 12", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DLLCHARACTERISTICS_GUARD_CF", " 16384", null));
		mapConst.get("debug/pe").add(
				new ConstGoLangApiSignature("debug/pe", "IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DLLCHARACTERISTICS_WDM_DRIVER", " 8192", null));
		mapConst.get("debug/pe").add(new ConstGoLangApiSignature("debug/pe", "IMAGE_SUBSYSTEM_NATIVE", " 1", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP", " 1024", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION", " 16", null));
		mapConst.get("debug/pe").add(
				new ConstGoLangApiSignature("debug/pe", "IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_SUBSYSTEM_UNKNOWN", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DLLCHARACTERISTICS_NO_ISOLATION", " 512", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DLLCHARACTERISTICS_NO_SEH", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_SUBSYSTEM_NATIVE", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_SUBSYSTEM_NATIVE_WINDOWS", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_FILE_LARGE_ADDRESS_AWARE", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_FILE_DEBUG_STRIPPED", " 512", null));
		mapConst.get("debug/pe").add(
				new ConstGoLangApiSignature("debug/pe", "IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY", " 128", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_SUBSYSTEM_NATIVE_WINDOWS", " 8", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_FILE_DEBUG_STRIPPED", null, "ideal-int"));
		mapConst.get("debug/pe").add(new ConstGoLangApiSignature("debug/pe", "IMAGE_FILE_DLL", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_FILE_LOCAL_SYMS_STRIPPED", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_FILE_UP_SYSTEM_ONLY", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DLLCHARACTERISTICS_WDM_DRIVER", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE", " 64", null));
		mapConst.get("debug/pe").add(new ConstGoLangApiSignature("debug/pe", "IMAGE_SUBSYSTEM_EFI_ROM", " 13", null));
		mapConst.get("debug/pe").add(
				new ConstGoLangApiSignature("debug/pe", "IMAGE_DLLCHARACTERISTICS_APPCONTAINER", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_FILE_LOCAL_SYMS_STRIPPED", " 8", null));
		mapConst.get("debug/pe").add(
				new ConstGoLangApiSignature("debug/pe", "IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_SUBSYSTEM_OS2_CUI", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_SUBSYSTEM_WINDOWS_GUI", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_FILE_NET_RUN_FROM_SWAP", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_SUBSYSTEM_XBOX", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DLLCHARACTERISTICS_NX_COMPAT", " 256", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_FILE_NET_RUN_FROM_SWAP", " 2048", null));
		mapConst.get("debug/pe").add(new ConstGoLangApiSignature("debug/pe", "IMAGE_FILE_DLL", " 8192", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_DLLCHARACTERISTICS_NO_BIND", null, "ideal-int"));
		mapConst.get("debug/pe").add(new ConstGoLangApiSignature("debug/pe", "IMAGE_SUBSYSTEM_UNKNOWN", " 0", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_FILE_BYTES_REVERSED_LO", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_SUBSYSTEM_WINDOWS_CUI", " 3", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_FILE_EXECUTABLE_IMAGE", null, "ideal-int"));
		mapConst.get("debug/pe").add(new ConstGoLangApiSignature("debug/pe", "IMAGE_FILE_SYSTEM", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_FILE_BYTES_REVERSED_HI", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_FILE_BYTES_REVERSED_HI", " 32768", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_FILE_LINE_NUMS_STRIPPED", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_FILE_AGGRESIVE_WS_TRIM", " 16", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_FILE_UP_SYSTEM_ONLY", " 16384", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_SUBSYSTEM_POSIX_CUI", null, "ideal-int"));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_FILE_LARGE_ADDRESS_AWARE", " 32", null));
		mapConst.get("debug/pe")
				.add(new ConstGoLangApiSignature("debug/pe", "IMAGE_FILE_AGGRESIVE_WS_TRIM", null, "ideal-int"));

		pkgs.add("crypto/x509");
		mapConst.putIfAbsent("crypto/x509", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("crypto/x509", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("crypto/x509", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("crypto/x509", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("crypto/x509", new HashSet<VarGoLangApiSignature>());

		mapType.get("crypto/x509")
				.add(new TypeGoLangApiSignature("crypto/x509", "RevocationList struct, ThisUpdate time.Time"));
		mapType.get("crypto/x509").add(new TypeGoLangApiSignature("crypto/x509",
				"RevocationList struct, SignatureAlgorithm SignatureAlgorithm"));
		mapFunc.get("crypto/x509")
				.add(new FuncGoLangApiSignature("crypto/x509", "CreateRevocationList",
						new String[] { "io.Reader", " *RevocationList", " *Certificate", " crypto.Signer" },
						new String[] { "[]uint8", " error" }));
		mapType.get("crypto/x509").add(new TypeGoLangApiSignature("crypto/x509",
				"RevocationList struct, RevokedCertificates []pkix.RevokedCertificate"));
		mapType.get("crypto/x509")
				.add(new TypeGoLangApiSignature("crypto/x509", "RevocationList struct, Number *big.Int"));
		mapType.get("crypto/x509").add(
				new TypeGoLangApiSignature("crypto/x509", "RevocationList struct, ExtraExtensions []pkix.Extension"));
		mapType.get("crypto/x509").add(new TypeGoLangApiSignature("crypto/x509", "RevocationList struct"));
		mapType.get("crypto/x509")
				.add(new TypeGoLangApiSignature("crypto/x509", "RevocationList struct, NextUpdate time.Time"));

		pkgs.add("crypto/ecdsa");
		mapConst.putIfAbsent("crypto/ecdsa", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("crypto/ecdsa", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("crypto/ecdsa", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("crypto/ecdsa", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("crypto/ecdsa", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("crypto/ecdsa").add(new MethodGoLangApiSignature("crypto/ecdsa", "*PrivateKey", "Equal",
				new String[] { "crypto.PrivateKey" }, new String[] { "bool" }));
		mapMethod.get("crypto/ecdsa").add(new MethodGoLangApiSignature("crypto/ecdsa", "*PublicKey", "Equal",
				new String[] { "crypto.PublicKey" }, new String[] { "bool" }));
		mapFunc.get("crypto/ecdsa").add(new FuncGoLangApiSignature("crypto/ecdsa", "SignASN1",
				new String[] { "io.Reader", " *PrivateKey", " []uint8" }, new String[] { "[]uint8", " error" }));
		mapFunc.get("crypto/ecdsa").add(new FuncGoLangApiSignature("crypto/ecdsa", "VerifyASN1",
				new String[] { "*PublicKey", " []uint8", " []uint8" }, new String[] { "bool" }));

		pkgs.add("time");
		mapConst.putIfAbsent("time", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("time", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("time", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("time", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("time", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("time").add(new MethodGoLangApiSignature("time", "*Ticker", "Reset", new String[] { "Duration" },
				new String[] { "" }));

		pkgs.add("net");
		mapConst.putIfAbsent("net", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("net").add(new MethodGoLangApiSignature("net", "*Resolver", "LookupIP",
				new String[] { "context.Context", " string", " string" }, new String[] { "[]IP", " error" }));

		pkgs.add("crypto/elliptic");
		mapConst.putIfAbsent("crypto/elliptic", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("crypto/elliptic", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("crypto/elliptic", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("crypto/elliptic", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("crypto/elliptic", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("crypto/elliptic").add(new FuncGoLangApiSignature("crypto/elliptic", "MarshalCompressed",
				new String[] { "Curve", " *big.Int", " *big.Int" }, new String[] { "[]uint8" }));
		mapFunc.get("crypto/elliptic").add(new FuncGoLangApiSignature("crypto/elliptic", "UnmarshalCompressed",
				new String[] { "Curve", " []uint8" }, new String[] { "*big.Int", " *big.Int" }));

		pkgs.add("net/url");
		mapConst.putIfAbsent("net/url", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net/url", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net/url", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net/url", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net/url", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("net/url").add(new MethodGoLangApiSignature("net/url", "*URL", "Redacted", new String[] { "" },
				new String[] { "string" }));
		mapType.get("net/url").add(new TypeGoLangApiSignature("net/url", "URL struct, RawFragment string"));
		mapMethod.get("net/url").add(new MethodGoLangApiSignature("net/url", "*URL", "EscapedFragment",
				new String[] { "" }, new String[] { "string" }));

		pkgs.add("crypto/rsa");
		mapConst.putIfAbsent("crypto/rsa", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("crypto/rsa", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("crypto/rsa", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("crypto/rsa", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("crypto/rsa", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("crypto/rsa").add(new MethodGoLangApiSignature("crypto/rsa", "*PrivateKey", "Equal",
				new String[] { "crypto.PrivateKey" }, new String[] { "bool" }));
		mapMethod.get("crypto/rsa").add(new MethodGoLangApiSignature("crypto/rsa", "*PublicKey", "Equal",
				new String[] { "crypto.PublicKey" }, new String[] { "bool" }));

	}

}