package it.unive.golisa.golang.util;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import it.unive.golisa.golang.api.signature.ConstGoLangApiSignature;
import it.unive.golisa.golang.api.signature.FuncGoLangApiSignature;
import it.unive.golisa.golang.api.signature.MethodGoLangApiSignature;
import it.unive.golisa.golang.api.signature.TypeGoLangApiSignature;
import it.unive.golisa.golang.api.signature.VarGoLangApiSignature;

/**
 * Auto-generated by GoLiSA build
 */
public class Go1_16 {
	private final Map<String, Set<ConstGoLangApiSignature>> mapConst;
	private final Map<String, Set<FuncGoLangApiSignature>> mapFunc;
	private final Map<String, Set<MethodGoLangApiSignature>> mapMethod;
	private final Map<String, Set<TypeGoLangApiSignature>> mapType;
	private final Map<String, Set<VarGoLangApiSignature>> mapVar;
	private final Set<String> pkgs;

	public Go1_16() {
		pkgs = new HashSet<>();
		mapConst = new HashMap<String, Set<ConstGoLangApiSignature>>();
		mapFunc = new HashMap<String, Set<FuncGoLangApiSignature>>();
		mapMethod = new HashMap<String, Set<MethodGoLangApiSignature>>();
		mapType = new HashMap<String, Set<TypeGoLangApiSignature>>();
		mapVar = new HashMap<String, Set<VarGoLangApiSignature>>();

		build();
	}

	public Set<String> getPackages() {
		return pkgs;
	}

	public Map<String, Set<ConstGoLangApiSignature>> getMapConst() {
		return mapConst;
	}

	public Map<String, Set<FuncGoLangApiSignature>> getMapFunc() {
		return mapFunc;
	}

	public Map<String, Set<MethodGoLangApiSignature>> getMapMethod() {
		return mapMethod;
	}

	public Map<String, Set<TypeGoLangApiSignature>> getMapType() {
		return mapType;
	}

	public Map<String, Set<VarGoLangApiSignature>> getMapVar() {
		return mapVar;
	}

	private void build() {
		build0();
	}

	private void build0() {
		pkgs.add("syscall (linux-amd64-cgo)");
		mapConst.putIfAbsent("syscall (linux-amd64-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (linux-amd64-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (linux-amd64-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (linux-amd64-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (linux-amd64-cgo)", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("syscall (linux-amd64-cgo)")
				.add(new FuncGoLangApiSignature(
						"syscall (linux-amd64-cgo)", "AllThreadsSyscall6", new String[] { "uintptr", " uintptr",
								" uintptr", " uintptr", " uintptr", " uintptr", " uintptr" },
						new String[] { "uintptr", " uintptr", " Errno" }));
		mapFunc.get("syscall (linux-amd64-cgo)").add(new FuncGoLangApiSignature("syscall (linux-amd64-cgo)", "Setegid",
				new String[] { "int" }, new String[] { "error" }));
		mapFunc.get("syscall (linux-amd64-cgo)")
				.add(new FuncGoLangApiSignature("syscall (linux-amd64-cgo)", "AllThreadsSyscall",
						new String[] { "uintptr", " uintptr", " uintptr", " uintptr" },
						new String[] { "uintptr", " uintptr", " Errno" }));
		mapFunc.get("syscall (linux-amd64-cgo)").add(new FuncGoLangApiSignature("syscall (linux-amd64-cgo)", "Seteuid",
				new String[] { "int" }, new String[] { "error" }));

		pkgs.add("syscall (linux-386)");
		mapConst.putIfAbsent("syscall (linux-386)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (linux-386)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (linux-386)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (linux-386)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (linux-386)", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("syscall (linux-386)").add(new FuncGoLangApiSignature("syscall (linux-386)", "AllThreadsSyscall6",
				new String[] { "uintptr", " uintptr", " uintptr", " uintptr", " uintptr", " uintptr", " uintptr" },
				new String[] { "uintptr", " uintptr", " Errno" }));
		mapFunc.get("syscall (linux-386)").add(new FuncGoLangApiSignature("syscall (linux-386)", "Setegid",
				new String[] { "int" }, new String[] { "error" }));
		mapFunc.get("syscall (linux-386)")
				.add(new FuncGoLangApiSignature("syscall (linux-386)", "AllThreadsSyscall",
						new String[] { "uintptr", " uintptr", " uintptr", " uintptr" },
						new String[] { "uintptr", " uintptr", " Errno" }));
		mapFunc.get("syscall (linux-386)").add(new FuncGoLangApiSignature("syscall (linux-386)", "Seteuid",
				new String[] { "int" }, new String[] { "error" }));

		pkgs.add("flag, func Func(string, string");
		mapConst.putIfAbsent("flag, func Func(string, string", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("flag, func Func(string, string", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("flag, func Func(string, string", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("flag, func Func(string, string", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("flag, func Func(string, string", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("flag, func Func(string, string").add(new FuncGoLangApiSignature("flag", "Func",
				new String[] { "string", " string", " func(string" }, new String[] { "error)" }));

		pkgs.add("log");
		mapConst.putIfAbsent("log", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("log", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("log", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("log", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("log", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("log")
				.add(new FuncGoLangApiSignature("log", "Default", new String[] { "" }, new String[] { "*Logger" }));

		pkgs.add("go/build/constraint");
		mapConst.putIfAbsent("go/build/constraint", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("go/build/constraint", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("go/build/constraint", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("go/build/constraint", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("go/build/constraint", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("go/build/constraint").add(new MethodGoLangApiSignature("go/build/constraint", "*SyntaxError",
				"Error", new String[] { "" }, new String[] { "string" }));
		mapType.get("go/build/constraint")
				.add(new TypeGoLangApiSignature("go/build/constraint", "OrExpr struct, X Expr"));
		mapFunc.get("go/build/constraint").add(new FuncGoLangApiSignature("go/build/constraint", "Parse",
				new String[] { "string" }, new String[] { "Expr", " error" }));
		mapFunc.get("go/build/constraint").add(new FuncGoLangApiSignature("go/build/constraint", "PlusBuildLines",
				new String[] { "Expr" }, new String[] { "[]string", " error" }));
		mapMethod.get("go/build/constraint").add(new MethodGoLangApiSignature("go/build/constraint", "*TagExpr", "Eval",
				new String[] { "func(string" }, new String[] { "bool) bool" }));
		mapMethod.get("go/build/constraint").add(new MethodGoLangApiSignature("go/build/constraint", "*NotExpr",
				"String", new String[] { "" }, new String[] { "string" }));
		mapFunc.get("go/build/constraint").add(new FuncGoLangApiSignature("go/build/constraint", "IsPlusBuild",
				new String[] { "string" }, new String[] { "bool" }));
		mapMethod.get("go/build/constraint").add(new MethodGoLangApiSignature("go/build/constraint", "*NotExpr", "Eval",
				new String[] { "func(string" }, new String[] { "bool) bool" }));
		mapType.get("go/build/constraint").add(new TypeGoLangApiSignature("go/build/constraint", "AndExpr struct"));
		mapMethod.get("go/build/constraint").add(new MethodGoLangApiSignature("go/build/constraint", "*AndExpr",
				"String", new String[] { "" }, new String[] { "string" }));
		mapType.get("go/build/constraint")
				.add(new TypeGoLangApiSignature("go/build/constraint", "Expr interface, String() string"));
		mapMethod.get("go/build/constraint").add(new MethodGoLangApiSignature("go/build/constraint", "*TagExpr",
				"String", new String[] { "" }, new String[] { "string" }));
		mapType.get("go/build/constraint")
				.add(new TypeGoLangApiSignature("go/build/constraint", "OrExpr struct, Y Expr"));
		mapType.get("go/build/constraint").add(new TypeGoLangApiSignature("go/build/constraint", "TagExpr struct"));
		mapMethod.get("go/build/constraint").add(new MethodGoLangApiSignature("go/build/constraint", "*OrExpr", "Eval",
				new String[] { "func(string" }, new String[] { "bool) bool" }));
		mapType.get("go/build/constraint")
				.add(new TypeGoLangApiSignature("go/build/constraint", "Expr interface, Eval(func(string) bool) bool"));
		mapType.get("go/build/constraint").add(new TypeGoLangApiSignature("go/build/constraint", "SyntaxError struct"));
		mapFunc.get("go/build/constraint").add(new FuncGoLangApiSignature("go/build/constraint", "IsGoBuild",
				new String[] { "string" }, new String[] { "bool" }));
		mapType.get("go/build/constraint").add(new TypeGoLangApiSignature("go/build/constraint", "OrExpr struct"));
		mapType.get("go/build/constraint")
				.add(new TypeGoLangApiSignature("go/build/constraint", "Expr interface, unexported methods"));
		mapMethod.get("go/build/constraint").add(new MethodGoLangApiSignature("go/build/constraint", "*OrExpr",
				"String", new String[] { "" }, new String[] { "string" }));
		mapType.get("go/build/constraint")
				.add(new TypeGoLangApiSignature("go/build/constraint", "AndExpr struct, Y Expr"));
		mapType.get("go/build/constraint")
				.add(new TypeGoLangApiSignature("go/build/constraint", "NotExpr struct, X Expr"));
		mapType.get("go/build/constraint")
				.add(new TypeGoLangApiSignature("go/build/constraint", "SyntaxError struct, Err string"));
		mapType.get("go/build/constraint")
				.add(new TypeGoLangApiSignature("go/build/constraint", "TagExpr struct, Tag string"));
		mapMethod.get("go/build/constraint").add(new MethodGoLangApiSignature("go/build/constraint", "*AndExpr", "Eval",
				new String[] { "func(string" }, new String[] { "bool) bool" }));
		mapType.get("go/build/constraint")
				.add(new TypeGoLangApiSignature("go/build/constraint", "SyntaxError struct, Offset int"));
		mapType.get("go/build/constraint")
				.add(new TypeGoLangApiSignature("go/build/constraint", "AndExpr struct, X Expr"));
		mapType.get("go/build/constraint").add(new TypeGoLangApiSignature("go/build/constraint", "NotExpr struct"));

		pkgs.add("syscall (linux-arm-cgo)");
		mapConst.putIfAbsent("syscall (linux-arm-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (linux-arm-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (linux-arm-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (linux-arm-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (linux-arm-cgo)", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("syscall (linux-arm-cgo)")
				.add(new FuncGoLangApiSignature(
						"syscall (linux-arm-cgo)", "AllThreadsSyscall6", new String[] { "uintptr", " uintptr",
								" uintptr", " uintptr", " uintptr", " uintptr", " uintptr" },
						new String[] { "uintptr", " uintptr", " Errno" }));
		mapFunc.get("syscall (linux-arm-cgo)").add(new FuncGoLangApiSignature("syscall (linux-arm-cgo)", "Setegid",
				new String[] { "int" }, new String[] { "error" }));
		mapFunc.get("syscall (linux-arm-cgo)")
				.add(new FuncGoLangApiSignature("syscall (linux-arm-cgo)", "AllThreadsSyscall",
						new String[] { "uintptr", " uintptr", " uintptr", " uintptr" },
						new String[] { "uintptr", " uintptr", " Errno" }));
		mapFunc.get("syscall (linux-arm-cgo)").add(new FuncGoLangApiSignature("syscall (linux-arm-cgo)", "Seteuid",
				new String[] { "int" }, new String[] { "error" }));

		pkgs.add("runtime/metrics");
		mapConst.putIfAbsent("runtime/metrics", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("runtime/metrics", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("runtime/metrics", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("runtime/metrics", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("runtime/metrics", new HashSet<VarGoLangApiSignature>());

		mapConst.get("runtime/metrics")
				.add(new ConstGoLangApiSignature("runtime/metrics", "KindBad", null, "ValueKind"));
		mapType.get("runtime/metrics").add(new TypeGoLangApiSignature("runtime/metrics", "Sample struct, Value Value"));
		mapType.get("runtime/metrics").add(new TypeGoLangApiSignature("runtime/metrics", "Sample struct"));
		mapType.get("runtime/metrics").add(new TypeGoLangApiSignature("runtime/metrics", "Sample struct, Name string"));
		mapMethod.get("runtime/metrics").add(new MethodGoLangApiSignature("runtime/metrics", "Value", "Float64",
				new String[] { "" }, new String[] { "float64" }));
		mapMethod.get("runtime/metrics").add(new MethodGoLangApiSignature("runtime/metrics", "Value", "Uint64",
				new String[] { "" }, new String[] { "uint64" }));
		mapType.get("runtime/metrics")
				.add(new TypeGoLangApiSignature("runtime/metrics", "Description struct, Cumulative bool"));
		mapType.get("runtime/metrics").add(new TypeGoLangApiSignature("runtime/metrics", "ValueKind int"));
		mapType.get("runtime/metrics")
				.add(new TypeGoLangApiSignature("runtime/metrics", "Float64Histogram struct, Buckets []float64"));
		mapType.get("runtime/metrics")
				.add(new TypeGoLangApiSignature("runtime/metrics", "Description struct, Name string"));
		mapMethod.get("runtime/metrics").add(new MethodGoLangApiSignature("runtime/metrics", "Value",
				"Float64Histogram", new String[] { "" }, new String[] { "*Float64Histogram" }));
		mapMethod.get("runtime/metrics").add(new MethodGoLangApiSignature("runtime/metrics", "Value", "Kind",
				new String[] { "" }, new String[] { "ValueKind" }));
		mapType.get("runtime/metrics").add(new TypeGoLangApiSignature("runtime/metrics", "Value struct"));
		mapFunc.get("runtime/metrics").add(new FuncGoLangApiSignature("runtime/metrics", "Read",
				new String[] { "[]Sample" }, new String[] { "" }));
		mapConst.get("runtime/metrics")
				.add(new ConstGoLangApiSignature("runtime/metrics", "KindFloat64Histogram", null, "ValueKind"));
		mapType.get("runtime/metrics")
				.add(new TypeGoLangApiSignature("runtime/metrics", "Description struct, Description string"));
		mapType.get("runtime/metrics")
				.add(new TypeGoLangApiSignature("runtime/metrics", "Float64Histogram struct, Counts []uint64"));
		mapConst.get("runtime/metrics")
				.add(new ConstGoLangApiSignature("runtime/metrics", "KindFloat64", null, "ValueKind"));
		mapConst.get("runtime/metrics")
				.add(new ConstGoLangApiSignature("runtime/metrics", "KindFloat64Histogram", " 3", null));
		mapConst.get("runtime/metrics").add(new ConstGoLangApiSignature("runtime/metrics", "KindBad", " 0", null));
		mapConst.get("runtime/metrics").add(new ConstGoLangApiSignature("runtime/metrics", "KindFloat64", " 2", null));
		mapConst.get("runtime/metrics").add(new ConstGoLangApiSignature("runtime/metrics", "KindUint64", " 1", null));
		mapType.get("runtime/metrics")
				.add(new TypeGoLangApiSignature("runtime/metrics", "Description struct, Kind ValueKind"));
		mapType.get("runtime/metrics").add(new TypeGoLangApiSignature("runtime/metrics", "Description struct"));
		mapFunc.get("runtime/metrics").add(new FuncGoLangApiSignature("runtime/metrics", "All", new String[] { "" },
				new String[] { "[]Description" }));
		mapType.get("runtime/metrics").add(new TypeGoLangApiSignature("runtime/metrics", "Float64Histogram struct"));
		mapConst.get("runtime/metrics")
				.add(new ConstGoLangApiSignature("runtime/metrics", "KindUint64", null, "ValueKind"));

		pkgs.add("flag, method (*FlagSet) Func(string, string");
		mapConst.putIfAbsent("flag, method (*FlagSet) Func(string, string", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("flag, method (*FlagSet) Func(string, string", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("flag, method (*FlagSet) Func(string, string", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("flag, method (*FlagSet) Func(string, string", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("flag, method (*FlagSet) Func(string, string", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("flag, method (*FlagSet) Func(string, string").add(new MethodGoLangApiSignature("flag",
				"*FlagSet", "Func", new String[] { "string", " string", " func(string" }, new String[] { "error)" }));

		pkgs.add("path/filepath");
		mapConst.putIfAbsent("path/filepath", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("path/filepath", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("path/filepath", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("path/filepath", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("path/filepath", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("path/filepath").add(new FuncGoLangApiSignature("path/filepath", "WalkDir",
				new String[] { "string", " fs.WalkDirFunc" }, new String[] { "error" }));

		pkgs.add("testing/iotest");
		mapConst.putIfAbsent("testing/iotest", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("testing/iotest", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("testing/iotest", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("testing/iotest", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("testing/iotest", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("testing/iotest").add(new FuncGoLangApiSignature("testing/iotest", "TestReader",
				new String[] { "io.Reader", " []uint8" }, new String[] { "error" }));
		mapFunc.get("testing/iotest").add(new FuncGoLangApiSignature("testing/iotest", "ErrReader",
				new String[] { "error" }, new String[] { "io.Reader" }));

		pkgs.add("crypto/x509");
		mapConst.putIfAbsent("crypto/x509", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("crypto/x509", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("crypto/x509", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("crypto/x509", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("crypto/x509", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("crypto/x509").add(new MethodGoLangApiSignature("crypto/x509", "SystemRootsError", "Unwrap",
				new String[] { "" }, new String[] { "error" }));

		pkgs.add("embed");
		mapConst.putIfAbsent("embed", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("embed", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("embed", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("embed", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("embed", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("embed").add(new MethodGoLangApiSignature("embed", "FS", "ReadDir", new String[] { "string" },
				new String[] { "[]fs.DirEntry", " error" }));
		mapMethod.get("embed").add(new MethodGoLangApiSignature("embed", "FS", "ReadFile", new String[] { "string" },
				new String[] { "[]uint8", " error" }));
		mapType.get("embed").add(new TypeGoLangApiSignature("embed", "FS struct"));
		mapMethod.get("embed").add(new MethodGoLangApiSignature("embed", "FS", "Open", new String[] { "string" },
				new String[] { "fs.File", " error" }));

		pkgs.add("net");
		mapConst.putIfAbsent("net", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net", new HashSet<VarGoLangApiSignature>());

		mapVar.get("net").add(new VarGoLangApiSignature("net", "ErrClosed", "error"));

		pkgs.add("syscall (windows-386)");
		mapConst.putIfAbsent("syscall (windows-386)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (windows-386)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (windows-386)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (windows-386)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (windows-386)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (windows-386)")
				.add(new TypeGoLangApiSignature("syscall (windows-386)", "SysProcAttr struct, NoInheritHandles bool"));
		mapMethod.get("syscall (windows-386)").add(new MethodGoLangApiSignature("syscall (windows-386)", "*DLLError",
				"Unwrap", new String[] { "" }, new String[] { "error" }));

		pkgs.add("testing/fstest");
		mapConst.putIfAbsent("testing/fstest", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("testing/fstest", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("testing/fstest", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("testing/fstest", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("testing/fstest", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("testing/fstest").add(new MethodGoLangApiSignature("testing/fstest", "MapFS", "Glob",
				new String[] { "string" }, new String[] { "[]string", " error" }));
		mapType.get("testing/fstest")
				.add(new TypeGoLangApiSignature("testing/fstest", "MapFile struct, ModTime time.Time"));
		mapMethod.get("testing/fstest").add(new MethodGoLangApiSignature("testing/fstest", "MapFS", "Stat",
				new String[] { "string" }, new String[] { "fs.FileInfo", " error" }));
		mapType.get("testing/fstest").add(new TypeGoLangApiSignature("testing/fstest", "MapFile struct, Data []uint8"));
		mapMethod.get("testing/fstest").add(new MethodGoLangApiSignature("testing/fstest", "MapFS", "ReadFile",
				new String[] { "string" }, new String[] { "[]uint8", " error" }));
		mapType.get("testing/fstest").add(new TypeGoLangApiSignature("testing/fstest", "MapFS map[string]*MapFile"));
		mapFunc.get("testing/fstest").add(new FuncGoLangApiSignature("testing/fstest", "TestFS",
				new String[] { "fs.FS", " ...string" }, new String[] { "error" }));
		mapMethod.get("testing/fstest").add(new MethodGoLangApiSignature("testing/fstest", "MapFS", "ReadDir",
				new String[] { "string" }, new String[] { "[]fs.DirEntry", " error" }));
		mapMethod.get("testing/fstest").add(new MethodGoLangApiSignature("testing/fstest", "MapFS", "Sub",
				new String[] { "string" }, new String[] { "fs.FS", " error" }));
		mapType.get("testing/fstest")
				.add(new TypeGoLangApiSignature("testing/fstest", "MapFile struct, Mode fs.FileMode"));
		mapType.get("testing/fstest")
				.add(new TypeGoLangApiSignature("testing/fstest", "MapFile struct, Sys interface{}"));
		mapType.get("testing/fstest").add(new TypeGoLangApiSignature("testing/fstest", "MapFile struct"));
		mapMethod.get("testing/fstest").add(new MethodGoLangApiSignature("testing/fstest", "MapFS", "Open",
				new String[] { "string" }, new String[] { "fs.File", " error" }));

		pkgs.add("os");
		mapConst.putIfAbsent("os", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("os", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("os", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("os", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("os", new HashSet<VarGoLangApiSignature>());

		mapConst.get("os").add(new ConstGoLangApiSignature("os", "ModeSetgid", null, "fs.FileMode"));
		mapConst.get("os").add(new ConstGoLangApiSignature("os", "ModeDir", null, "fs.FileMode"));
		mapConst.get("os").add(new ConstGoLangApiSignature("os", "ModeSymlink", null, "fs.FileMode"));
		mapMethod.get("os").add(new MethodGoLangApiSignature("os", "*File", "Stat", new String[] { "" },
				new String[] { "fs.FileInfo", " error" }));
		mapConst.get("os").add(new ConstGoLangApiSignature("os", "ModeSticky", null, "fs.FileMode"));
		mapType.get("os").add(new TypeGoLangApiSignature("os", "PathError = fs.PathError"));
		mapConst.get("os").add(new ConstGoLangApiSignature("os", "ModeSetuid", null, "fs.FileMode"));
		mapType.get("os").add(new TypeGoLangApiSignature("os", "DirEntry = fs.DirEntry"));
		mapConst.get("os").add(new ConstGoLangApiSignature("os", "ModeType", null, "fs.FileMode"));
		mapMethod.get("os").add(new MethodGoLangApiSignature("os", "*File", "ReadDir", new String[] { "int" },
				new String[] { "[]fs.DirEntry", " error" }));
		mapFunc.get("os").add(new FuncGoLangApiSignature("os", "ReadFile", new String[] { "string" },
				new String[] { "[]uint8", " error" }));
		mapFunc.get("os").add(new FuncGoLangApiSignature("os", "Chmod", new String[] { "string", " fs.FileMode" },
				new String[] { "error" }));
		mapConst.get("os").add(new ConstGoLangApiSignature("os", "ModeAppend", null, "fs.FileMode"));
		mapType.get("os").add(new TypeGoLangApiSignature("os", "FileInfo = fs.FileInfo"));
		mapFunc.get("os").add(new FuncGoLangApiSignature("os", "MkdirTemp", new String[] { "string", " string" },
				new String[] { "string", " error" }));
		mapConst.get("os").add(new ConstGoLangApiSignature("os", "ModeTemporary", null, "fs.FileMode"));
		mapConst.get("os").add(new ConstGoLangApiSignature("os", "ModeSocket", null, "fs.FileMode"));
		mapMethod.get("os").add(new MethodGoLangApiSignature("os", "*File", "Readdir", new String[] { "int" },
				new String[] { "[]fs.FileInfo", " error" }));
		mapConst.get("os").add(new ConstGoLangApiSignature("os", "ModeExclusive", null, "fs.FileMode"));
		mapFunc.get("os").add(new FuncGoLangApiSignature("os", "Mkdir", new String[] { "string", " fs.FileMode" },
				new String[] { "error" }));
		mapFunc.get("os").add(new FuncGoLangApiSignature("os", "Stat", new String[] { "string" },
				new String[] { "fs.FileInfo", " error" }));
		mapConst.get("os").add(new ConstGoLangApiSignature("os", "ModeDevice", null, "fs.FileMode"));
		mapType.get("os").add(new TypeGoLangApiSignature("os", "FileMode = fs.FileMode"));
		mapConst.get("os").add(new ConstGoLangApiSignature("os", "ModeIrregular", null, "fs.FileMode"));
		mapFunc.get("os").add(new FuncGoLangApiSignature("os", "ReadDir", new String[] { "string" },
				new String[] { "[]fs.DirEntry", " error" }));
		mapVar.get("os").add(new VarGoLangApiSignature("os", "ErrProcessDone", "error"));
		mapConst.get("os").add(new ConstGoLangApiSignature("os", "ModeNamedPipe", null, "fs.FileMode"));
		mapFunc.get("os").add(new FuncGoLangApiSignature("os", "WriteFile",
				new String[] { "string", " []uint8", " fs.FileMode" }, new String[] { "error" }));
		mapFunc.get("os")
				.add(new FuncGoLangApiSignature("os", "DirFS", new String[] { "string" }, new String[] { "fs.FS" }));
		mapFunc.get("os").add(new FuncGoLangApiSignature("os", "Lstat", new String[] { "string" },
				new String[] { "fs.FileInfo", " error" }));
		mapFunc.get("os").add(new FuncGoLangApiSignature("os", "MkdirAll", new String[] { "string", " fs.FileMode" },
				new String[] { "error" }));
		mapFunc.get("os").add(new FuncGoLangApiSignature("os", "OpenFile",
				new String[] { "string", " int", " fs.FileMode" }, new String[] { "*File", " error" }));
		mapMethod.get("os").add(new MethodGoLangApiSignature("os", "*File", "Chmod", new String[] { "fs.FileMode" },
				new String[] { "error" }));
		mapFunc.get("os").add(new FuncGoLangApiSignature("os", "CreateTemp", new String[] { "string", " string" },
				new String[] { "*File", " error" }));
		mapConst.get("os").add(new ConstGoLangApiSignature("os", "ModeCharDevice", null, "fs.FileMode"));
		mapConst.get("os").add(new ConstGoLangApiSignature("os", "ModePerm", null, "fs.FileMode"));
		mapFunc.get("os").add(new FuncGoLangApiSignature("os", "SameFile",
				new String[] { "fs.FileInfo", " fs.FileInfo" }, new String[] { "bool" }));

		pkgs.add("io");
		mapConst.putIfAbsent("io", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("io", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("io", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("io", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("io", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("io").add(new FuncGoLangApiSignature("io", "NopCloser", new String[] { "Reader" },
				new String[] { "ReadCloser" }));
		mapType.get("io")
				.add(new TypeGoLangApiSignature("io", "ReadSeekCloser interface, Seek(int64, int) (int64, error)"));
		mapVar.get("io").add(new VarGoLangApiSignature("io", "Discard", "Writer"));
		mapType.get("io").add(new TypeGoLangApiSignature("io", "ReadSeekCloser interface, Read([]uint8) (int, error)"));
		mapType.get("io").add(new TypeGoLangApiSignature("io", "ReadSeekCloser interface, Close() error"));
		mapType.get("io").add(new TypeGoLangApiSignature("io", "ReadSeekCloser interface { Close, Read, Seek }"));
		mapFunc.get("io").add(new FuncGoLangApiSignature("io", "ReadAll", new String[] { "Reader" },
				new String[] { "[]uint8", " error" }));

		pkgs.add("text/template");
		mapConst.putIfAbsent("text/template", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("text/template", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("text/template", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("text/template", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("text/template", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("text/template").add(new MethodGoLangApiSignature("text/template", "*Template", "ParseFS",
				new String[] { "fs.FS", " ...string" }, new String[] { "*Template", " error" }));
		mapFunc.get("text/template").add(new FuncGoLangApiSignature("text/template", "ParseFS",
				new String[] { "fs.FS", " ...string" }, new String[] { "*Template", " error" }));

		pkgs.add("archive/zip");
		mapConst.putIfAbsent("archive/zip", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("archive/zip", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("archive/zip", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("archive/zip", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("archive/zip", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("archive/zip").add(new MethodGoLangApiSignature("archive/zip", "*Reader", "Open",
				new String[] { "string" }, new String[] { "fs.File", " error" }));
		mapMethod.get("archive/zip").add(new MethodGoLangApiSignature("archive/zip", "*ReadCloser", "Open",
				new String[] { "string" }, new String[] { "fs.File", " error" }));

		pkgs.add("net/http");
		mapConst.putIfAbsent("net/http", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net/http", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net/http", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net/http", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net/http", new HashSet<VarGoLangApiSignature>());

		mapType.get("net/http").add(new TypeGoLangApiSignature("net/http",
				"Transport struct, GetProxyConnectHeader func(context.Context, *url.URL, string) (Header, error)"));
		mapFunc.get("net/http").add(
				new FuncGoLangApiSignature("net/http", "FS", new String[] { "fs.FS" }, new String[] { "FileSystem" }));

		pkgs.add("io/fs");
		mapConst.putIfAbsent("io/fs", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("io/fs", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("io/fs", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("io/fs", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("io/fs", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("io/fs").add(new MethodGoLangApiSignature("io/fs", "FileMode", "Perm", new String[] { "" },
				new String[] { "FileMode" }));
		mapConst.get("io/fs").add(new ConstGoLangApiSignature("io/fs", "ModeSymlink", null, "FileMode"));
		mapVar.get("io/fs").add(new VarGoLangApiSignature("io/fs", "ErrClosed", "error"));
		mapType.get("io/fs").add(new TypeGoLangApiSignature("io/fs", "ReadDirFile interface, Close() error"));
		mapType.get("io/fs").add(new TypeGoLangApiSignature("io/fs", "File interface, Stat() (FileInfo, error)"));
		mapType.get("io/fs")
				.add(new TypeGoLangApiSignature("io/fs", "ReadFileFS interface, ReadFile(string) ([]uint8, error)"));
		mapType.get("io/fs").add(new TypeGoLangApiSignature("io/fs", "FileInfo interface, ModTime() time.Time"));
		mapType.get("io/fs").add(new TypeGoLangApiSignature("io/fs", "SubFS interface, Sub(string) (FS, error)"));
		mapType.get("io/fs").add(new TypeGoLangApiSignature("io/fs", "DirEntry interface, Name() string"));
		mapType.get("io/fs")
				.add(new TypeGoLangApiSignature("io/fs", "ReadDirFS interface, ReadDir(string) ([]DirEntry, error)"));
		mapConst.get("io/fs").add(new ConstGoLangApiSignature("io/fs", "ModeSetuid", null, "FileMode"));
		mapFunc.get("io/fs").add(new FuncGoLangApiSignature("io/fs", "ReadDir", new String[] { "FS", " string" },
				new String[] { "[]DirEntry", " error" }));
		mapConst.get("io/fs").add(new ConstGoLangApiSignature("io/fs", "ModeIrregular", " 524288", null));
		mapFunc.get("io/fs").add(new FuncGoLangApiSignature("io/fs", "Sub", new String[] { "FS", " string" },
				new String[] { "FS", " error" }));
		mapMethod.get("io/fs").add(new MethodGoLangApiSignature("io/fs", "*PathError", "Timeout", new String[] { "" },
				new String[] { "bool" }));
		mapType.get("io/fs").add(new TypeGoLangApiSignature("io/fs", "SubFS interface, Open(string) (File, error)"));
		mapType.get("io/fs").add(new TypeGoLangApiSignature("io/fs", "FileMode uint32"));
		mapType.get("io/fs").add(new TypeGoLangApiSignature("io/fs", "StatFS interface, Open(string) (File, error)"));
		mapType.get("io/fs")
				.add(new TypeGoLangApiSignature("io/fs", "ReadFileFS interface, Open(string) (File, error)"));
		mapVar.get("io/fs").add(new VarGoLangApiSignature("io/fs", "SkipDir", "error"));
		mapConst.get("io/fs").add(new ConstGoLangApiSignature("io/fs", "ModeDir", null, "FileMode"));
		mapConst.get("io/fs").add(new ConstGoLangApiSignature("io/fs", "ModeSetgid", " 4194304", null));
		mapConst.get("io/fs").add(new ConstGoLangApiSignature("io/fs", "ModeSticky", " 1048576", null));
		mapType.get("io/fs").add(new TypeGoLangApiSignature("io/fs", "FS interface { Open }"));
		mapType.get("io/fs").add(
				new TypeGoLangApiSignature("io/fs", "FileInfo interface { IsDir, ModTime, Mode, Name, Size, Sys }"));
		mapConst.get("io/fs").add(new ConstGoLangApiSignature("io/fs", "ModeAppend", null, "FileMode"));
		mapFunc.get("io/fs").add(new FuncGoLangApiSignature("io/fs", "WalkDir",
				new String[] { "FS", " string", " WalkDirFunc" }, new String[] { "error" }));
		mapConst.get("io/fs").add(new ConstGoLangApiSignature("io/fs", "ModeCharDevice", " 2097152", null));
		mapFunc.get("io/fs").add(new FuncGoLangApiSignature("io/fs", "Glob", new String[] { "FS", " string" },
				new String[] { "[]string", " error" }));
		mapMethod.get("io/fs").add(new MethodGoLangApiSignature("io/fs", "FileMode", "Type", new String[] { "" },
				new String[] { "FileMode" }));
		mapType.get("io/fs").add(new TypeGoLangApiSignature("io/fs", "File interface, Read([]uint8) (int, error)"));
		mapConst.get("io/fs").add(new ConstGoLangApiSignature("io/fs", "ModeSocket", " 16777216", null));
		mapType.get("io/fs").add(new TypeGoLangApiSignature("io/fs", "PathError struct, Err error"));
		mapType.get("io/fs").add(new TypeGoLangApiSignature("io/fs", "GlobFS interface, Open(string) (File, error)"));
		mapType.get("io/fs").add(new TypeGoLangApiSignature("io/fs", "PathError struct"));
		mapType.get("io/fs").add(new TypeGoLangApiSignature("io/fs", "SubFS interface { Open, Sub }"));
		mapType.get("io/fs").add(new TypeGoLangApiSignature("io/fs", "FileInfo interface, Mode() FileMode"));
		mapVar.get("io/fs").add(new VarGoLangApiSignature("io/fs", "ErrInvalid", "error"));
		mapType.get("io/fs").add(new TypeGoLangApiSignature("io/fs", "FileInfo interface, IsDir() bool"));
		mapConst.get("io/fs").add(new ConstGoLangApiSignature("io/fs", "ModeNamedPipe", " 33554432", null));
		mapFunc.get("io/fs").add(new FuncGoLangApiSignature("io/fs", "ReadFile", new String[] { "FS", " string" },
				new String[] { "[]uint8", " error" }));
		mapType.get("io/fs").add(new TypeGoLangApiSignature("io/fs", "FS interface, Open(string) (File, error)"));
		mapType.get("io/fs").add(new TypeGoLangApiSignature("io/fs", "DirEntry interface, IsDir() bool"));
		mapVar.get("io/fs").add(new VarGoLangApiSignature("io/fs", "ErrNotExist", "error"));
		mapConst.get("io/fs").add(new ConstGoLangApiSignature("io/fs", "ModeDevice", " 67108864", null));
		mapConst.get("io/fs").add(new ConstGoLangApiSignature("io/fs", "ModeSetgid", null, "FileMode"));
		mapMethod.get("io/fs").add(new MethodGoLangApiSignature("io/fs", "FileMode", "IsDir", new String[] { "" },
				new String[] { "bool" }));
		mapType.get("io/fs").add(new TypeGoLangApiSignature("io/fs", "DirEntry interface { Info, IsDir, Name, Type }"));
		mapType.get("io/fs")
				.add(new TypeGoLangApiSignature("io/fs", "ReadDirFile interface, Read([]uint8) (int, error)"));
		mapType.get("io/fs")
				.add(new TypeGoLangApiSignature("io/fs", "ReadDirFile interface, ReadDir(int) ([]DirEntry, error)"));
		mapMethod.get("io/fs").add(new MethodGoLangApiSignature("io/fs", "FileMode", "String", new String[] { "" },
				new String[] { "string" }));
		mapMethod.get("io/fs").add(new MethodGoLangApiSignature("io/fs", "*PathError", "Error", new String[] { "" },
				new String[] { "string" }));
		mapConst.get("io/fs").add(new ConstGoLangApiSignature("io/fs", "ModeType", null, "FileMode"));
		mapType.get("io/fs").add(new TypeGoLangApiSignature("io/fs", "DirEntry interface, Info() (FileInfo, error)"));
		mapType.get("io/fs").add(new TypeGoLangApiSignature("io/fs", "StatFS interface { Open, Stat }"));
		mapConst.get("io/fs").add(new ConstGoLangApiSignature("io/fs", "ModeAppend", " 1073741824", null));
		mapConst.get("io/fs").add(new ConstGoLangApiSignature("io/fs", "ModeSetuid", " 8388608", null));
		mapConst.get("io/fs").add(new ConstGoLangApiSignature("io/fs", "ModeDir", " 2147483648", null));
		mapVar.get("io/fs").add(new VarGoLangApiSignature("io/fs", "ErrPermission", "error"));
		mapConst.get("io/fs").add(new ConstGoLangApiSignature("io/fs", "ModeSticky", null, "FileMode"));
		mapType.get("io/fs")
				.add(new TypeGoLangApiSignature("io/fs", "GlobFS interface, Glob(string) ([]string, error)"));
		mapFunc.get("io/fs").add(new FuncGoLangApiSignature("io/fs", "Stat", new String[] { "FS", " string" },
				new String[] { "FileInfo", " error" }));
		mapConst.get("io/fs").add(new ConstGoLangApiSignature("io/fs", "ModeCharDevice", null, "FileMode"));
		mapConst.get("io/fs").add(new ConstGoLangApiSignature("io/fs", "ModeDevice", null, "FileMode"));
		mapConst.get("io/fs").add(new ConstGoLangApiSignature("io/fs", "ModePerm", " 511", null));
		mapConst.get("io/fs").add(new ConstGoLangApiSignature("io/fs", "ModeTemporary", " 268435456", null));
		mapType.get("io/fs")
				.add(new TypeGoLangApiSignature("io/fs", "ReadDirFile interface, Stat() (FileInfo, error)"));
		mapType.get("io/fs").add(new TypeGoLangApiSignature("io/fs", "GlobFS interface { Glob, Open }"));
		mapConst.get("io/fs").add(new ConstGoLangApiSignature("io/fs", "ModeSocket", null, "FileMode"));
		mapType.get("io/fs")
				.add(new TypeGoLangApiSignature("io/fs", "WalkDirFunc func(string, DirEntry, error) error"));
		mapType.get("io/fs").add(new TypeGoLangApiSignature("io/fs", "ReadFileFS interface { Open, ReadFile }"));
		mapVar.get("io/fs").add(new VarGoLangApiSignature("io/fs", "ErrExist", "error"));
		mapType.get("io/fs")
				.add(new TypeGoLangApiSignature("io/fs", "ReadDirFS interface, Open(string) (File, error)"));
		mapType.get("io/fs")
				.add(new TypeGoLangApiSignature("io/fs", "StatFS interface, Stat(string) (FileInfo, error)"));
		mapConst.get("io/fs").add(new ConstGoLangApiSignature("io/fs", "ModeNamedPipe", null, "FileMode"));
		mapConst.get("io/fs").add(new ConstGoLangApiSignature("io/fs", "ModePerm", null, "FileMode"));
		mapType.get("io/fs").add(new TypeGoLangApiSignature("io/fs", "DirEntry interface, Type() FileMode"));
		mapType.get("io/fs").add(new TypeGoLangApiSignature("io/fs", "PathError struct, Path string"));
		mapConst.get("io/fs").add(new ConstGoLangApiSignature("io/fs", "ModeExclusive", null, "FileMode"));
		mapConst.get("io/fs").add(new ConstGoLangApiSignature("io/fs", "ModeIrregular", null, "FileMode"));
		mapType.get("io/fs").add(new TypeGoLangApiSignature("io/fs", "File interface { Close, Read, Stat }"));
		mapType.get("io/fs").add(new TypeGoLangApiSignature("io/fs", "File interface, Close() error"));
		mapConst.get("io/fs").add(new ConstGoLangApiSignature("io/fs", "ModeSymlink", " 134217728", null));
		mapType.get("io/fs").add(new TypeGoLangApiSignature("io/fs", "ReadDirFS interface { Open, ReadDir }"));
		mapMethod.get("io/fs").add(new MethodGoLangApiSignature("io/fs", "FileMode", "IsRegular", new String[] { "" },
				new String[] { "bool" }));
		mapType.get("io/fs").add(new TypeGoLangApiSignature("io/fs", "PathError struct, Op string"));
		mapConst.get("io/fs").add(new ConstGoLangApiSignature("io/fs", "ModeExclusive", " 536870912", null));
		mapType.get("io/fs")
				.add(new TypeGoLangApiSignature("io/fs", "ReadDirFile interface { Close, Read, ReadDir, Stat }"));
		mapType.get("io/fs").add(new TypeGoLangApiSignature("io/fs", "FileInfo interface, Size() int64"));
		mapConst.get("io/fs").add(new ConstGoLangApiSignature("io/fs", "ModeTemporary", null, "FileMode"));
		mapMethod.get("io/fs").add(new MethodGoLangApiSignature("io/fs", "*PathError", "Unwrap", new String[] { "" },
				new String[] { "error" }));
		mapFunc.get("io/fs").add(
				new FuncGoLangApiSignature("io/fs", "ValidPath", new String[] { "string" }, new String[] { "bool" }));
		mapConst.get("io/fs").add(new ConstGoLangApiSignature("io/fs", "ModeType", " 2401763328", null));
		mapType.get("io/fs").add(new TypeGoLangApiSignature("io/fs", "FileInfo interface, Name() string"));
		mapType.get("io/fs").add(new TypeGoLangApiSignature("io/fs", "FileInfo interface, Sys() interface{}"));

		pkgs.add("syscall (linux-arm)");
		mapConst.putIfAbsent("syscall (linux-arm)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (linux-arm)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (linux-arm)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (linux-arm)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (linux-arm)", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("syscall (linux-arm)").add(new FuncGoLangApiSignature("syscall (linux-arm)", "AllThreadsSyscall6",
				new String[] { "uintptr", " uintptr", " uintptr", " uintptr", " uintptr", " uintptr", " uintptr" },
				new String[] { "uintptr", " uintptr", " Errno" }));
		mapFunc.get("syscall (linux-arm)").add(new FuncGoLangApiSignature("syscall (linux-arm)", "Setegid",
				new String[] { "int" }, new String[] { "error" }));
		mapFunc.get("syscall (linux-arm)")
				.add(new FuncGoLangApiSignature("syscall (linux-arm)", "AllThreadsSyscall",
						new String[] { "uintptr", " uintptr", " uintptr", " uintptr" },
						new String[] { "uintptr", " uintptr", " Errno" }));
		mapFunc.get("syscall (linux-arm)").add(new FuncGoLangApiSignature("syscall (linux-arm)", "Seteuid",
				new String[] { "int" }, new String[] { "error" }));

		pkgs.add("syscall (linux-386-cgo)");
		mapConst.putIfAbsent("syscall (linux-386-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (linux-386-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (linux-386-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (linux-386-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (linux-386-cgo)", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("syscall (linux-386-cgo)")
				.add(new FuncGoLangApiSignature(
						"syscall (linux-386-cgo)", "AllThreadsSyscall6", new String[] { "uintptr", " uintptr",
								" uintptr", " uintptr", " uintptr", " uintptr", " uintptr" },
						new String[] { "uintptr", " uintptr", " Errno" }));
		mapFunc.get("syscall (linux-386-cgo)").add(new FuncGoLangApiSignature("syscall (linux-386-cgo)", "Setegid",
				new String[] { "int" }, new String[] { "error" }));
		mapFunc.get("syscall (linux-386-cgo)")
				.add(new FuncGoLangApiSignature("syscall (linux-386-cgo)", "AllThreadsSyscall",
						new String[] { "uintptr", " uintptr", " uintptr", " uintptr" },
						new String[] { "uintptr", " uintptr", " Errno" }));
		mapFunc.get("syscall (linux-386-cgo)").add(new FuncGoLangApiSignature("syscall (linux-386-cgo)", "Seteuid",
				new String[] { "int" }, new String[] { "error" }));

		pkgs.add("text/template/parse");
		mapConst.putIfAbsent("text/template/parse", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("text/template/parse", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("text/template/parse", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("text/template/parse", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("text/template/parse", new HashSet<VarGoLangApiSignature>());

		mapType.get("text/template/parse").add(new TypeGoLangApiSignature("text/template/parse", "CommentNode struct"));
		mapMethod.get("text/template/parse").add(new MethodGoLangApiSignature("text/template/parse", "CommentNode",
				"Position", new String[] { "" }, new String[] { "Pos" }));
		mapType.get("text/template/parse").add(new TypeGoLangApiSignature("text/template/parse", "Mode uint"));
		mapConst.get("text/template/parse")
				.add(new ConstGoLangApiSignature("text/template/parse", "NodeComment", " 20", null));
		mapType.get("text/template/parse")
				.add(new TypeGoLangApiSignature("text/template/parse", "CommentNode struct, Text string"));
		mapConst.get("text/template/parse")
				.add(new ConstGoLangApiSignature("text/template/parse", "ParseComments", null, "Mode"));
		mapMethod.get("text/template/parse").add(new MethodGoLangApiSignature("text/template/parse", "*CommentNode",
				"Copy", new String[] { "" }, new String[] { "Node" }));
		mapType.get("text/template/parse")
				.add(new TypeGoLangApiSignature("text/template/parse", "CommentNode struct, embedded Pos"));
		mapConst.get("text/template/parse")
				.add(new ConstGoLangApiSignature("text/template/parse", "NodeComment", null, "NodeType"));
		mapMethod.get("text/template/parse").add(new MethodGoLangApiSignature("text/template/parse", "*CommentNode",
				"String", new String[] { "" }, new String[] { "string" }));
		mapType.get("text/template/parse")
				.add(new TypeGoLangApiSignature("text/template/parse", "CommentNode struct, embedded NodeType"));
		mapType.get("text/template/parse")
				.add(new TypeGoLangApiSignature("text/template/parse", "Tree struct, Mode Mode"));
		mapConst.get("text/template/parse")
				.add(new ConstGoLangApiSignature("text/template/parse", "ParseComments", " 1", null));
		mapMethod.get("text/template/parse").add(new MethodGoLangApiSignature("text/template/parse", "CommentNode",
				"Type", new String[] { "" }, new String[] { "NodeType" }));

		pkgs.add("unicode");
		mapConst.putIfAbsent("unicode", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("unicode", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("unicode", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("unicode", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("unicode", new HashSet<VarGoLangApiSignature>());

		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Dives_Akuru", "*RangeTable"));
		mapConst.get("unicode").add(new ConstGoLangApiSignature("unicode", "Version", " \"13.0.0\"", null));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Chorasmian", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Khitan_Small_Script", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Yezidi", "*RangeTable"));

		pkgs.add("go/build");
		mapConst.putIfAbsent("go/build", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("go/build", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("go/build", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("go/build", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("go/build", new HashSet<VarGoLangApiSignature>());

		mapType.get("go/build")
				.add(new TypeGoLangApiSignature("go/build", "Package struct, XTestEmbedPatterns []string"));
		mapType.get("go/build").add(new TypeGoLangApiSignature("go/build", "Package struct, EmbedPatterns []string"));
		mapType.get("go/build")
				.add(new TypeGoLangApiSignature("go/build", "Package struct, TestEmbedPatterns []string"));
		mapType.get("go/build").add(new TypeGoLangApiSignature("go/build",
				"Package struct, XTestEmbedPatternPos map[string][]token.Position"));
		mapType.get("go/build")
				.add(new TypeGoLangApiSignature("go/build", "Package struct, IgnoredOtherFiles []string"));
		mapType.get("go/build").add(new TypeGoLangApiSignature("go/build",
				"Package struct, TestEmbedPatternPos map[string][]token.Position"));
		mapType.get("go/build").add(
				new TypeGoLangApiSignature("go/build", "Package struct, EmbedPatternPos map[string][]token.Position"));

		pkgs.add("debug/elf");
		mapConst.putIfAbsent("debug/elf", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("debug/elf", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("debug/elf", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("debug/elf", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("debug/elf", new HashSet<VarGoLangApiSignature>());

		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_FEATURE", null, "DynTag"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_HIDDEN_GOTIDX", null, "DynTag"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_DELTA_CLASS", " 1879048215", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_PLTPADSZ", null, "DynTag"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_DELTA_RELOC_NO", " 1879048220", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_GOTSYM", null, "DynTag"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_LOCALPAGE_GOTIDX", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_USED", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_VALRNGLO", null, "DynTag"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_DELTA_INSTANCE_NO", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_PPC_OPT", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "PT_ARM_ARCHEXT", " 1879048192", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_TIME_STAMP", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_FLAGS_1", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_SYMTAB_SHNDX", " 34", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_FILTER", " 2147483647", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_SYMTABNO", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_TLSDESC_GOT", " 1879047927", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "PT_GNU_MBIND_LO", " 1685382485", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_INTERFACE_SIZE", " 1879048236", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_INTERFACE", " 1879048234", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_PPC64_OPDSZ", " 1879048194", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_TLSDESC_PLT", " 1879047926", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_LIBLIST", " 1879048201", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_OPTIONS", " 1879048233", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_RLD_MAP_REL", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_PPC_GOT", null, "DynTag"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_IVERSION", " 1879048196", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_DELTA_CLASSSYM_NO", " 1879048225", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_PLTGOT", " 1879048242", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_DELTA_CLASSSYM_NO", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "PT_AARCH64_ARCHEXT", null, "ProgType"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_MSYM", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MOVEENT", " 1879047674", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_VALRNGLO", " 1879047424", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_GNU_LIBLIST", " 1879047929", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_POSFLAG_1", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_DEPAUDIT", " 1879047931", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "PT_MIPS_REGINFO", null, "ProgType"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "PT_MIPS_ABIFLAGS", null, "ProgType"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_PLTPADSZ", " 1879047673", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "PT_SUNWSTACK", null, "ProgType"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "PT_GNU_PROPERTY", " 1685382483", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_BASE_ADDRESS", null, "DynTag"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_LOCAL_GOTIDX", " 1879048230", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_CONFIG", " 1879047930", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_GP_VALUE", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_LIBLIST", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_CXX_FLAGS", null, "DynTag"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_DELTA_INSTANCE", " 1879048217", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_HIPAGENO", " 1879048212", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_IVERSION", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MOVESZ", " 1879047675", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_VALRNGHI", " 1879047679", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_DEPAUDIT", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_GNU_CONFLICT", " 1879047928", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_PERF_SUFFIX", null, "DynTag"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_RLD_VERSION", " 1879048193", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "PT_S390_PGSTE", null, "ProgType"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "PT_MIPS_REGINFO", " 1879048192", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_AUDIT", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_PPC_OPT", " 1879048193", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_GNU_LIBLISTSZ", " 1879047671", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_LOCALPAGE_GOTIDX", " 1879048229", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_FILTER", null, "DynTag"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_RLD_MAP_REL", " 1879048245", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_POSFLAG_1", " 1879047677", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_DELTA_RELOC_NO", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_GNU_PRELINKED", null, "DynTag"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_LIBLISTNO", " 1879048208", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_PPC64_OPDSZ", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "PT_SUNWSTACK", " 1879048187", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_FLAGS_1", " 1879048187", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_DELTA_CLASS", null, "DynTag"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_DYNSTR_ALIGN", " 1879048235", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_DELTA_SYM_NO", " 1879048222", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_SYMTABNO", " 1879048209", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "PT_SUNW_EH_FRAME", null, "ProgType"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_GNU_LIBLIST", null, "DynTag"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_UNREFEXTNO", " 1879048210", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_RLD_VERSION", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_RWPLT", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_AUXILIARY", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_AUX_DYNAMIC", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "PT_MIPS_OPTIONS", " 1879048194", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "PT_GNU_MBIND_LO", null, "ProgType"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_GNU_PRELINKED", " 1879047669", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_AUXILIARY", " 2147483645", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_TIME_STAMP", " 1879048194", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_TLSDESC_GOT", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "PT_GNU_MBIND_HI", null, "ProgType"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_ICHECKSUM", " 1879048195", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "PT_GNU_PROPERTY", null, "ProgType"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "PT_OPENBSD_WXNEEDED", " 1705237479", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_LOCAL_GOTNO", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MOVETAB", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "PT_ARM_EXIDX", " 1879048193", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "PT_PAX_FLAGS", null, "ProgType"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "PT_GNU_MBIND_HI", " 1685386580", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "PT_OPENBSD_RANDOMIZE", " 1705237478", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_USED", " 2147483646", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_CONFLICT", null, "DynTag"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "PT_OPENBSD_BOOTDATA", " 1705253862", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_RELCOUNT", null, "DynTag"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_DELTA_INSTANCE_NO", " 1879048218", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "PT_GNU_RELRO", " 1685382482", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_DELTA_CLASSSYM", " 1879048224", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_DELTA_CLASS_NO", " 1879048216", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_SYMBOL_LIB", " 1879048228", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "PT_OPENBSD_BOOTDATA", null, "ProgType"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_CONFLICTNO", " 1879048203", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_ICHECKSUM", null, "DynTag"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_INTERFACE_SIZE", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_RELACOUNT", " 1879048185", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_RELCOUNT", " 1879048186", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_GNU_CONFLICTSZ", " 1879047670", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_RELACOUNT", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_OPTIONS", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_GNU_LIBLISTSZ", null, "DynTag"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "PT_AARCH64_ARCHEXT", " 1879048192", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "PT_GNU_STACK", " 1685382481", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_LOCAL_GOTIDX", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_DYNSTR_ALIGN", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_PLTGOT", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "PT_GNU_EH_FRAME", " 1685382480", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_AUDIT", " 1879047932", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_DELTA_RELOC", null, "DynTag"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_LOCAL_GOTNO", " 1879048202", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_FLAGS", null, "DynTag"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_SPARC_REGISTER", " 1879048193", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_PROTECTED_GOTIDX", " 1879048232", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_PLTPAD", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "PT_GNU_RELRO", null, "ProgType"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "PT_OPENBSD_RANDOMIZE", null, "ProgType"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "PT_SUNW_EH_FRAME", " 1685382480", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_DELTA_SYM_NO", null, "DynTag"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_CXX_FLAGS", " 1879048226", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "PT_S390_PGSTE", " 1879048192", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_PERF_SUFFIX", " 1879048238", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_ADDRRNGHI", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_ADDRRNGLO", null, "DynTag"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "PT_OPENBSD_WXNEEDED", null, "ProgType"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_GNU_HASH", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_ADDRRNGLO", " 1879047680", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_PPC64_OPD", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_PPC64_GLINK", null, "DynTag"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "PT_AARCH64_UNWIND", " 1879048193", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_GNU_CONFLICTSZ", null, "DynTag"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_DELTA_SYM", " 1879048221", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_VERDEFNUM", " 1879048189", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_PIXIE_INIT", " 1879048227", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_GNU_HASH", " 1879047925", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_COMPACT_SIZE", " 1879048239", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_HIPAGENO", null, "DynTag"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_DELTA_INSTANCE", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_INTERFACE", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_RLD_MAP", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_SYMINSZ", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "PT_GNU_EH_FRAME", null, "ProgType"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "PT_MIPS_RTPROC", null, "ProgType"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_GNU_CONFLICT", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_MSYM", " 1879048199", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_RLD_TEXT_RESOLVE_ADDR", " 1879048237", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_CHECKSUM", " 1879047672", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_SYMINFO", " 1879047935", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_SYMINFO", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_FLAGS", " 1879048197", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "PT_PAX_FLAGS", " 1694766464", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "PT_ARM_ARCHEXT", null, "ProgType"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "PT_MIPS_RTPROC", " 1879048193", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "PT_MIPS_ABIFLAGS", " 1879048195", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_SYMINENT", " 1879047679", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_CONFIG", null, "DynTag"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_BASE_ADDRESS", " 1879048198", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_RWPLT", " 1879048244", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_AUX_DYNAMIC", " 1879048241", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_PROTECTED_GOTIDX", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_PLTPAD", " 1879047933", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_PPC_GOT", " 1879048192", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "PT_MIPS_OPTIONS", null, "ProgType"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_DELTA_SYM", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_SYMTAB_SHNDX", null, "DynTag"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_HIDDEN_GOTIDX", " 1879048231", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_ADDRRNGHI", " 1879047935", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_DELTA_CLASSSYM", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MOVEENT", null, "DynTag"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_RLD_TEXT_RESOLVE_ADDR", null, "DynTag"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_CONFLICT", " 1879048200", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "PT_GNU_STACK", null, "ProgType"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MOVETAB", " 1879047934", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_PIXIE_INIT", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_RLD_MAP", " 1879048214", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_CONFLICTNO", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_VERDEF", " 1879048188", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_GP_VALUE", " 1879048240", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_VERDEFNUM", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_CHECKSUM", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_SPARC_REGISTER", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_TLSDESC_PLT", null, "DynTag"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_DELTA_CLASS_NO", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_PPC64_OPD", " 1879048193", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_PPC64_OPT", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_VERDEF", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_GOTSYM", " 1879048211", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_UNREFEXTNO", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_SYMINENT", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "PT_AARCH64_UNWIND", null, "ProgType"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_FEATURE", " 1879047676", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_PPC64_GLINK", " 1879048192", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MOVESZ", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_SYMBOL_LIB", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "PT_ARM_EXIDX", null, "ProgType"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_LIBLISTNO", null, "DynTag"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_DELTA_RELOC", " 1879048219", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_VALRNGHI", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_SYMINSZ", " 1879047678", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_MIPS_COMPACT_SIZE", null, "DynTag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "DT_PPC64_OPT", " 1879048195", null));

		pkgs.add("html/template");
		mapConst.putIfAbsent("html/template", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("html/template", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("html/template", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("html/template", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("html/template", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("html/template").add(new MethodGoLangApiSignature("html/template", "*Template", "ParseFS",
				new String[] { "fs.FS", " ...string" }, new String[] { "*Template", " error" }));
		mapFunc.get("html/template").add(new FuncGoLangApiSignature("html/template", "ParseFS",
				new String[] { "fs.FS", " ...string" }, new String[] { "*Template", " error" }));

		pkgs.add("os/signal");
		mapConst.putIfAbsent("os/signal", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("os/signal", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("os/signal", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("os/signal", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("os/signal", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("os/signal")
				.add(new FuncGoLangApiSignature("os/signal", "NotifyContext",
						new String[] { "context.Context", " ...os.Signal" },
						new String[] { "context.Context", " context.CancelFunc" }));

		pkgs.add("syscall (windows-amd64)");
		mapConst.putIfAbsent("syscall (windows-amd64)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (windows-amd64)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (windows-amd64)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (windows-amd64)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (windows-amd64)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (windows-amd64)").add(
				new TypeGoLangApiSignature("syscall (windows-amd64)", "SysProcAttr struct, NoInheritHandles bool"));
		mapMethod.get("syscall (windows-amd64)").add(new MethodGoLangApiSignature("syscall (windows-amd64)",
				"*DLLError", "Unwrap", new String[] { "" }, new String[] { "error" }));

		pkgs.add("syscall (linux-amd64)");
		mapConst.putIfAbsent("syscall (linux-amd64)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (linux-amd64)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (linux-amd64)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (linux-amd64)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (linux-amd64)", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("syscall (linux-amd64)")
				.add(new FuncGoLangApiSignature(
						"syscall (linux-amd64)", "AllThreadsSyscall6", new String[] { "uintptr", " uintptr", " uintptr",
								" uintptr", " uintptr", " uintptr", " uintptr" },
						new String[] { "uintptr", " uintptr", " Errno" }));
		mapFunc.get("syscall (linux-amd64)").add(new FuncGoLangApiSignature("syscall (linux-amd64)", "Setegid",
				new String[] { "int" }, new String[] { "error" }));
		mapFunc.get("syscall (linux-amd64)")
				.add(new FuncGoLangApiSignature("syscall (linux-amd64)", "AllThreadsSyscall",
						new String[] { "uintptr", " uintptr", " uintptr", " uintptr" },
						new String[] { "uintptr", " uintptr", " Errno" }));
		mapFunc.get("syscall (linux-amd64)").add(new FuncGoLangApiSignature("syscall (linux-amd64)", "Seteuid",
				new String[] { "int" }, new String[] { "error" }));

	}

}