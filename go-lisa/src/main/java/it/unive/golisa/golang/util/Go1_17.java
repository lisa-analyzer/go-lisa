package it.unive.golisa.golang.util;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import it.unive.golisa.golang.api.signature.ConstGoLangApiSignature;
import it.unive.golisa.golang.api.signature.FuncGoLangApiSignature;
import it.unive.golisa.golang.api.signature.MethodGoLangApiSignature;
import it.unive.golisa.golang.api.signature.TypeGoLangApiSignature;
import it.unive.golisa.golang.api.signature.VarGoLangApiSignature;

/**
 * Auto-generated by GoLiSA build
 */
public class Go1_17 {
	private final Map<String, Set<ConstGoLangApiSignature>> mapConst;
	private final Map<String, Set<FuncGoLangApiSignature>> mapFunc;
	private final Map<String, Set<MethodGoLangApiSignature>> mapMethod;
	private final Map<String, Set<TypeGoLangApiSignature>> mapType;
	private final Map<String, Set<VarGoLangApiSignature>> mapVar;
	private final Set<String> pkgs;

	public Go1_17() {
		pkgs = new HashSet<>();
		mapConst = new HashMap<String, Set<ConstGoLangApiSignature>>();
		mapFunc = new HashMap<String, Set<FuncGoLangApiSignature>>();
		mapMethod = new HashMap<String, Set<MethodGoLangApiSignature>>();
		mapType = new HashMap<String, Set<TypeGoLangApiSignature>>();
		mapVar = new HashMap<String, Set<VarGoLangApiSignature>>();

		build();
	}

	public Set<String> getPackages() {
		return pkgs;
	}

	public Map<String, Set<ConstGoLangApiSignature>> getMapConst() {
		return mapConst;
	}

	public Map<String, Set<FuncGoLangApiSignature>> getMapFunc() {
		return mapFunc;
	}

	public Map<String, Set<MethodGoLangApiSignature>> getMapMethod() {
		return mapMethod;
	}

	public Map<String, Set<TypeGoLangApiSignature>> getMapType() {
		return mapType;
	}

	public Map<String, Set<VarGoLangApiSignature>> getMapVar() {
		return mapVar;
	}

	private void build() {
		build0();
	}

	private void build0() {
		pkgs.add("crypto/tls");
		mapConst.putIfAbsent("crypto/tls", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("crypto/tls", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("crypto/tls", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("crypto/tls", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("crypto/tls", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("crypto/tls").add(new MethodGoLangApiSignature("crypto/tls", "*ClientHelloInfo", "Context",
				new String[] { "" }, new String[] { "context.Context" }));
		mapMethod.get("crypto/tls").add(new MethodGoLangApiSignature("crypto/tls", "*Conn", "HandshakeContext",
				new String[] { "context.Context" }, new String[] { "error" }));
		mapMethod.get("crypto/tls").add(new MethodGoLangApiSignature("crypto/tls", "*CertificateRequestInfo", "Context",
				new String[] { "" }, new String[] { "context.Context" }));

		pkgs.add("encoding/csv");
		mapConst.putIfAbsent("encoding/csv", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("encoding/csv", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("encoding/csv", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("encoding/csv", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("encoding/csv", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("encoding/csv").add(new MethodGoLangApiSignature("encoding/csv", "*Reader", "FieldPos",
				new String[] { "int" }, new String[] { "int", " int" }));

		pkgs.add("runtime/cgo (darwin-amd64-cgo)");
		mapConst.putIfAbsent("runtime/cgo (darwin-amd64-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("runtime/cgo (darwin-amd64-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("runtime/cgo (darwin-amd64-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("runtime/cgo (darwin-amd64-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("runtime/cgo (darwin-amd64-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("runtime/cgo (darwin-amd64-cgo)")
				.add(new TypeGoLangApiSignature("runtime/cgo (darwin-amd64-cgo)", "Handle uintptr"));
		mapFunc.get("runtime/cgo (darwin-amd64-cgo)").add(new FuncGoLangApiSignature("runtime/cgo (darwin-amd64-cgo)",
				"NewHandle", new String[] { "interface{}" }, new String[] { "Handle" }));
		mapMethod.get("runtime/cgo (darwin-amd64-cgo)")
				.add(new MethodGoLangApiSignature("runtime/cgo (darwin-amd64-cgo)", "Handle", "Value",
						new String[] { "" }, new String[] { "interface{}" }));
		mapMethod.get("runtime/cgo (darwin-amd64-cgo)").add(new MethodGoLangApiSignature(
				"runtime/cgo (darwin-amd64-cgo)", "Handle", "Delete", new String[] { "" }, new String[] { "" }));

		pkgs.add("syscall (netbsd-amd64-cgo)");
		mapConst.putIfAbsent("syscall (netbsd-amd64-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (netbsd-amd64-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (netbsd-amd64-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (netbsd-amd64-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (netbsd-amd64-cgo)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (netbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-amd64-cgo)", "SYS_WAIT6", " 481", null));
		mapConst.get("syscall (netbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-amd64-cgo)", "WEXITED", null, "ideal-int"));
		mapConst.get("syscall (netbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-amd64-cgo)", "WEXITED", " 32", null));
		mapConst.get("syscall (netbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-amd64-cgo)", "SYS_WAIT6", null, "ideal-int"));

		pkgs.add("runtime/cgo (netbsd-amd64-cgo)");
		mapConst.putIfAbsent("runtime/cgo (netbsd-amd64-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("runtime/cgo (netbsd-amd64-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("runtime/cgo (netbsd-amd64-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("runtime/cgo (netbsd-amd64-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("runtime/cgo (netbsd-amd64-cgo)", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("runtime/cgo (netbsd-amd64-cgo)").add(new FuncGoLangApiSignature("runtime/cgo (netbsd-amd64-cgo)",
				"NewHandle", new String[] { "interface{}" }, new String[] { "Handle" }));
		mapMethod.get("runtime/cgo (netbsd-amd64-cgo)")
				.add(new MethodGoLangApiSignature("runtime/cgo (netbsd-amd64-cgo)", "Handle", "Value",
						new String[] { "" }, new String[] { "interface{}" }));
		mapMethod.get("runtime/cgo (netbsd-amd64-cgo)").add(new MethodGoLangApiSignature(
				"runtime/cgo (netbsd-amd64-cgo)", "Handle", "Delete", new String[] { "" }, new String[] { "" }));
		mapType.get("runtime/cgo (netbsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("runtime/cgo (netbsd-amd64-cgo)", "Handle uintptr"));

		pkgs.add("runtime/cgo (linux-amd64-cgo)");
		mapConst.putIfAbsent("runtime/cgo (linux-amd64-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("runtime/cgo (linux-amd64-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("runtime/cgo (linux-amd64-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("runtime/cgo (linux-amd64-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("runtime/cgo (linux-amd64-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("runtime/cgo (linux-amd64-cgo)")
				.add(new TypeGoLangApiSignature("runtime/cgo (linux-amd64-cgo)", "Handle uintptr"));
		mapFunc.get("runtime/cgo (linux-amd64-cgo)").add(new FuncGoLangApiSignature("runtime/cgo (linux-amd64-cgo)",
				"NewHandle", new String[] { "interface{}" }, new String[] { "Handle" }));
		mapMethod.get("runtime/cgo (linux-amd64-cgo)").add(new MethodGoLangApiSignature("runtime/cgo (linux-amd64-cgo)",
				"Handle", "Value", new String[] { "" }, new String[] { "interface{}" }));
		mapMethod.get("runtime/cgo (linux-amd64-cgo)").add(new MethodGoLangApiSignature("runtime/cgo (linux-amd64-cgo)",
				"Handle", "Delete", new String[] { "" }, new String[] { "" }));

		pkgs.add("runtime/cgo (freebsd-386-cgo)");
		mapConst.putIfAbsent("runtime/cgo (freebsd-386-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("runtime/cgo (freebsd-386-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("runtime/cgo (freebsd-386-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("runtime/cgo (freebsd-386-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("runtime/cgo (freebsd-386-cgo)", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("runtime/cgo (freebsd-386-cgo)").add(new FuncGoLangApiSignature("runtime/cgo (freebsd-386-cgo)",
				"NewHandle", new String[] { "interface{}" }, new String[] { "Handle" }));
		mapMethod.get("runtime/cgo (freebsd-386-cgo)").add(new MethodGoLangApiSignature("runtime/cgo (freebsd-386-cgo)",
				"Handle", "Value", new String[] { "" }, new String[] { "interface{}" }));
		mapMethod.get("runtime/cgo (freebsd-386-cgo)").add(new MethodGoLangApiSignature("runtime/cgo (freebsd-386-cgo)",
				"Handle", "Delete", new String[] { "" }, new String[] { "" }));
		mapType.get("runtime/cgo (freebsd-386-cgo)")
				.add(new TypeGoLangApiSignature("runtime/cgo (freebsd-386-cgo)", "Handle uintptr"));

		pkgs.add("runtime/cgo (linux-386-cgo)");
		mapConst.putIfAbsent("runtime/cgo (linux-386-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("runtime/cgo (linux-386-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("runtime/cgo (linux-386-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("runtime/cgo (linux-386-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("runtime/cgo (linux-386-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("runtime/cgo (linux-386-cgo)")
				.add(new TypeGoLangApiSignature("runtime/cgo (linux-386-cgo)", "Handle uintptr"));
		mapFunc.get("runtime/cgo (linux-386-cgo)").add(new FuncGoLangApiSignature("runtime/cgo (linux-386-cgo)",
				"NewHandle", new String[] { "interface{}" }, new String[] { "Handle" }));
		mapMethod.get("runtime/cgo (linux-386-cgo)").add(new MethodGoLangApiSignature("runtime/cgo (linux-386-cgo)",
				"Handle", "Value", new String[] { "" }, new String[] { "interface{}" }));
		mapMethod.get("runtime/cgo (linux-386-cgo)").add(new MethodGoLangApiSignature("runtime/cgo (linux-386-cgo)",
				"Handle", "Delete", new String[] { "" }, new String[] { "" }));

		pkgs.add("sync/atomic");
		mapConst.putIfAbsent("sync/atomic", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("sync/atomic", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("sync/atomic", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("sync/atomic", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("sync/atomic", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("sync/atomic").add(new MethodGoLangApiSignature("sync/atomic", "*Value", "CompareAndSwap",
				new String[] { "interface{}", " interface{}" }, new String[] { "bool" }));
		mapMethod.get("sync/atomic").add(new MethodGoLangApiSignature("sync/atomic", "*Value", "Swap",
				new String[] { "interface{}" }, new String[] { "interface{}" }));

		pkgs.add("runtime/cgo (freebsd-amd64-cgo)");
		mapConst.putIfAbsent("runtime/cgo (freebsd-amd64-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("runtime/cgo (freebsd-amd64-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("runtime/cgo (freebsd-amd64-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("runtime/cgo (freebsd-amd64-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("runtime/cgo (freebsd-amd64-cgo)", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("runtime/cgo (freebsd-amd64-cgo)").add(new FuncGoLangApiSignature("runtime/cgo (freebsd-amd64-cgo)",
				"NewHandle", new String[] { "interface{}" }, new String[] { "Handle" }));
		mapType.get("runtime/cgo (freebsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("runtime/cgo (freebsd-amd64-cgo)", "Handle uintptr"));
		mapMethod.get("runtime/cgo (freebsd-amd64-cgo)")
				.add(new MethodGoLangApiSignature("runtime/cgo (freebsd-amd64-cgo)", "Handle", "Value",
						new String[] { "" }, new String[] { "interface{}" }));
		mapMethod.get("runtime/cgo (freebsd-amd64-cgo)").add(new MethodGoLangApiSignature(
				"runtime/cgo (freebsd-amd64-cgo)", "Handle", "Delete", new String[] { "" }, new String[] { "" }));

		pkgs.add("syscall (netbsd-amd64)");
		mapConst.putIfAbsent("syscall (netbsd-amd64)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (netbsd-amd64)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (netbsd-amd64)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (netbsd-amd64)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (netbsd-amd64)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (netbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-amd64)", "SYS_WAIT6", " 481", null));
		mapConst.get("syscall (netbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-amd64)", "WEXITED", " 32", null));
		mapConst.get("syscall (netbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-amd64)", "WEXITED", null, "ideal-int"));
		mapConst.get("syscall (netbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-amd64)", "SYS_WAIT6", null, "ideal-int"));

		pkgs.add("reflect");
		mapConst.putIfAbsent("reflect", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("reflect", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("reflect", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("reflect", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("reflect", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("reflect").add(new MethodGoLangApiSignature("reflect", "StructField", "IsExported",
				new String[] { "" }, new String[] { "bool" }));
		mapFunc.get("reflect").add(new FuncGoLangApiSignature("reflect", "VisibleFields", new String[] { "Type" },
				new String[] { "[]StructField" }));
		mapMethod.get("reflect").add(new MethodGoLangApiSignature("reflect", "Method", "IsExported",
				new String[] { "" }, new String[] { "bool" }));

		pkgs.add("runtime/cgo (freebsd-arm-cgo)");
		mapConst.putIfAbsent("runtime/cgo (freebsd-arm-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("runtime/cgo (freebsd-arm-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("runtime/cgo (freebsd-arm-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("runtime/cgo (freebsd-arm-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("runtime/cgo (freebsd-arm-cgo)", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("runtime/cgo (freebsd-arm-cgo)").add(new FuncGoLangApiSignature("runtime/cgo (freebsd-arm-cgo)",
				"NewHandle", new String[] { "interface{}" }, new String[] { "Handle" }));
		mapType.get("runtime/cgo (freebsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("runtime/cgo (freebsd-arm-cgo)", "Handle uintptr"));
		mapMethod.get("runtime/cgo (freebsd-arm-cgo)").add(new MethodGoLangApiSignature("runtime/cgo (freebsd-arm-cgo)",
				"Handle", "Value", new String[] { "" }, new String[] { "interface{}" }));
		mapMethod.get("runtime/cgo (freebsd-arm-cgo)").add(new MethodGoLangApiSignature("runtime/cgo (freebsd-arm-cgo)",
				"Handle", "Delete", new String[] { "" }, new String[] { "" }));

		pkgs.add("syscall (netbsd-arm)");
		mapConst.putIfAbsent("syscall (netbsd-arm)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (netbsd-arm)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (netbsd-arm)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (netbsd-arm)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (netbsd-arm)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (netbsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-arm)", "WEXITED", null, "ideal-int"));
		mapConst.get("syscall (netbsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-arm)", "WEXITED", " 32", null));
		mapConst.get("syscall (netbsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-arm)", "SYS_WAIT6", " 481", null));
		mapConst.get("syscall (netbsd-arm)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-arm)", "SYS_WAIT6", null, "ideal-int"));

		pkgs.add("net");
		mapConst.putIfAbsent("net", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("net").add(new MethodGoLangApiSignature("net", "*ParseError", "Timeout", new String[] { "" },
				new String[] { "bool" }));
		mapMethod.get("net").add(
				new MethodGoLangApiSignature("net", "IP", "IsPrivate", new String[] { "" }, new String[] { "bool" }));
		mapMethod.get("net").add(new MethodGoLangApiSignature("net", "*ParseError", "Temporary", new String[] { "" },
				new String[] { "bool" }));

		pkgs.add("syscall (windows-386)");
		mapConst.putIfAbsent("syscall (windows-386)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (windows-386)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (windows-386)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (windows-386)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (windows-386)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (windows-386)")
				.add(new TypeGoLangApiSignature("syscall (windows-386)", "SysProcAttr struct, ParentProcess Handle"));
		mapType.get("syscall (windows-386)").add(new TypeGoLangApiSignature("syscall (windows-386)",
				"SysProcAttr struct, AdditionalInheritedHandles []Handle"));

		pkgs.add("image");
		mapConst.putIfAbsent("image", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("image", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("image", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("image", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("image", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*NRGBA64", "RGBA64At",
				new String[] { "int", " int" }, new String[] { "color.RGBA64" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*Uniform", "RGBA64At",
				new String[] { "int", " int" }, new String[] { "color.RGBA64" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*NRGBA64", "SetRGBA64",
				new String[] { "int", " int", " color.RGBA64" }, new String[] { "" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*Gray", "RGBA64At",
				new String[] { "int", " int" }, new String[] { "color.RGBA64" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*Gray", "SetRGBA64",
				new String[] { "int", " int", " color.RGBA64" }, new String[] { "" }));
		mapType.get("image")
				.add(new TypeGoLangApiSignature("image", "RGBA64Image interface { At, Bounds, ColorModel, RGBA64At }"));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*NRGBA", "SetRGBA64",
				new String[] { "int", " int", " color.RGBA64" }, new String[] { "" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*NRGBA", "RGBA64At",
				new String[] { "int", " int" }, new String[] { "color.RGBA64" }));
		mapType.get("image")
				.add(new TypeGoLangApiSignature("image", "RGBA64Image interface, ColorModel() color.Model"));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*Alpha16", "RGBA64At",
				new String[] { "int", " int" }, new String[] { "color.RGBA64" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*CMYK", "SetRGBA64",
				new String[] { "int", " int", " color.RGBA64" }, new String[] { "" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*Alpha", "RGBA64At",
				new String[] { "int", " int" }, new String[] { "color.RGBA64" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "Rectangle", "RGBA64At",
				new String[] { "int", " int" }, new String[] { "color.RGBA64" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*Paletted", "SetRGBA64",
				new String[] { "int", " int", " color.RGBA64" }, new String[] { "" }));
		mapType.get("image")
				.add(new TypeGoLangApiSignature("image", "RGBA64Image interface, RGBA64At(int, int) color.RGBA64"));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*RGBA", "SetRGBA64",
				new String[] { "int", " int", " color.RGBA64" }, new String[] { "" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*Alpha16", "SetRGBA64",
				new String[] { "int", " int", " color.RGBA64" }, new String[] { "" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*RGBA", "RGBA64At",
				new String[] { "int", " int" }, new String[] { "color.RGBA64" }));
		mapType.get("image")
				.add(new TypeGoLangApiSignature("image", "RGBA64Image interface, At(int, int) color.Color"));
		mapType.get("image").add(new TypeGoLangApiSignature("image", "RGBA64Image interface, Bounds() Rectangle"));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*Gray16", "SetRGBA64",
				new String[] { "int", " int", " color.RGBA64" }, new String[] { "" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*Gray16", "RGBA64At",
				new String[] { "int", " int" }, new String[] { "color.RGBA64" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*YCbCr", "RGBA64At",
				new String[] { "int", " int" }, new String[] { "color.RGBA64" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*CMYK", "RGBA64At",
				new String[] { "int", " int" }, new String[] { "color.RGBA64" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*Alpha", "SetRGBA64",
				new String[] { "int", " int", " color.RGBA64" }, new String[] { "" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*NYCbCrA", "RGBA64At",
				new String[] { "int", " int" }, new String[] { "color.RGBA64" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*Paletted", "RGBA64At",
				new String[] { "int", " int" }, new String[] { "color.RGBA64" }));

		pkgs.add("runtime/cgo (netbsd-arm-cgo)");
		mapConst.putIfAbsent("runtime/cgo (netbsd-arm-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("runtime/cgo (netbsd-arm-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("runtime/cgo (netbsd-arm-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("runtime/cgo (netbsd-arm-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("runtime/cgo (netbsd-arm-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("runtime/cgo (netbsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("runtime/cgo (netbsd-arm-cgo)", "Handle uintptr"));
		mapFunc.get("runtime/cgo (netbsd-arm-cgo)").add(new FuncGoLangApiSignature("runtime/cgo (netbsd-arm-cgo)",
				"NewHandle", new String[] { "interface{}" }, new String[] { "Handle" }));
		mapMethod.get("runtime/cgo (netbsd-arm-cgo)").add(new MethodGoLangApiSignature("runtime/cgo (netbsd-arm-cgo)",
				"Handle", "Value", new String[] { "" }, new String[] { "interface{}" }));
		mapMethod.get("runtime/cgo (netbsd-arm-cgo)").add(new MethodGoLangApiSignature("runtime/cgo (netbsd-arm-cgo)",
				"Handle", "Delete", new String[] { "" }, new String[] { "" }));

		pkgs.add("syscall (netbsd-arm64)");
		mapConst.putIfAbsent("syscall (netbsd-arm64)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (netbsd-arm64)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (netbsd-arm64)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (netbsd-arm64)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (netbsd-arm64)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (netbsd-arm64)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-arm64)", "WEXITED", " 32", null));
		mapConst.get("syscall (netbsd-arm64)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-arm64)", "WEXITED", null, "ideal-int"));
		mapConst.get("syscall (netbsd-arm64)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-arm64)", "SYS_WAIT6", " 481", null));
		mapConst.get("syscall (netbsd-arm64)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-arm64)", "SYS_WAIT6", null, "ideal-int"));

		pkgs.add("syscall (openbsd-amd64-cgo)");
		mapConst.putIfAbsent("syscall (openbsd-amd64-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (openbsd-amd64-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (openbsd-amd64-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (openbsd-amd64-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (openbsd-amd64-cgo)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "MSG_CMSG_CLOEXEC", null, "ideal-int"));
		mapConst.get("syscall (openbsd-amd64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64-cgo)", "MSG_CMSG_CLOEXEC", " 2048", null));

		pkgs.add("testing");
		mapConst.putIfAbsent("testing", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("testing", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("testing", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("testing", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("testing", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("testing").add(new MethodGoLangApiSignature("testing", "*T", "Setenv",
				new String[] { "string", " string" }, new String[] { "" }));
		mapMethod.get("testing").add(new MethodGoLangApiSignature("testing", "*B", "Setenv",
				new String[] { "string", " string" }, new String[] { "" }));
		mapType.get("testing").add(new TypeGoLangApiSignature("testing", "TB interface, Setenv(string, string)"));

		pkgs.add("syscall (openbsd-386-cgo)");
		mapConst.putIfAbsent("syscall (openbsd-386-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (openbsd-386-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (openbsd-386-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (openbsd-386-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (openbsd-386-cgo)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "MSG_CMSG_CLOEXEC", " 2048", null));
		mapConst.get("syscall (openbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386-cgo)", "MSG_CMSG_CLOEXEC", null, "ideal-int"));

		pkgs.add("archive/zip");
		mapConst.putIfAbsent("archive/zip", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("archive/zip", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("archive/zip", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("archive/zip", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("archive/zip", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("archive/zip").add(new MethodGoLangApiSignature("archive/zip", "*Writer", "Copy",
				new String[] { "*File" }, new String[] { "error" }));
		mapMethod.get("archive/zip").add(new MethodGoLangApiSignature("archive/zip", "*File", "OpenRaw",
				new String[] { "" }, new String[] { "io.Reader", " error" }));
		mapMethod.get("archive/zip").add(new MethodGoLangApiSignature("archive/zip", "*Writer", "CreateRaw",
				new String[] { "*FileHeader" }, new String[] { "io.Writer", " error" }));

		pkgs.add("syscall (netbsd-386)");
		mapConst.putIfAbsent("syscall (netbsd-386)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (netbsd-386)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (netbsd-386)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (netbsd-386)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (netbsd-386)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (netbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-386)", "WEXITED", " 32", null));
		mapConst.get("syscall (netbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-386)", "SYS_WAIT6", " 481", null));
		mapConst.get("syscall (netbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-386)", "SYS_WAIT6", null, "ideal-int"));
		mapConst.get("syscall (netbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-386)", "WEXITED", null, "ideal-int"));

		pkgs.add("compress/lzw");
		mapConst.putIfAbsent("compress/lzw", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("compress/lzw", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("compress/lzw", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("compress/lzw", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("compress/lzw", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("compress/lzw").add(new MethodGoLangApiSignature("compress/lzw", "*Writer", "Write",
				new String[] { "[]uint8" }, new String[] { "int", " error" }));
		mapMethod.get("compress/lzw").add(new MethodGoLangApiSignature("compress/lzw", "*Reader", "Reset",
				new String[] { "io.Reader", " Order", " int" }, new String[] { "" }));
		mapMethod.get("compress/lzw").add(new MethodGoLangApiSignature("compress/lzw", "*Reader", "Read",
				new String[] { "[]uint8" }, new String[] { "int", " error" }));
		mapType.get("compress/lzw").add(new TypeGoLangApiSignature("compress/lzw", "Writer struct"));
		mapMethod.get("compress/lzw").add(new MethodGoLangApiSignature("compress/lzw", "*Writer", "Close",
				new String[] { "" }, new String[] { "error" }));
		mapMethod.get("compress/lzw").add(new MethodGoLangApiSignature("compress/lzw", "*Writer", "Reset",
				new String[] { "io.Writer", " Order", " int" }, new String[] { "" }));
		mapType.get("compress/lzw").add(new TypeGoLangApiSignature("compress/lzw", "Reader struct"));
		mapMethod.get("compress/lzw").add(new MethodGoLangApiSignature("compress/lzw", "*Reader", "Close",
				new String[] { "" }, new String[] { "error" }));

		pkgs.add("net/http");
		mapConst.putIfAbsent("net/http", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net/http", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net/http", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net/http", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net/http", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("net/http").add(new FuncGoLangApiSignature("net/http", "AllowQuerySemicolons",
				new String[] { "Handler" }, new String[] { "Handler" }));

		pkgs.add("io/fs");
		mapConst.putIfAbsent("io/fs", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("io/fs", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("io/fs", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("io/fs", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("io/fs", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("io/fs").add(new FuncGoLangApiSignature("io/fs", "FileInfoToDirEntry", new String[] { "FileInfo" },
				new String[] { "DirEntry" }));

		pkgs.add("runtime/cgo (openbsd-386-cgo)");
		mapConst.putIfAbsent("runtime/cgo (openbsd-386-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("runtime/cgo (openbsd-386-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("runtime/cgo (openbsd-386-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("runtime/cgo (openbsd-386-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("runtime/cgo (openbsd-386-cgo)", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("runtime/cgo (openbsd-386-cgo)").add(new FuncGoLangApiSignature("runtime/cgo (openbsd-386-cgo)",
				"NewHandle", new String[] { "interface{}" }, new String[] { "Handle" }));
		mapMethod.get("runtime/cgo (openbsd-386-cgo)").add(new MethodGoLangApiSignature("runtime/cgo (openbsd-386-cgo)",
				"Handle", "Value", new String[] { "" }, new String[] { "interface{}" }));
		mapType.get("runtime/cgo (openbsd-386-cgo)")
				.add(new TypeGoLangApiSignature("runtime/cgo (openbsd-386-cgo)", "Handle uintptr"));
		mapMethod.get("runtime/cgo (openbsd-386-cgo)").add(new MethodGoLangApiSignature("runtime/cgo (openbsd-386-cgo)",
				"Handle", "Delete", new String[] { "" }, new String[] { "" }));

		pkgs.add("image/draw");
		mapConst.putIfAbsent("image/draw", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("image/draw", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("image/draw", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("image/draw", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("image/draw", new HashSet<VarGoLangApiSignature>());

		mapType.get("image/draw")
				.add(new TypeGoLangApiSignature("image/draw", "RGBA64Image interface, Bounds() image.Rectangle"));
		mapType.get("image/draw").add(
				new TypeGoLangApiSignature("image/draw", "RGBA64Image interface, RGBA64At(int, int) color.RGBA64"));
		mapType.get("image/draw")
				.add(new TypeGoLangApiSignature("image/draw", "RGBA64Image interface, ColorModel() color.Model"));
		mapType.get("image/draw").add(new TypeGoLangApiSignature("image/draw",
				"RGBA64Image interface { At, Bounds, ColorModel, RGBA64At, Set, SetRGBA64 }"));
		mapType.get("image/draw").add(
				new TypeGoLangApiSignature("image/draw", "RGBA64Image interface, SetRGBA64(int, int, color.RGBA64)"));
		mapType.get("image/draw")
				.add(new TypeGoLangApiSignature("image/draw", "RGBA64Image interface, At(int, int) color.Color"));
		mapType.get("image/draw")
				.add(new TypeGoLangApiSignature("image/draw", "RGBA64Image interface, Set(int, int, color.Color)"));

		pkgs.add("syscall (openbsd-amd64)");
		mapConst.putIfAbsent("syscall (openbsd-amd64)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (openbsd-amd64)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (openbsd-amd64)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (openbsd-amd64)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (openbsd-amd64)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "MSG_CMSG_CLOEXEC", null, "ideal-int"));
		mapConst.get("syscall (openbsd-amd64)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-amd64)", "MSG_CMSG_CLOEXEC", " 2048", null));

		pkgs.add("database/sql");
		mapConst.putIfAbsent("database/sql", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("database/sql", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("database/sql", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("database/sql", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("database/sql", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("database/sql").add(new MethodGoLangApiSignature("database/sql", "*NullByte", "Scan",
				new String[] { "interface{}" }, new String[] { "error" }));
		mapType.get("database/sql").add(new TypeGoLangApiSignature("database/sql", "NullByte struct"));
		mapMethod.get("database/sql").add(new MethodGoLangApiSignature("database/sql", "*NullInt16", "Scan",
				new String[] { "interface{}" }, new String[] { "error" }));
		mapType.get("database/sql").add(new TypeGoLangApiSignature("database/sql", "NullInt16 struct, Valid bool"));
		mapType.get("database/sql").add(new TypeGoLangApiSignature("database/sql", "NullByte struct, Valid bool"));
		mapMethod.get("database/sql").add(new MethodGoLangApiSignature("database/sql", "NullInt16", "Value",
				new String[] { "" }, new String[] { "driver.Value", " error" }));
		mapType.get("database/sql").add(new TypeGoLangApiSignature("database/sql", "NullByte struct, Byte uint8"));
		mapMethod.get("database/sql").add(new MethodGoLangApiSignature("database/sql", "NullByte", "Value",
				new String[] { "" }, new String[] { "driver.Value", " error" }));
		mapType.get("database/sql").add(new TypeGoLangApiSignature("database/sql", "NullInt16 struct"));
		mapType.get("database/sql").add(new TypeGoLangApiSignature("database/sql", "NullInt16 struct, Int16 int16"));

		pkgs.add("syscall (netbsd-arm64-cgo)");
		mapConst.putIfAbsent("syscall (netbsd-arm64-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (netbsd-arm64-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (netbsd-arm64-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (netbsd-arm64-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (netbsd-arm64-cgo)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (netbsd-arm64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-arm64-cgo)", "WEXITED", " 32", null));
		mapConst.get("syscall (netbsd-arm64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-arm64-cgo)", "SYS_WAIT6", null, "ideal-int"));
		mapConst.get("syscall (netbsd-arm64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-arm64-cgo)", "WEXITED", null, "ideal-int"));
		mapConst.get("syscall (netbsd-arm64-cgo)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-arm64-cgo)", "SYS_WAIT6", " 481", null));

		pkgs.add("syscall (openbsd-386)");
		mapConst.putIfAbsent("syscall (openbsd-386)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (openbsd-386)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (openbsd-386)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (openbsd-386)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (openbsd-386)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "MSG_CMSG_CLOEXEC", null, "ideal-int"));
		mapConst.get("syscall (openbsd-386)")
				.add(new ConstGoLangApiSignature("syscall (openbsd-386)", "MSG_CMSG_CLOEXEC", " 2048", null));

		pkgs.add("syscall (netbsd-arm-cgo)");
		mapConst.putIfAbsent("syscall (netbsd-arm-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (netbsd-arm-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (netbsd-arm-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (netbsd-arm-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (netbsd-arm-cgo)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (netbsd-arm-cgo)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-arm-cgo)", "SYS_WAIT6", " 481", null));
		mapConst.get("syscall (netbsd-arm-cgo)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-arm-cgo)", "WEXITED", " 32", null));
		mapConst.get("syscall (netbsd-arm-cgo)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-arm-cgo)", "SYS_WAIT6", null, "ideal-int"));
		mapConst.get("syscall (netbsd-arm-cgo)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-arm-cgo)", "WEXITED", null, "ideal-int"));

		pkgs.add("runtime/cgo (netbsd-arm64-cgo)");
		mapConst.putIfAbsent("runtime/cgo (netbsd-arm64-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("runtime/cgo (netbsd-arm64-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("runtime/cgo (netbsd-arm64-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("runtime/cgo (netbsd-arm64-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("runtime/cgo (netbsd-arm64-cgo)", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("runtime/cgo (netbsd-arm64-cgo)").add(new FuncGoLangApiSignature("runtime/cgo (netbsd-arm64-cgo)",
				"NewHandle", new String[] { "interface{}" }, new String[] { "Handle" }));
		mapType.get("runtime/cgo (netbsd-arm64-cgo)")
				.add(new TypeGoLangApiSignature("runtime/cgo (netbsd-arm64-cgo)", "Handle uintptr"));
		mapMethod.get("runtime/cgo (netbsd-arm64-cgo)")
				.add(new MethodGoLangApiSignature("runtime/cgo (netbsd-arm64-cgo)", "Handle", "Value",
						new String[] { "" }, new String[] { "interface{}" }));
		mapMethod.get("runtime/cgo (netbsd-arm64-cgo)").add(new MethodGoLangApiSignature(
				"runtime/cgo (netbsd-arm64-cgo)", "Handle", "Delete", new String[] { "" }, new String[] { "" }));

		pkgs.add("strconv");
		mapConst.putIfAbsent("strconv", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("strconv", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("strconv", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("strconv", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("strconv", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("strconv").add(new FuncGoLangApiSignature("strconv", "QuotedPrefix", new String[] { "string" },
				new String[] { "string", " error" }));

		pkgs.add("syscall (netbsd-386-cgo)");
		mapConst.putIfAbsent("syscall (netbsd-386-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (netbsd-386-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (netbsd-386-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (netbsd-386-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (netbsd-386-cgo)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (netbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-386-cgo)", "SYS_WAIT6", " 481", null));
		mapConst.get("syscall (netbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-386-cgo)", "WEXITED", " 32", null));
		mapConst.get("syscall (netbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-386-cgo)", "WEXITED", null, "ideal-int"));
		mapConst.get("syscall (netbsd-386-cgo)")
				.add(new ConstGoLangApiSignature("syscall (netbsd-386-cgo)", "SYS_WAIT6", null, "ideal-int"));

		pkgs.add("text/template/parse");
		mapConst.putIfAbsent("text/template/parse", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("text/template/parse", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("text/template/parse", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("text/template/parse", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("text/template/parse", new HashSet<VarGoLangApiSignature>());

		mapConst.get("text/template/parse")
				.add(new ConstGoLangApiSignature("text/template/parse", "SkipFuncCheck", " 2", null));
		mapConst.get("text/template/parse")
				.add(new ConstGoLangApiSignature("text/template/parse", "SkipFuncCheck", null, "Mode"));

		pkgs.add("go/build");
		mapConst.putIfAbsent("go/build", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("go/build", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("go/build", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("go/build", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("go/build", new HashSet<VarGoLangApiSignature>());

		mapType.get("go/build").add(new TypeGoLangApiSignature("go/build", "Context struct, ToolTags []string"));

		pkgs.add("math");
		mapConst.putIfAbsent("math", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("math", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("math", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("math", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("math", new HashSet<VarGoLangApiSignature>());

		mapConst.get("math").add(new ConstGoLangApiSignature("math", "MinInt", null, "ideal-int"));
		mapConst.get("math").add(new ConstGoLangApiSignature("math", "MinInt", " -9223372036854775808", null));
		mapConst.get("math").add(new ConstGoLangApiSignature("math", "MaxFloat64", " 1.79769e+308  ", null));
		mapConst.get("math").add(new ConstGoLangApiSignature("math", "MaxInt", " 9223372036854775807", null));
		mapConst.get("math").add(new ConstGoLangApiSignature("math", "MaxInt", null, "ideal-int"));
		mapConst.get("math")
				.add(new ConstGoLangApiSignature("math", "SmallestNonzeroFloat64", " 4.94066e-324  ", null));
		mapConst.get("math").add(new ConstGoLangApiSignature("math", "MaxUint", " 18446744073709551615", null));
		mapConst.get("math").add(new ConstGoLangApiSignature("math", "MaxUint", null, "ideal-int"));
		mapConst.get("math").add(new ConstGoLangApiSignature("math", "SmallestNonzeroFloat32", " 1.4013e-45  ", null));

		pkgs.add("runtime/cgo (netbsd-386-cgo)");
		mapConst.putIfAbsent("runtime/cgo (netbsd-386-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("runtime/cgo (netbsd-386-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("runtime/cgo (netbsd-386-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("runtime/cgo (netbsd-386-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("runtime/cgo (netbsd-386-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("runtime/cgo (netbsd-386-cgo)")
				.add(new TypeGoLangApiSignature("runtime/cgo (netbsd-386-cgo)", "Handle uintptr"));
		mapFunc.get("runtime/cgo (netbsd-386-cgo)").add(new FuncGoLangApiSignature("runtime/cgo (netbsd-386-cgo)",
				"NewHandle", new String[] { "interface{}" }, new String[] { "Handle" }));
		mapMethod.get("runtime/cgo (netbsd-386-cgo)").add(new MethodGoLangApiSignature("runtime/cgo (netbsd-386-cgo)",
				"Handle", "Value", new String[] { "" }, new String[] { "interface{}" }));
		mapMethod.get("runtime/cgo (netbsd-386-cgo)").add(new MethodGoLangApiSignature("runtime/cgo (netbsd-386-cgo)",
				"Handle", "Delete", new String[] { "" }, new String[] { "" }));

		pkgs.add("time");
		mapConst.putIfAbsent("time", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("time", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("time", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("time", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("time", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("time").add(
				new MethodGoLangApiSignature("time", "Time", "IsDST", new String[] { "" }, new String[] { "bool" }));
		mapFunc.get("time").add(
				new FuncGoLangApiSignature("time", "UnixMicro", new String[] { "int64" }, new String[] { "Time" }));
		mapFunc.get("time").add(
				new FuncGoLangApiSignature("time", "UnixMilli", new String[] { "int64" }, new String[] { "Time" }));
		mapMethod.get("time").add(new MethodGoLangApiSignature("time", "Time", "UnixMicro", new String[] { "" },
				new String[] { "int64" }));
		mapMethod.get("time").add(new MethodGoLangApiSignature("time", "Time", "GoString", new String[] { "" },
				new String[] { "string" }));
		mapConst.get("time").add(new ConstGoLangApiSignature("time", "Layout", null, "ideal-string"));
		mapConst.get("time")
				.add(new ConstGoLangApiSignature("time", "Layout", " \"01/02 03:04:05PM '06 -0700\"", null));
		mapMethod.get("time").add(new MethodGoLangApiSignature("time", "Time", "UnixMilli", new String[] { "" },
				new String[] { "int64" }));

		pkgs.add("debug/elf");
		mapConst.putIfAbsent("debug/elf", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("debug/elf", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("debug/elf", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("debug/elf", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("debug/elf", new HashSet<VarGoLangApiSignature>());

		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "SHT_MIPS_ABIFLAGS", " 1879048234", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "SHT_MIPS_ABIFLAGS", null, "SectionType"));

		pkgs.add("go/parser");
		mapConst.putIfAbsent("go/parser", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("go/parser", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("go/parser", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("go/parser", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("go/parser", new HashSet<VarGoLangApiSignature>());

		mapConst.get("go/parser").add(new ConstGoLangApiSignature("go/parser", "SkipObjectResolution", null, "Mode"));
		mapConst.get("go/parser").add(new ConstGoLangApiSignature("go/parser", "SkipObjectResolution", " 64", null));

		pkgs.add("net/url");
		mapConst.putIfAbsent("net/url", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net/url", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net/url", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net/url", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net/url", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("net/url").add(new MethodGoLangApiSignature("net/url", "Values", "Has", new String[] { "string" },
				new String[] { "bool" }));

		pkgs.add("runtime/cgo (linux-arm-cgo)");
		mapConst.putIfAbsent("runtime/cgo (linux-arm-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("runtime/cgo (linux-arm-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("runtime/cgo (linux-arm-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("runtime/cgo (linux-arm-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("runtime/cgo (linux-arm-cgo)", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("runtime/cgo (linux-arm-cgo)").add(new FuncGoLangApiSignature("runtime/cgo (linux-arm-cgo)",
				"NewHandle", new String[] { "interface{}" }, new String[] { "Handle" }));
		mapType.get("runtime/cgo (linux-arm-cgo)")
				.add(new TypeGoLangApiSignature("runtime/cgo (linux-arm-cgo)", "Handle uintptr"));
		mapMethod.get("runtime/cgo (linux-arm-cgo)").add(new MethodGoLangApiSignature("runtime/cgo (linux-arm-cgo)",
				"Handle", "Value", new String[] { "" }, new String[] { "interface{}" }));
		mapMethod.get("runtime/cgo (linux-arm-cgo)").add(new MethodGoLangApiSignature("runtime/cgo (linux-arm-cgo)",
				"Handle", "Delete", new String[] { "" }, new String[] { "" }));

		pkgs.add("runtime/cgo (openbsd-amd64-cgo)");
		mapConst.putIfAbsent("runtime/cgo (openbsd-amd64-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("runtime/cgo (openbsd-amd64-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("runtime/cgo (openbsd-amd64-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("runtime/cgo (openbsd-amd64-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("runtime/cgo (openbsd-amd64-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("runtime/cgo (openbsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("runtime/cgo (openbsd-amd64-cgo)", "Handle uintptr"));
		mapFunc.get("runtime/cgo (openbsd-amd64-cgo)").add(new FuncGoLangApiSignature("runtime/cgo (openbsd-amd64-cgo)",
				"NewHandle", new String[] { "interface{}" }, new String[] { "Handle" }));
		mapMethod.get("runtime/cgo (openbsd-amd64-cgo)")
				.add(new MethodGoLangApiSignature("runtime/cgo (openbsd-amd64-cgo)", "Handle", "Value",
						new String[] { "" }, new String[] { "interface{}" }));
		mapMethod.get("runtime/cgo (openbsd-amd64-cgo)").add(new MethodGoLangApiSignature(
				"runtime/cgo (openbsd-amd64-cgo)", "Handle", "Delete", new String[] { "" }, new String[] { "" }));

		pkgs.add("syscall (windows-amd64)");
		mapConst.putIfAbsent("syscall (windows-amd64)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (windows-amd64)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (windows-amd64)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (windows-amd64)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (windows-amd64)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (windows-amd64)").add(new TypeGoLangApiSignature("syscall (windows-amd64)",
				"SysProcAttr struct, AdditionalInheritedHandles []Handle"));
		mapType.get("syscall (windows-amd64)")
				.add(new TypeGoLangApiSignature("syscall (windows-amd64)", "SysProcAttr struct, ParentProcess Handle"));

	}

}