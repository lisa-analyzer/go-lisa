package it.unive.golisa.golang.util;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import it.unive.golisa.golang.api.signature.ConstGoLangApiSignature;
import it.unive.golisa.golang.api.signature.FuncGoLangApiSignature;
import it.unive.golisa.golang.api.signature.MethodGoLangApiSignature;
import it.unive.golisa.golang.api.signature.TypeGoLangApiSignature;
import it.unive.golisa.golang.api.signature.VarGoLangApiSignature;

/**
 * Auto-generated by GoLiSA build
 */
public class Go1_4 {
	private final Map<String, Set<ConstGoLangApiSignature>> mapConst;
	private final Map<String, Set<FuncGoLangApiSignature>> mapFunc;
	private final Map<String, Set<MethodGoLangApiSignature>> mapMethod;
	private final Map<String, Set<TypeGoLangApiSignature>> mapType;
	private final Map<String, Set<VarGoLangApiSignature>> mapVar;
	private final Set<String> pkgs;

	public Go1_4() {
		pkgs = new HashSet<>();
		mapConst = new HashMap<String, Set<ConstGoLangApiSignature>>();
		mapFunc = new HashMap<String, Set<FuncGoLangApiSignature>>();
		mapMethod = new HashMap<String, Set<MethodGoLangApiSignature>>();
		mapType = new HashMap<String, Set<TypeGoLangApiSignature>>();
		mapVar = new HashMap<String, Set<VarGoLangApiSignature>>();

		build();
	}

	public Set<String> getPackages() {
		return pkgs;
	}

	public Map<String, Set<ConstGoLangApiSignature>> getMapConst() {
		return mapConst;
	}

	public Map<String, Set<FuncGoLangApiSignature>> getMapFunc() {
		return mapFunc;
	}

	public Map<String, Set<MethodGoLangApiSignature>> getMapMethod() {
		return mapMethod;
	}

	public Map<String, Set<TypeGoLangApiSignature>> getMapType() {
		return mapType;
	}

	public Map<String, Set<VarGoLangApiSignature>> getMapVar() {
		return mapVar;
	}

	private void build() {
		build0();
		build1();
	}

	private void build0() {
		pkgs.add("crypto/tls");
		mapConst.putIfAbsent("crypto/tls", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("crypto/tls", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("crypto/tls", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("crypto/tls", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("crypto/tls", new HashSet<VarGoLangApiSignature>());

		mapType.get("crypto/tls")
				.add(new TypeGoLangApiSignature("crypto/tls", "ClientHelloInfo struct, SupportedPoints []uint8"));
		mapType.get("crypto/tls")
				.add(new TypeGoLangApiSignature("crypto/tls", "ClientHelloInfo struct, ServerName string"));
		mapType.get("crypto/tls").add(new TypeGoLangApiSignature("crypto/tls", "ClientHelloInfo struct"));
		mapType.get("crypto/tls")
				.add(new TypeGoLangApiSignature("crypto/tls", "ConnectionState struct, TLSUnique []uint8"));
		mapType.get("crypto/tls")
				.add(new TypeGoLangApiSignature("crypto/tls", "ClientHelloInfo struct, SupportedCurves []CurveID"));
		mapType.get("crypto/tls")
				.add(new TypeGoLangApiSignature("crypto/tls", "ClientHelloInfo struct, CipherSuites []uint16"));
		mapConst.get("crypto/tls").add(new ConstGoLangApiSignature("crypto/tls", "TLS_FALLBACK_SCSV", " 22016", null));
		mapConst.get("crypto/tls").add(new ConstGoLangApiSignature("crypto/tls", "TLS_FALLBACK_SCSV", null, "uint16"));
		mapType.get("crypto/tls").add(new TypeGoLangApiSignature("crypto/tls",
				"Config struct, GetCertificate func(*ClientHelloInfo) (*Certificate, error)"));

		pkgs.add("syscall");
		mapConst.putIfAbsent("syscall", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("syscall").add(
				new FuncGoLangApiSignature("syscall", "Unsetenv", new String[] { "string" }, new String[] { "error" }));

		pkgs.add("syscall (linux-amd64-cgo)");
		mapConst.putIfAbsent("syscall (linux-amd64-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (linux-amd64-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (linux-amd64-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (linux-amd64-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (linux-amd64-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (linux-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (linux-amd64-cgo)", "SysProcIDMap struct"));
		mapType.get("syscall (linux-amd64-cgo)").add(new TypeGoLangApiSignature("syscall (linux-amd64-cgo)",
				"SysProcAttr struct, GidMappings []SysProcIDMap"));
		mapType.get("syscall (linux-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (linux-amd64-cgo)", "SysProcIDMap struct, HostID int"));
		mapType.get("syscall (linux-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (linux-amd64-cgo)", "SysProcIDMap struct, ContainerID int"));
		mapType.get("syscall (linux-amd64-cgo)").add(new TypeGoLangApiSignature("syscall (linux-amd64-cgo)",
				"SysProcAttr struct, UidMappings []SysProcIDMap"));
		mapType.get("syscall (linux-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (linux-amd64-cgo)", "SysProcIDMap struct, Size int"));

		pkgs.add("syscall (linux-386)");
		mapConst.putIfAbsent("syscall (linux-386)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (linux-386)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (linux-386)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (linux-386)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (linux-386)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (linux-386)")
				.add(new TypeGoLangApiSignature("syscall (linux-386)", "SysProcIDMap struct"));
		mapType.get("syscall (linux-386)")
				.add(new TypeGoLangApiSignature("syscall (linux-386)", "SysProcIDMap struct, ContainerID int"));
		mapType.get("syscall (linux-386)").add(
				new TypeGoLangApiSignature("syscall (linux-386)", "SysProcAttr struct, GidMappings []SysProcIDMap"));
		mapType.get("syscall (linux-386)")
				.add(new TypeGoLangApiSignature("syscall (linux-386)", "SysProcIDMap struct, HostID int"));
		mapType.get("syscall (linux-386)").add(
				new TypeGoLangApiSignature("syscall (linux-386)", "SysProcAttr struct, UidMappings []SysProcIDMap"));
		mapType.get("syscall (linux-386)")
				.add(new TypeGoLangApiSignature("syscall (linux-386)", "SysProcIDMap struct, Size int"));

		pkgs.add("syscall (linux-arm-cgo)");
		mapConst.putIfAbsent("syscall (linux-arm-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (linux-arm-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (linux-arm-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (linux-arm-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (linux-arm-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (linux-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (linux-arm-cgo)", "SysProcIDMap struct"));
		mapType.get("syscall (linux-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (linux-arm-cgo)", "SysProcIDMap struct, HostID int"));
		mapType.get("syscall (linux-arm-cgo)").add(new TypeGoLangApiSignature("syscall (linux-arm-cgo)",
				"SysProcAttr struct, UidMappings []SysProcIDMap"));
		mapType.get("syscall (linux-arm-cgo)").add(new TypeGoLangApiSignature("syscall (linux-arm-cgo)",
				"SysProcAttr struct, GidMappings []SysProcIDMap"));
		mapType.get("syscall (linux-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (linux-arm-cgo)", "SysProcIDMap struct, ContainerID int"));
		mapType.get("syscall (linux-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (linux-arm-cgo)", "SysProcIDMap struct, Size int"));

		pkgs.add("compress/flate");
		mapConst.putIfAbsent("compress/flate", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("compress/flate", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("compress/flate", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("compress/flate", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("compress/flate", new HashSet<VarGoLangApiSignature>());

		mapType.get("compress/flate").add(new TypeGoLangApiSignature("compress/flate", "Resetter interface { Reset }"));
		mapType.get("compress/flate").add(
				new TypeGoLangApiSignature("compress/flate", "Resetter interface, Reset(io.Reader, []uint8) error"));

		pkgs.add("debug/plan9obj");
		mapConst.putIfAbsent("debug/plan9obj", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("debug/plan9obj", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("debug/plan9obj", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("debug/plan9obj", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("debug/plan9obj", new HashSet<VarGoLangApiSignature>());

		mapType.get("debug/plan9obj")
				.add(new TypeGoLangApiSignature("debug/plan9obj", "FileHeader struct, HdrSize uint64"));
		mapType.get("debug/plan9obj")
				.add(new TypeGoLangApiSignature("debug/plan9obj", "FileHeader struct, LoadAddress uint64"));

		pkgs.add("sync/atomic");
		mapConst.putIfAbsent("sync/atomic", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("sync/atomic", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("sync/atomic", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("sync/atomic", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("sync/atomic", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("sync/atomic").add(new MethodGoLangApiSignature("sync/atomic", "*Value", "Store",
				new String[] { "interface{}" }, new String[] { "" }));
		mapMethod.get("sync/atomic").add(new MethodGoLangApiSignature("sync/atomic", "*Value", "Load",
				new String[] { "" }, new String[] { "interface{}" }));
		mapType.get("sync/atomic").add(new TypeGoLangApiSignature("sync/atomic", "Value struct"));

		pkgs.add("encoding/xml");
		mapConst.putIfAbsent("encoding/xml", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("encoding/xml", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("encoding/xml", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("encoding/xml", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("encoding/xml", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("encoding/xml").add(new MethodGoLangApiSignature("encoding/xml", "*Decoder", "InputOffset",
				new String[] { "" }, new String[] { "int64" }));

		pkgs.add("reflect");
		mapConst.putIfAbsent("reflect", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("reflect", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("reflect", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("reflect", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("reflect", new HashSet<VarGoLangApiSignature>());

		mapType.get("reflect").add(new TypeGoLangApiSignature("reflect", "Type interface, Comparable() bool"));

		pkgs.add("compress/gzip");
		mapConst.putIfAbsent("compress/gzip", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("compress/gzip", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("compress/gzip", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("compress/gzip", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("compress/gzip", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("compress/gzip").add(new MethodGoLangApiSignature("compress/gzip", "*Reader", "Multistream",
				new String[] { "bool" }, new String[] { "" }));

		pkgs.add("crypto/x509");
		mapConst.putIfAbsent("crypto/x509", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("crypto/x509", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("crypto/x509", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("crypto/x509", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("crypto/x509", new HashSet<VarGoLangApiSignature>());

		mapType.get("crypto/x509")
				.add(new TypeGoLangApiSignature("crypto/x509", "Certificate struct, MaxPathLenZero bool"));

		pkgs.add("runtime/debug");
		mapConst.putIfAbsent("runtime/debug", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("runtime/debug", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("runtime/debug", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("runtime/debug", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("runtime/debug", new HashSet<VarGoLangApiSignature>());

		mapType.get("runtime/debug")
				.add(new TypeGoLangApiSignature("runtime/debug", "GCStats struct, PauseEnd []time.Time"));

		pkgs.add("crypto/rsa");
		mapConst.putIfAbsent("crypto/rsa", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("crypto/rsa", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("crypto/rsa", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("crypto/rsa", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("crypto/rsa", new HashSet<VarGoLangApiSignature>());

		mapType.get("crypto/rsa").add(new TypeGoLangApiSignature("crypto/rsa", "PSSOptions struct, Hash crypto.Hash"));
		mapMethod.get("crypto/rsa").add(new MethodGoLangApiSignature("crypto/rsa", "*PrivateKey", "Public",
				new String[] { "" }, new String[] { "crypto.PublicKey" }));
		mapMethod.get("crypto/rsa").add(new MethodGoLangApiSignature("crypto/rsa", "*PrivateKey", "Sign",
				new String[] { "io.Reader", " []uint8", " crypto.SignerOpts" }, new String[] { "[]uint8", " error" }));
		mapMethod.get("crypto/rsa").add(new MethodGoLangApiSignature("crypto/rsa", "*PSSOptions", "HashFunc",
				new String[] { "" }, new String[] { "crypto.Hash" }));

		pkgs.add("debug/dwarf");
		mapConst.putIfAbsent("debug/dwarf", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("debug/dwarf", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("debug/dwarf", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("debug/dwarf", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("debug/dwarf", new HashSet<VarGoLangApiSignature>());

		mapType.get("debug/dwarf")
				.add(new TypeGoLangApiSignature("debug/dwarf", "UnspecifiedType struct, embedded BasicType"));
		mapMethod.get("debug/dwarf").add(new MethodGoLangApiSignature("debug/dwarf", "*UnspecifiedType", "String",
				new String[] { "" }, new String[] { "string" }));
		mapMethod.get("debug/dwarf").add(new MethodGoLangApiSignature("debug/dwarf", "*UnspecifiedType", "Size",
				new String[] { "" }, new String[] { "int64" }));
		mapMethod.get("debug/dwarf").add(new MethodGoLangApiSignature("debug/dwarf", "*UnspecifiedType", "Basic",
				new String[] { "" }, new String[] { "*BasicType" }));
		mapType.get("debug/dwarf").add(new TypeGoLangApiSignature("debug/dwarf", "UnspecifiedType struct"));
		mapMethod.get("debug/dwarf").add(new MethodGoLangApiSignature("debug/dwarf", "*UnspecifiedType", "Common",
				new String[] { "" }, new String[] { "*CommonType" }));

		pkgs.add("syscall (windows-386)");
		mapConst.putIfAbsent("syscall (windows-386)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (windows-386)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (windows-386)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (windows-386)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (windows-386)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "SYMBOLIC_LINK_FLAG_DIRECTORY", " 1", null));
		mapType.get("syscall (windows-386)")
				.add(new TypeGoLangApiSignature("syscall (windows-386)", "ProcessEntry32 struct, ProcessID uint32"));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "DnsSectionAuthority", " 2", null));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "DNS_INFO_NO_RECORDS", null, "ideal-int"));
		mapFunc.get("syscall (windows-386)").add(new FuncGoLangApiSignature("syscall (windows-386)", "DnsNameCompare",
				new String[] { "*uint16", " *uint16" }, new String[] { "bool" }));
		mapConst.get("syscall (windows-386)").add(
				new ConstGoLangApiSignature("syscall (windows-386)", "IO_REPARSE_TAG_SYMLINK", " 2684354572", null));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "TH32CS_INHERIT", null, "ideal-int"));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "TH32CS_SNAPMODULE", " 8", null));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "ERROR_PRIVILEGE_NOT_HELD", " 1314", null));
		mapFunc.get("syscall (windows-386)").add(new FuncGoLangApiSignature("syscall (windows-386)",
				"LoadCreateSymbolicLink", new String[] { "" }, new String[] { "error" }));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "TH32CS_SNAPPROCESS", null, "ideal-int"));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "SIO_UDP_CONNRESET", null, "ideal-int"));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "TH32CS_SNAPHEAPLIST", " 1", null));
		mapFunc.get("syscall (windows-386)")
				.add(new FuncGoLangApiSignature(
						"syscall (windows-386)", "DeviceIoControl", new String[] { "Handle", " uint32", " *uint8",
								" uint32", " *uint8", " uint32", " *uint32", " *Overlapped" },
						new String[] { "error" }));
		mapConst.get("syscall (windows-386)").add(new ConstGoLangApiSignature("syscall (windows-386)",
				"SYMBOLIC_LINK_FLAG_DIRECTORY", null, "ideal-int"));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "TH32CS_SNAPMODULE32", null, "ideal-int"));
		mapConst.get("syscall (windows-386)").add(new ConstGoLangApiSignature("syscall (windows-386)",
				"FILE_FLAG_OPEN_REPARSE_POINT", null, "ideal-int"));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "TH32CS_INHERIT", " 2147483648", null));
		mapType.get("syscall (windows-386)")
				.add(new TypeGoLangApiSignature("syscall (windows-386)", "ProcessEntry32 struct, PriClassBase int32"));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "IO_REPARSE_TAG_SYMLINK", null, "ideal-int"));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "TH32CS_SNAPHEAPLIST", null, "ideal-int"));
		mapFunc.get("syscall (windows-386)").add(new FuncGoLangApiSignature("syscall (windows-386)", "Process32Next",
				new String[] { "Handle", " *ProcessEntry32" }, new String[] { "error" }));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "TH32CS_SNAPPROCESS", " 2", null));
		mapConst.get("syscall (windows-386)").add(new ConstGoLangApiSignature("syscall (windows-386)",
				"FILE_ATTRIBUTE_REPARSE_POINT", null, "ideal-int"));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "DnsSectionAnswer", " 1", null));
		mapType.get("syscall (windows-386)")
				.add(new TypeGoLangApiSignature("syscall (windows-386)", "ProcessEntry32 struct, ModuleID uint32"));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "DnsSectionAdditional", null, "ideal-int"));
		mapConst.get("syscall (windows-386)").add(new ConstGoLangApiSignature("syscall (windows-386)",
				"MAXIMUM_REPARSE_DATA_BUFFER_SIZE", null, "ideal-int"));
		mapType.get("syscall (windows-386)")
				.add(new TypeGoLangApiSignature("syscall (windows-386)", "ProcessEntry32 struct, Threads uint32"));
		mapFunc.get("syscall (windows-386)").add(new FuncGoLangApiSignature("syscall (windows-386)", "FullPath",
				new String[] { "string" }, new String[] { "string", " error" }));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "TH32CS_SNAPTHREAD", " 4", null));
		mapConst.get("syscall (windows-386)").add(
				new ConstGoLangApiSignature("syscall (windows-386)", "FSCTL_GET_REPARSE_POINT", null, "ideal-int"));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "SIO_UDP_CONNRESET", " 2550136844", null));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "ERROR_PRIVILEGE_NOT_HELD", null, "Errno"));
		mapType.get("syscall (windows-386)").add(
				new TypeGoLangApiSignature("syscall (windows-386)", "ProcessEntry32 struct, DefaultHeapID uintptr"));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "FSCTL_GET_REPARSE_POINT", " 589992", null));
		mapFunc.get("syscall (windows-386)").add(new FuncGoLangApiSignature("syscall (windows-386)",
				"CreateSymbolicLink", new String[] { "*uint16", " *uint16", " uint32" }, new String[] { "error" }));
		mapFunc.get("syscall (windows-386)").add(new FuncGoLangApiSignature("syscall (windows-386)", "CreateHardLink",
				new String[] { "*uint16", " *uint16", " uintptr" }, new String[] { "error" }));
		mapConst.get("syscall (windows-386)").add(
				new ConstGoLangApiSignature("syscall (windows-386)", "FILE_FLAG_OPEN_REPARSE_POINT", " 2097152", null));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "TH32CS_SNAPMODULE32", " 16", null));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "DnsSectionQuestion", " 0", null));
		mapConst.get("syscall (windows-386)").add(new ConstGoLangApiSignature("syscall (windows-386)",
				"MAXIMUM_REPARSE_DATA_BUFFER_SIZE", " 16384", null));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "DnsSectionQuestion", null, "ideal-int"));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "TH32CS_SNAPTHREAD", null, "ideal-int"));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "TH32CS_SNAPALL", null, "ideal-int"));
		mapType.get("syscall (windows-386)")
				.add(new TypeGoLangApiSignature("syscall (windows-386)", "ProcessEntry32 struct, Size uint32"));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "DnsSectionAnswer", null, "ideal-int"));
		mapFunc.get("syscall (windows-386)").add(new FuncGoLangApiSignature("syscall (windows-386)",
				"CreateToolhelp32Snapshot", new String[] { "uint32", " uint32" }, new String[] { "Handle", " error" }));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "TH32CS_SNAPALL", " 15", null));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "TH32CS_SNAPMODULE", null, "ideal-int"));
		mapType.get("syscall (windows-386)").add(
				new TypeGoLangApiSignature("syscall (windows-386)", "ProcessEntry32 struct, ParentProcessID uint32"));
		mapType.get("syscall (windows-386)")
				.add(new TypeGoLangApiSignature("syscall (windows-386)", "ProcessEntry32 struct"));
		mapType.get("syscall (windows-386)")
				.add(new TypeGoLangApiSignature("syscall (windows-386)", "ProcessEntry32 struct, Flags uint32"));
		mapType.get("syscall (windows-386)")
				.add(new TypeGoLangApiSignature("syscall (windows-386)", "ProcessEntry32 struct, Usage uint32"));
		mapFunc.get("syscall (windows-386)").add(new FuncGoLangApiSignature("syscall (windows-386)", "Process32First",
				new String[] { "Handle", " *ProcessEntry32" }, new String[] { "error" }));
		mapType.get("syscall (windows-386)")
				.add(new TypeGoLangApiSignature("syscall (windows-386)", "ProcessEntry32 struct, ExeFile [260]uint16"));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "DnsSectionAuthority", null, "ideal-int"));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "DnsSectionAdditional", " 3", null));
		mapConst.get("syscall (windows-386)").add(
				new ConstGoLangApiSignature("syscall (windows-386)", "FILE_ATTRIBUTE_REPARSE_POINT", " 1024", null));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "DNS_INFO_NO_RECORDS", " 9501", null));

		pkgs.add("image");
		mapConst.putIfAbsent("image", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("image", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("image", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("image", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("image", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*Alpha", "AlphaAt",
				new String[] { "int", " int" }, new String[] { "color.Alpha" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*RGBA64", "RGBA64At",
				new String[] { "int", " int" }, new String[] { "color.RGBA64" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*YCbCr", "YCbCrAt",
				new String[] { "int", " int" }, new String[] { "color.YCbCr" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*RGBA", "RGBAAt",
				new String[] { "int", " int" }, new String[] { "color.RGBA" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*Gray", "GrayAt",
				new String[] { "int", " int" }, new String[] { "color.Gray" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*NRGBA64", "NRGBA64At",
				new String[] { "int", " int" }, new String[] { "color.NRGBA64" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*Alpha16", "Alpha16At",
				new String[] { "int", " int" }, new String[] { "color.Alpha16" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*NRGBA", "NRGBAAt",
				new String[] { "int", " int" }, new String[] { "color.NRGBA" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*Gray16", "Gray16At",
				new String[] { "int", " int" }, new String[] { "color.Gray16" }));

		pkgs.add("image/png");
		mapConst.putIfAbsent("image/png", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("image/png", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("image/png", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("image/png", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("image/png", new HashSet<VarGoLangApiSignature>());

		mapConst.get("image/png").add(new ConstGoLangApiSignature("image/png", "BestSpeed", null, "CompressionLevel"));
		mapConst.get("image/png").add(new ConstGoLangApiSignature("image/png", "BestSpeed", " -2", null));
		mapConst.get("image/png").add(new ConstGoLangApiSignature("image/png", "DefaultCompression", " 0", null));
		mapConst.get("image/png")
				.add(new ConstGoLangApiSignature("image/png", "NoCompression", null, "CompressionLevel"));
		mapType.get("image/png").add(new TypeGoLangApiSignature("image/png", "CompressionLevel int"));
		mapConst.get("image/png")
				.add(new ConstGoLangApiSignature("image/png", "BestCompression", null, "CompressionLevel"));
		mapConst.get("image/png").add(new ConstGoLangApiSignature("image/png", "NoCompression", " -1", null));
		mapConst.get("image/png").add(new ConstGoLangApiSignature("image/png", "BestCompression", " -3", null));
		mapType.get("image/png").add(new TypeGoLangApiSignature("image/png", "Encoder struct"));
		mapType.get("image/png")
				.add(new TypeGoLangApiSignature("image/png", "Encoder struct, CompressionLevel CompressionLevel"));
		mapConst.get("image/png")
				.add(new ConstGoLangApiSignature("image/png", "DefaultCompression", null, "CompressionLevel"));
		mapMethod.get("image/png").add(new MethodGoLangApiSignature("image/png", "*Encoder", "Encode",
				new String[] { "io.Writer", " image.Image" }, new String[] { "error" }));

		pkgs.add("os");
		mapConst.putIfAbsent("os", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("os", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("os", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("os", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("os", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("os")
				.add(new FuncGoLangApiSignature("os", "Unsetenv", new String[] { "string" }, new String[] { "error" }));

		pkgs.add("compress/zlib");
		mapConst.putIfAbsent("compress/zlib", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("compress/zlib", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("compress/zlib", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("compress/zlib", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("compress/zlib", new HashSet<VarGoLangApiSignature>());

		mapType.get("compress/zlib").add(
				new TypeGoLangApiSignature("compress/zlib", "Resetter interface, Reset(io.Reader, []uint8) error"));
		mapType.get("compress/zlib").add(new TypeGoLangApiSignature("compress/zlib", "Resetter interface { Reset }"));

		pkgs.add("go/token");
		mapConst.putIfAbsent("go/token", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("go/token", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("go/token", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("go/token", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("go/token", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("go/token").add(new MethodGoLangApiSignature("go/token", "*FileSet", "PositionFor",
				new String[] { "Pos", " bool" }, new String[] { "Position" }));
		mapMethod.get("go/token").add(new MethodGoLangApiSignature("go/token", "*File", "PositionFor",
				new String[] { "Pos", " bool" }, new String[] { "Position" }));

		pkgs.add("net/http/httputil");
		mapConst.putIfAbsent("net/http/httputil", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net/http/httputil", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net/http/httputil", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net/http/httputil", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net/http/httputil", new HashSet<VarGoLangApiSignature>());

		mapType.get("net/http/httputil")
				.add(new TypeGoLangApiSignature("net/http/httputil", "ReverseProxy struct, ErrorLog *log.Logger"));

		pkgs.add("math/big");
		mapConst.putIfAbsent("math/big", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("math/big", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("math/big", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("math/big", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("math/big", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Rat", "Float32", new String[] { "" },
				new String[] { "float32", " bool" }));

		pkgs.add("testing");
		mapConst.putIfAbsent("testing", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("testing", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("testing", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("testing", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("testing", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("testing")
				.add(new MethodGoLangApiSignature("testing", "*M", "Run", new String[] { "" }, new String[] { "int" }));
		mapFunc.get("testing").add(
				new FuncGoLangApiSignature("testing", "Coverage", new String[] { "" }, new String[] { "float64" }));
		mapFunc.get("testing").add(new FuncGoLangApiSignature("testing", "MainStart",
				new String[] { "func(string", " string" },
				new String[] { "bool", " error", " []InternalTest", " []InternalBenchmark", " []InternalExample *M" }));
		mapType.get("testing").add(new TypeGoLangApiSignature("testing", "M struct"));

		pkgs.add("archive/zip");
		mapConst.putIfAbsent("archive/zip", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("archive/zip", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("archive/zip", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("archive/zip", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("archive/zip", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("archive/zip").add(new MethodGoLangApiSignature("archive/zip", "*Writer", "Flush",
				new String[] { "" }, new String[] { "error" }));

		pkgs.add("runtime");
		mapConst.putIfAbsent("runtime", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("runtime", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("runtime", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("runtime", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("runtime", new HashSet<VarGoLangApiSignature>());

		mapType.get("runtime").add(new TypeGoLangApiSignature("runtime", "MemStats struct, PauseEnd [256]uint64"));

		pkgs.add("net/http");
		mapConst.putIfAbsent("net/http", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net/http", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net/http", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net/http", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net/http", new HashSet<VarGoLangApiSignature>());

		mapType.get("net/http").add(new TypeGoLangApiSignature("net/http",
				"Transport struct, DialTLS func(string, string) (net.Conn, error)"));
		mapMethod.get("net/http").add(new MethodGoLangApiSignature("net/http", "*Request", "BasicAuth",
				new String[] { "" }, new String[] { "string", " string", " bool" }));

		pkgs.add("database/sql");
		mapConst.putIfAbsent("database/sql", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("database/sql", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("database/sql", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("database/sql", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("database/sql", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("database/sql").add(new FuncGoLangApiSignature("database/sql", "Drivers", new String[] { "" },
				new String[] { "[]string" }));

		pkgs.add("crypto");
		mapConst.putIfAbsent("crypto", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("crypto", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("crypto", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("crypto", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("crypto", new HashSet<VarGoLangApiSignature>());

		mapType.get("crypto").add(new TypeGoLangApiSignature("crypto", "SignerOpts interface, HashFunc() Hash"));
		mapMethod.get("crypto").add(new MethodGoLangApiSignature("crypto", "Hash", "HashFunc", new String[] { "" },
				new String[] { "Hash" }));
		mapType.get("crypto").add(new TypeGoLangApiSignature("crypto", "SignerOpts interface { HashFunc }"));
		mapConst.get("crypto").add(new ConstGoLangApiSignature("crypto", "SHA3_224", " 10", null));
		mapConst.get("crypto").add(new ConstGoLangApiSignature("crypto", "SHA3_512", " 13", null));
		mapConst.get("crypto").add(new ConstGoLangApiSignature("crypto", "SHA3_256", null, "Hash"));
		mapType.get("crypto").add(new TypeGoLangApiSignature("crypto",
				"Signer interface, Sign(io.Reader, []uint8, SignerOpts) ([]uint8, error)"));
		mapConst.get("crypto").add(new ConstGoLangApiSignature("crypto", "SHA3_224", null, "Hash"));
		mapType.get("crypto").add(new TypeGoLangApiSignature("crypto", "Signer interface, Public() PublicKey"));
		mapConst.get("crypto").add(new ConstGoLangApiSignature("crypto", "SHA3_384", " 12", null));
		mapConst.get("crypto").add(new ConstGoLangApiSignature("crypto", "SHA3_384", null, "Hash"));
		mapConst.get("crypto").add(new ConstGoLangApiSignature("crypto", "SHA3_256", " 11", null));
		mapConst.get("crypto").add(new ConstGoLangApiSignature("crypto", "SHA3_512", null, "Hash"));
		mapType.get("crypto").add(new TypeGoLangApiSignature("crypto", "Signer interface { Public, Sign }"));

		pkgs.add("syscall (linux-arm)");
		mapConst.putIfAbsent("syscall (linux-arm)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (linux-arm)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (linux-arm)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (linux-arm)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (linux-arm)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (linux-arm)")
				.add(new TypeGoLangApiSignature("syscall (linux-arm)", "SysProcIDMap struct, ContainerID int"));
		mapType.get("syscall (linux-arm)")
				.add(new TypeGoLangApiSignature("syscall (linux-arm)", "SysProcIDMap struct"));
		mapType.get("syscall (linux-arm)").add(
				new TypeGoLangApiSignature("syscall (linux-arm)", "SysProcAttr struct, GidMappings []SysProcIDMap"));
		mapType.get("syscall (linux-arm)")
				.add(new TypeGoLangApiSignature("syscall (linux-arm)", "SysProcIDMap struct, HostID int"));
		mapType.get("syscall (linux-arm)")
				.add(new TypeGoLangApiSignature("syscall (linux-arm)", "SysProcIDMap struct, Size int"));
		mapType.get("syscall (linux-arm)").add(
				new TypeGoLangApiSignature("syscall (linux-arm)", "SysProcAttr struct, UidMappings []SysProcIDMap"));

		pkgs.add("syscall (linux-386-cgo)");
		mapConst.putIfAbsent("syscall (linux-386-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (linux-386-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (linux-386-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (linux-386-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (linux-386-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (linux-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (linux-386-cgo)", "SysProcIDMap struct, Size int"));
		mapType.get("syscall (linux-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (linux-386-cgo)", "SysProcIDMap struct, HostID int"));
		mapType.get("syscall (linux-386-cgo)").add(new TypeGoLangApiSignature("syscall (linux-386-cgo)",
				"SysProcAttr struct, UidMappings []SysProcIDMap"));
		mapType.get("syscall (linux-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (linux-386-cgo)", "SysProcIDMap struct"));
		mapType.get("syscall (linux-386-cgo)").add(new TypeGoLangApiSignature("syscall (linux-386-cgo)",
				"SysProcAttr struct, GidMappings []SysProcIDMap"));
		mapType.get("syscall (linux-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (linux-386-cgo)", "SysProcIDMap struct, ContainerID int"));

		pkgs.add("crypto/ecdsa");
		mapConst.putIfAbsent("crypto/ecdsa", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("crypto/ecdsa", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("crypto/ecdsa", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("crypto/ecdsa", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("crypto/ecdsa", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("crypto/ecdsa").add(new MethodGoLangApiSignature("crypto/ecdsa", "*PrivateKey", "Public",
				new String[] { "" }, new String[] { "crypto.PublicKey" }));
		mapMethod.get("crypto/ecdsa").add(new MethodGoLangApiSignature("crypto/ecdsa", "*PrivateKey", "Sign",
				new String[] { "io.Reader", " []uint8", " crypto.SignerOpts" }, new String[] { "[]uint8", " error" }));

		pkgs.add("text/template/parse");
		mapConst.putIfAbsent("text/template/parse", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("text/template/parse", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("text/template/parse", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("text/template/parse", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("text/template/parse", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("text/template/parse").add(new MethodGoLangApiSignature("text/template/parse", "*BranchNode",
				"Copy", new String[] { "" }, new String[] { "Node" }));
		mapType.get("text/template/parse")
				.add(new TypeGoLangApiSignature("text/template/parse", "DotNode struct, embedded NodeType"));
		mapType.get("text/template/parse")
				.add(new TypeGoLangApiSignature("text/template/parse", "NilNode struct, embedded NodeType"));
		mapMethod.get("text/template/parse").add(new MethodGoLangApiSignature("text/template/parse", "*IdentifierNode",
				"SetTree", new String[] { "*Tree" }, new String[] { "*IdentifierNode" }));

		pkgs.add("unicode");
		mapConst.putIfAbsent("unicode", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("unicode", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("unicode", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("unicode", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("unicode", new HashSet<VarGoLangApiSignature>());

		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Old_Permic", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Siddham", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Caucasian_Albanian", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Linear_A", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Pahawh_Hmong", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Pau_Cin_Hau", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Palmyrene", "*RangeTable"));
		mapConst.get("unicode").add(new ConstGoLangApiSignature("unicode", "Version", " \"7.0.0\"", null));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Khudawadi", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Khojki", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Manichaean", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Nabataean", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Warang_Citi", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Old_North_Arabian", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Elbasan", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Mro", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Psalter_Pahlavi", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Duployan", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Mahajani", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Modi", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Bassa_Vah", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Mende_Kikakui", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Grantha", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Tirhuta", "*RangeTable"));

		pkgs.add("text/scanner");
		mapConst.putIfAbsent("text/scanner", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("text/scanner", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("text/scanner", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("text/scanner", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("text/scanner", new HashSet<VarGoLangApiSignature>());

		mapType.get("text/scanner")
				.add(new TypeGoLangApiSignature("text/scanner", "Scanner struct, IsIdentRune func(int32, int) bool"));

		pkgs.add("go/build");
		mapConst.putIfAbsent("go/build", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("go/build", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("go/build", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("go/build", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("go/build", new HashSet<VarGoLangApiSignature>());

		mapType.get("go/build").add(new TypeGoLangApiSignature("go/build", "MultiplePackageError struct"));
		mapType.get("go/build")
				.add(new TypeGoLangApiSignature("go/build", "MultiplePackageError struct, Files []string"));
		mapConst.get("go/build").add(new ConstGoLangApiSignature("go/build", "ImportComment", null, "ImportMode"));
		mapConst.get("go/build").add(new ConstGoLangApiSignature("go/build", "ImportComment", " 4", null));
		mapType.get("go/build").add(new TypeGoLangApiSignature("go/build", "Package struct, ImportComment string"));
		mapType.get("go/build").add(new TypeGoLangApiSignature("go/build", "MultiplePackageError struct, Dir string"));
		mapType.get("go/build")
				.add(new TypeGoLangApiSignature("go/build", "MultiplePackageError struct, Packages []string"));
		mapMethod.get("go/build").add(new MethodGoLangApiSignature("go/build", "*MultiplePackageError", "Error",
				new String[] { "" }, new String[] { "string" }));

		pkgs.add("math");
		mapConst.putIfAbsent("math", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("math", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("math", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("math", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("math", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("math").add(new FuncGoLangApiSignature("math", "Nextafter32",
				new String[] { "float32", " float32" }, new String[] { "float32" }));

		pkgs.add("debug/elf");
		mapConst.putIfAbsent("debug/elf", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("debug/elf", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("debug/elf", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("debug/elf", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("debug/elf", new HashSet<VarGoLangApiSignature>());

		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLSDESC_LD_PREL19", " 122", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_LDST32_ABS_LO12_NC", " 15", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSLE_ADD_TPREL_LO12", " 550", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_CALL26", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSLE_MOVW_TPREL_G1_NC", " 546", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_ADR_PREL_LO21", " 10", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLS_DTPMOD", " 184", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_ABS16", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLSDESC_LD32_LO12_NC", " 125", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_ABS32", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLSDESC_ADR_PAGE21", " 124", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLS_DTPMOD64", " 1028", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_MOVW_UABS_G1_NC", " 266", null));
		mapConst.get("debug/elf").add(
				new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLSLE_ADD_TPREL_LO12_NC", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TSTBR14", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_PREL32", " 3", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLSLE_MOVW_TPREL_G0", " 107", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_LD64_GOT_LO12_NC", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSIE_LD_GOTTPREL_PREL19", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_GOT_LD_PREL19", " 25", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSGD_ADD_LO12_NC", " 514", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_PREL32", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_JUMP_SLOT", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_MOVW_SABS_G1", " 271", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSIE_MOVW_GOTTPREL_G1", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSLE_ADD_TPREL_LO12", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSLE_MOVW_TPREL_G1", " 545", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_LDST8_ABS_LO12_NC", " 278", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSLE_MOVW_TPREL_G2", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_CONDBR19", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_LDST128_ABS_LO12_NC", " 17", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSLE_ADD_TPREL_LO12_NC", " 551", null));
		mapConst.get("debug/elf").add(
				new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLSIE_ADR_GOTTPREL_PAGE21", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(
				new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLSIE_LD_GOTTPREL_PREL19", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_JUMP26", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_LD64_GOT_LO12_NC", " 312", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLS_TPREL", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_LDST128_ABS_LO12_NC", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_LD32_GOT_LO12_NC", " 27", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_LDST16_ABS_LO12_NC", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLSDESC_CALL", " 127", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLSDESC_CALL", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_ABS32", " 258", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_ADD_ABS_LO12_NC", " 12", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSLE_ADD_TPREL_HI12", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21", " 541", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_LDST64_ABS_LO12_NC", " 16", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLSDESC", " 187", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_MOVW_UABS_G1", " 7", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLSLE_MOVW_TPREL_G1", " 106", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLS_DTPREL64", " 1029", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSDESC", " 1031", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_COPY", " 180", null));
		mapConst.get("debug/elf").add(
				new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLSDESC_ADD_LO12_NC", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_PREL16", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_MOVW_SABS_G0", " 270", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_RELATIVE", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_LD_PREL_LO19", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLSDESC_ADR_PREL21", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf",
				"R_AARCH64_P32_TLSIE_LD32_GOTTPREL_LO12_NC", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSLE_MOVW_TPREL_G0", " 547", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSIE_MOVW_GOTTPREL_G1", " 539", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSGD_ADR_PAGE21", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_IRELATIVE", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_COPY", " 1024", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLSIE_LD_GOTTPREL_PREL19", " 105", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_ADR_PREL_LO21", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLSDESC_ADR_PREL21", " 123", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_LDST32_ABS_LO12_NC", " 285", null));
		mapConst.get("debug/elf").add(
				new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_PREL64", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_CALL26", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_LDST8_ABS_LO12_NC", " 13", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_COPY", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_GOT_LD_PREL19", " 309", null));
		mapConst.get("debug/elf").add(
				new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLSLE_MOVW_TPREL_G0_NC", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_LDST16_ABS_LO12_NC", " 284", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSGD_ADD_LO12_NC", null, "R_AARCH64"));
		mapMethod.get("debug/elf").add(new MethodGoLangApiSignature("debug/elf", "R_AARCH64", "GoString",
				new String[] { "" }, new String[] { "string" }));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_MOVW_SABS_G0", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_ADR_GOT_PAGE", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_MOVW_UABS_G0_NC", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_MOVW_UABS_G0_NC", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLSDESC_ADR_PAGE21", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_MOVW_UABS_G1", " 265", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_ADR_PREL_LO21", " 274", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_RELATIVE", " 1027", null));
		mapConst.get("debug/elf").add(
				new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(
				new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLSIE_LD32_GOTTPREL_LO12_NC", " 104", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_GLOB_DAT", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_PREL16", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_ABS32", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLSLE_MOVW_TPREL_G0_NC", " 108", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSDESC_ADR_PAGE21", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_IRELATIVE", " 188", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSLE_MOVW_TPREL_G0", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_ABS32", " 1", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSDESC_ADR_PAGE21", " 562", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_LDST128_ABS_LO12_NC", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_LDST64_ABS_LO12_NC", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLSGD_ADD_LO12_NC", " 82", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_ABS16", " 2", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_NONE", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_ADR_PREL_PG_HI21_NC", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLS_DTPMOD64", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLSGD_ADR_PAGE21", " 81", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSDESC_OFF_G0_NC", " 566", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_PREL64", " 260", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_ADR_PREL_LO21", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSDESC_LDR", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_ABS16", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSDESC_ADD", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_LDST8_ABS_LO12_NC", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_LDST128_ABS_LO12_NC", " 299", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_MOVW_UABS_G0", " 263", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_PREL16", " 4", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSIE_LD_GOTTPREL_PREL19", " 543", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_PREL32", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSDESC_LD_PREL19", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSDESC_ADD_LO12_NC", " 564", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLS_DTPREL", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_ADR_PREL_PG_HI21", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLS_DTPMOD", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSLE_MOVW_TPREL_G1", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLSIE_ADR_GOTTPREL_PAGE21", " 103", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_ADD_ABS_LO12_NC", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_RELATIVE", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLS_TPREL64", " 1030", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_LDST64_ABS_LO12_NC", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_LDST16_ABS_LO12_NC", " 14", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_CALL26", " 283", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLSLE_ADD_TPREL_HI12", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_MOVW_UABS_G3", " 269", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_JUMP26", " 20", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_MOVW_UABS_G0_NC", " 6", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLS_DTPREL64", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_MOVW_UABS_G0", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_MOVW_SABS_G0", " 8", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSDESC_ADR_PREL21", " 561", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_MOVW_SABS_G2", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSDESC_ADR_PREL21", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSDESC_LD64_LO12_NC", null, "R_AARCH64"));
		mapMethod.get("debug/elf").add(new MethodGoLangApiSignature("debug/elf", "*File", "DynamicSymbols",
				new String[] { "" }, new String[] { "[]Symbol", " error" }));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_PREL16", " 262", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_ADD_ABS_LO12_NC", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSDESC_LD64_LO12_NC", " 563", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSDESC_OFF_G1", " 565", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSDESC_OFF_G1", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_COPY", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_LD_PREL_LO19", " 273", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSDESC_CALL", " 569", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_NULL", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSDESC_CALL", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSLE_MOVW_TPREL_G0_NC", " 548", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_LD32_GOT_LO12_NC", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_GLOB_DAT", " 1025", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_NONE", " 0", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_MOVW_UABS_G2_NC", " 268", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_LD_PREL_LO19", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSDESC_OFF_G0_NC", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_JUMP26", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_ADR_PREL_PG_HI21", " 275", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_CONDBR19", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_ADR_GOT_PAGE", " 26", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_JUMP_SLOT", " 182", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_LDST64_ABS_LO12_NC", " 286", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLSLE_ADD_TPREL_LO12", null, "R_AARCH64"));
		mapMethod.get("debug/elf").add(new MethodGoLangApiSignature("debug/elf", "R_AARCH64", "String",
				new String[] { "" }, new String[] { "string" }));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLSLE_ADD_TPREL_HI12", " 109", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSDESC_ADD", " 568", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSDESC_LD_PREL19", " 560", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_MOVW_UABS_G1", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_MOVW_UABS_G2", " 267", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSGD_ADR_PAGE21", " 513", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_GOT_LD_PREL19", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSDESC_LDR", " 567", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLSDESC_ADD_LO12_NC", " 126", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_CONDBR19", " 19", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSDESC_ADD_LO12_NC", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_MOVW_UABS_G0_NC", " 264", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSLE_MOVW_TPREL_G0_NC", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_ADR_PREL_PG_HI21", " 11", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_ADR_PREL_PG_HI21_NC", " 276", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC", " 540", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TSTBR14", " 279", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_LDST32_ABS_LO12_NC", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_GLOB_DAT", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_PREL32", " 261", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLSDESC_LD32_LO12_NC", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_IRELATIVE", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_LD_PREL_LO19", " 9", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_LDST16_ABS_LO12_NC", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_JUMP_SLOT", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_JUMP_SLOT", " 1026", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_NULL", " 256", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLS_DTPREL", " 185", null));
		mapVar.get("debug/elf").add(new VarGoLangApiSignature("debug/elf", "ErrNoSymbols", "error"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSLE_ADD_TPREL_HI12", " 549", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_MOVW_UABS_G0", " 5", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_ABS16", " 259", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_MOVW_UABS_G2", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLSDESC", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLSLE_MOVW_TPREL_G1", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_MOVW_SABS_G0", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_RELATIVE", " 183", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLS_TPREL64", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_AARCH64", " 183", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLSDESC_LD_PREL19", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLSLE_ADD_TPREL_LO12", " 110", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "EM_AARCH64", null, "Machine"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_MOVW_UABS_G1_NC", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_ADR_GOT_PAGE", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_ADR_PREL_PG_HI21", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_MOVW_UABS_G1", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLSLE_ADD_TPREL_LO12_NC", " 111", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_JUMP26", " 282", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_ADR_GOT_PAGE", " 311", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_CALL26", " 21", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSLE_MOVW_TPREL_G1_NC", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_GLOB_DAT", " 181", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TSTBR14", " 18", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSDESC", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TSTBR14", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_ABS64", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_MOVW_UABS_G3", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_LDST32_ABS_LO12_NC", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_ADD_ABS_LO12_NC", " 277", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_MOVW_SABS_G1", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLSGD_ADR_PAGE21", null, "R_AARCH64"));
		mapType.get("debug/elf").add(new TypeGoLangApiSignature("debug/elf", "R_AARCH64 int"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLSLE_MOVW_TPREL_G0", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_IRELATIVE", " 1032", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_LDST8_ABS_LO12_NC", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSLE_ADD_TPREL_LO12_NC", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_MOVW_UABS_G0", null, "R_AARCH64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_ABS64", " 257", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLSGD_ADD_LO12_NC", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_P32_TLS_TPREL", " 186", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSLE_MOVW_TPREL_G2", " 544", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_MOVW_SABS_G2", " 272", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_GOT_LD_PREL19", null, "R_AARCH64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC", " 542", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_CONDBR19", " 280", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_AARCH64_MOVW_UABS_G2_NC", null, "R_AARCH64"));

		pkgs.add("syscall (windows-amd64)");
		mapConst.putIfAbsent("syscall (windows-amd64)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (windows-amd64)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (windows-amd64)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (windows-amd64)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (windows-amd64)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "DnsSectionQuestion", null, "ideal-int"));
		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "DNS_INFO_NO_RECORDS", " 9501", null));
		mapConst.get("syscall (windows-amd64)").add(
				new ConstGoLangApiSignature("syscall (windows-amd64)", "FSCTL_GET_REPARSE_POINT", " 589992", null));
		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "ERROR_PRIVILEGE_NOT_HELD", null, "Errno"));
		mapFunc.get("syscall (windows-amd64)").add(new FuncGoLangApiSignature("syscall (windows-amd64)",
				"DnsNameCompare", new String[] { "*uint16", " *uint16" }, new String[] { "bool" }));
		mapConst.get("syscall (windows-amd64)").add(
				new ConstGoLangApiSignature("syscall (windows-amd64)", "FSCTL_GET_REPARSE_POINT", null, "ideal-int"));
		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "SIO_UDP_CONNRESET", " 2550136844", null));
		mapConst.get("syscall (windows-amd64)").add(new ConstGoLangApiSignature("syscall (windows-amd64)",
				"MAXIMUM_REPARSE_DATA_BUFFER_SIZE", null, "ideal-int"));
		mapFunc.get("syscall (windows-amd64)").add(new FuncGoLangApiSignature("syscall (windows-amd64)",
				"LoadCreateSymbolicLink", new String[] { "" }, new String[] { "error" }));
		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "TH32CS_SNAPALL", null, "ideal-int"));
		mapType.get("syscall (windows-amd64)").add(
				new TypeGoLangApiSignature("syscall (windows-amd64)", "ProcessEntry32 struct, ExeFile [260]uint16"));
		mapFunc.get("syscall (windows-amd64)")
				.add(new FuncGoLangApiSignature(
						"syscall (windows-amd64)", "DeviceIoControl", new String[] { "Handle", " uint32", " *uint8",
								" uint32", " *uint8", " uint32", " *uint32", " *Overlapped" },
						new String[] { "error" }));
		mapType.get("syscall (windows-amd64)")
				.add(new TypeGoLangApiSignature("syscall (windows-amd64)", "ProcessEntry32 struct, ProcessID uint32"));
		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "TH32CS_SNAPHEAPLIST", " 1", null));
		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "TH32CS_SNAPTHREAD", null, "ideal-int"));
		mapType.get("syscall (windows-amd64)")
				.add(new TypeGoLangApiSignature("syscall (windows-amd64)", "ProcessEntry32 struct"));
		mapConst.get("syscall (windows-amd64)").add(
				new ConstGoLangApiSignature("syscall (windows-amd64)", "FILE_ATTRIBUTE_REPARSE_POINT", " 1024", null));
		mapType.get("syscall (windows-amd64)")
				.add(new TypeGoLangApiSignature("syscall (windows-amd64)", "ProcessEntry32 struct, ModuleID uint32"));
		mapType.get("syscall (windows-amd64)")
				.add(new TypeGoLangApiSignature("syscall (windows-amd64)", "ProcessEntry32 struct, Size uint32"));
		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "DnsSectionAnswer", null, "ideal-int"));
		mapFunc.get("syscall (windows-amd64)").add(new FuncGoLangApiSignature("syscall (windows-amd64)",
				"Process32Next", new String[] { "Handle", " *ProcessEntry32" }, new String[] { "error" }));
		mapConst.get("syscall (windows-amd64)").add(new ConstGoLangApiSignature("syscall (windows-amd64)",
				"MAXIMUM_REPARSE_DATA_BUFFER_SIZE", " 16384", null));
		mapConst.get("syscall (windows-amd64)").add(new ConstGoLangApiSignature("syscall (windows-amd64)",
				"FILE_FLAG_OPEN_REPARSE_POINT", null, "ideal-int"));
		mapConst.get("syscall (windows-amd64)").add(
				new ConstGoLangApiSignature("syscall (windows-amd64)", "SYMBOLIC_LINK_FLAG_DIRECTORY", " 1", null));
		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "TH32CS_SNAPMODULE", null, "ideal-int"));
		mapType.get("syscall (windows-amd64)").add(
				new TypeGoLangApiSignature("syscall (windows-amd64)", "ProcessEntry32 struct, PriClassBase int32"));
		mapConst.get("syscall (windows-amd64)").add(new ConstGoLangApiSignature("syscall (windows-amd64)",
				"FILE_FLAG_OPEN_REPARSE_POINT", " 2097152", null));
		mapConst.get("syscall (windows-amd64)").add(new ConstGoLangApiSignature("syscall (windows-amd64)",
				"FILE_ATTRIBUTE_REPARSE_POINT", null, "ideal-int"));
		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "TH32CS_SNAPPROCESS", null, "ideal-int"));
		mapFunc.get("syscall (windows-amd64)").add(new FuncGoLangApiSignature("syscall (windows-amd64)", "FullPath",
				new String[] { "string" }, new String[] { "string", " error" }));
		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "SIO_UDP_CONNRESET", null, "ideal-int"));
		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "ERROR_PRIVILEGE_NOT_HELD", " 1314", null));
		mapType.get("syscall (windows-amd64)")
				.add(new TypeGoLangApiSignature("syscall (windows-amd64)", "ProcessEntry32 struct, Threads uint32"));
		mapConst.get("syscall (windows-amd64)").add(
				new ConstGoLangApiSignature("syscall (windows-amd64)", "IO_REPARSE_TAG_SYMLINK", " 2684354572", null));
		mapConst.get("syscall (windows-amd64)").add(
				new ConstGoLangApiSignature("syscall (windows-amd64)", "IO_REPARSE_TAG_SYMLINK", null, "ideal-int"));
		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "TH32CS_SNAPALL", " 15", null));
		mapFunc.get("syscall (windows-amd64)").add(new FuncGoLangApiSignature("syscall (windows-amd64)",
				"CreateSymbolicLink", new String[] { "*uint16", " *uint16", " uint32" }, new String[] { "error" }));
		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "TH32CS_INHERIT", " 2147483648", null));
		mapFunc.get("syscall (windows-amd64)").add(new FuncGoLangApiSignature("syscall (windows-amd64)",
				"CreateHardLink", new String[] { "*uint16", " *uint16", " uintptr" }, new String[] { "error" }));
		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "DnsSectionAdditional", " 3", null));
		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "DnsSectionAuthority", null, "ideal-int"));
		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "DnsSectionAuthority", " 2", null));
		mapType.get("syscall (windows-amd64)").add(
				new TypeGoLangApiSignature("syscall (windows-amd64)", "ProcessEntry32 struct, DefaultHeapID uintptr"));
	}

	private void build1() {
		mapType.get("syscall (windows-amd64)")
				.add(new TypeGoLangApiSignature("syscall (windows-amd64)", "ProcessEntry32 struct, Usage uint32"));
		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "DnsSectionAnswer", " 1", null));
		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "TH32CS_SNAPMODULE32", null, "ideal-int"));
		mapFunc.get("syscall (windows-amd64)").add(new FuncGoLangApiSignature("syscall (windows-amd64)",
				"CreateToolhelp32Snapshot", new String[] { "uint32", " uint32" }, new String[] { "Handle", " error" }));
		mapType.get("syscall (windows-amd64)").add(
				new TypeGoLangApiSignature("syscall (windows-amd64)", "ProcessEntry32 struct, ParentProcessID uint32"));
		mapConst.get("syscall (windows-amd64)").add(new ConstGoLangApiSignature("syscall (windows-amd64)",
				"SYMBOLIC_LINK_FLAG_DIRECTORY", null, "ideal-int"));
		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "DNS_INFO_NO_RECORDS", null, "ideal-int"));
		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "DnsSectionAdditional", null, "ideal-int"));
		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "TH32CS_SNAPMODULE32", " 16", null));
		mapFunc.get("syscall (windows-amd64)").add(new FuncGoLangApiSignature("syscall (windows-amd64)",
				"Process32First", new String[] { "Handle", " *ProcessEntry32" }, new String[] { "error" }));
		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "TH32CS_SNAPPROCESS", " 2", null));
		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "DnsSectionQuestion", " 0", null));
		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "TH32CS_SNAPMODULE", " 8", null));
		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "TH32CS_INHERIT", null, "ideal-int"));
		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "TH32CS_SNAPTHREAD", " 4", null));
		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "TH32CS_SNAPHEAPLIST", null, "ideal-int"));
		mapType.get("syscall (windows-amd64)")
				.add(new TypeGoLangApiSignature("syscall (windows-amd64)", "ProcessEntry32 struct, Flags uint32"));

		pkgs.add("html/template");
		mapConst.putIfAbsent("html/template", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("html/template", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("html/template", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("html/template", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("html/template", new HashSet<VarGoLangApiSignature>());

		mapType.get("html/template").add(new TypeGoLangApiSignature("html/template", "Error struct, Node parse.Node"));

		pkgs.add("syscall (linux-amd64)");
		mapConst.putIfAbsent("syscall (linux-amd64)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (linux-amd64)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (linux-amd64)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (linux-amd64)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (linux-amd64)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (linux-amd64)").add(
				new TypeGoLangApiSignature("syscall (linux-amd64)", "SysProcAttr struct, GidMappings []SysProcIDMap"));
		mapType.get("syscall (linux-amd64)")
				.add(new TypeGoLangApiSignature("syscall (linux-amd64)", "SysProcIDMap struct"));
		mapType.get("syscall (linux-amd64)").add(
				new TypeGoLangApiSignature("syscall (linux-amd64)", "SysProcAttr struct, UidMappings []SysProcIDMap"));
		mapType.get("syscall (linux-amd64)")
				.add(new TypeGoLangApiSignature("syscall (linux-amd64)", "SysProcIDMap struct, Size int"));
		mapType.get("syscall (linux-amd64)")
				.add(new TypeGoLangApiSignature("syscall (linux-amd64)", "SysProcIDMap struct, HostID int"));
		mapType.get("syscall (linux-amd64)")
				.add(new TypeGoLangApiSignature("syscall (linux-amd64)", "SysProcIDMap struct, ContainerID int"));

	}

}