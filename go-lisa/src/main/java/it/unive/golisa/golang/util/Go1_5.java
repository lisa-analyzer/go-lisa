package it.unive.golisa.golang.util;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import it.unive.golisa.golang.api.signature.ConstGoLangApiSignature;
import it.unive.golisa.golang.api.signature.FuncGoLangApiSignature;
import it.unive.golisa.golang.api.signature.MethodGoLangApiSignature;
import it.unive.golisa.golang.api.signature.TypeGoLangApiSignature;
import it.unive.golisa.golang.api.signature.VarGoLangApiSignature;

/**
 * Auto-generated by GoLiSA build
 */
public class Go1_5 {
	private final Map<String, Set<ConstGoLangApiSignature>> mapConst;
	private final Map<String, Set<FuncGoLangApiSignature>> mapFunc;
	private final Map<String, Set<MethodGoLangApiSignature>> mapMethod;
	private final Map<String, Set<TypeGoLangApiSignature>> mapType;
	private final Map<String, Set<VarGoLangApiSignature>> mapVar;
	private final Set<String> pkgs;

	public Go1_5() {
		pkgs = new HashSet<>();
		mapConst = new HashMap<String, Set<ConstGoLangApiSignature>>();
		mapFunc = new HashMap<String, Set<FuncGoLangApiSignature>>();
		mapMethod = new HashMap<String, Set<MethodGoLangApiSignature>>();
		mapType = new HashMap<String, Set<TypeGoLangApiSignature>>();
		mapVar = new HashMap<String, Set<VarGoLangApiSignature>>();

		build();
	}

	public Set<String> getPackages() {
		return pkgs;
	}

	public Map<String, Set<ConstGoLangApiSignature>> getMapConst() {
		return mapConst;
	}

	public Map<String, Set<FuncGoLangApiSignature>> getMapFunc() {
		return mapFunc;
	}

	public Map<String, Set<MethodGoLangApiSignature>> getMapMethod() {
		return mapMethod;
	}

	public Map<String, Set<TypeGoLangApiSignature>> getMapType() {
		return mapType;
	}

	public Map<String, Set<VarGoLangApiSignature>> getMapVar() {
		return mapVar;
	}

	private void build() {
		build0();
		build1();
	}

	private void build0() {
		pkgs.add("crypto/tls");
		mapConst.putIfAbsent("crypto/tls", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("crypto/tls", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("crypto/tls", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("crypto/tls", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("crypto/tls", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("crypto/tls").add(new MethodGoLangApiSignature("crypto/tls", "*Config", "SetSessionTicketKeys",
				new String[] { "[][32]uint8" }, new String[] { "" }));
		mapType.get("crypto/tls").add(new TypeGoLangApiSignature("crypto/tls",
				"ConnectionState struct, SignedCertificateTimestamps [][]uint8"));
		mapConst.get("crypto/tls").add(
				new ConstGoLangApiSignature("crypto/tls", "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384", null, "uint16"));
		mapConst.get("crypto/tls").add(
				new ConstGoLangApiSignature("crypto/tls", "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384", " 49196", null));
		mapConst.get("crypto/tls").add(
				new ConstGoLangApiSignature("crypto/tls", "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", " 49200", null));
		mapConst.get("crypto/tls").add(
				new ConstGoLangApiSignature("crypto/tls", "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", null, "uint16"));
		mapType.get("crypto/tls")
				.add(new TypeGoLangApiSignature("crypto/tls", "ConnectionState struct, OCSPResponse []uint8"));
		mapType.get("crypto/tls").add(
				new TypeGoLangApiSignature("crypto/tls", "Certificate struct, SignedCertificateTimestamps [][]uint8"));

		pkgs.add("syscall (linux-amd64-cgo)");
		mapConst.putIfAbsent("syscall (linux-amd64-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (linux-amd64-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (linux-amd64-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (linux-amd64-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (linux-amd64-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (linux-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (linux-amd64-cgo)", "SysProcAttr struct, Foreground bool"));
		mapType.get("syscall (linux-amd64-cgo)").add(new TypeGoLangApiSignature("syscall (linux-amd64-cgo)",
				"SysProcAttr struct, GidMappingsEnableSetgroups bool"));
		mapType.get("syscall (linux-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (linux-amd64-cgo)", "SysProcAttr struct, Pgid int"));

		pkgs.add("syscall (netbsd-amd64-cgo)");
		mapConst.putIfAbsent("syscall (netbsd-amd64-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (netbsd-amd64-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (netbsd-amd64-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (netbsd-amd64-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (netbsd-amd64-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (netbsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (netbsd-amd64-cgo)", "SysProcAttr struct, Ctty int"));
		mapType.get("syscall (netbsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (netbsd-amd64-cgo)", "SysProcAttr struct, Pgid int"));
		mapType.get("syscall (netbsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (netbsd-amd64-cgo)", "SysProcAttr struct, Foreground bool"));

		pkgs.add("image/gif");
		mapConst.putIfAbsent("image/gif", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("image/gif", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("image/gif", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("image/gif", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("image/gif", new HashSet<VarGoLangApiSignature>());

		mapConst.get("image/gif")
				.add(new ConstGoLangApiSignature("image/gif", "DisposalBackground", null, "ideal-int"));
		mapConst.get("image/gif").add(new ConstGoLangApiSignature("image/gif", "DisposalPrevious", null, "ideal-int"));
		mapType.get("image/gif").add(new TypeGoLangApiSignature("image/gif", "GIF struct, Disposal []uint8"));
		mapConst.get("image/gif").add(new ConstGoLangApiSignature("image/gif", "DisposalNone", null, "ideal-int"));
		mapType.get("image/gif").add(new TypeGoLangApiSignature("image/gif", "GIF struct, Config image.Config"));
		mapConst.get("image/gif").add(new ConstGoLangApiSignature("image/gif", "DisposalBackground", " 2", null));
		mapConst.get("image/gif").add(new ConstGoLangApiSignature("image/gif", "DisposalNone", " 1", null));
		mapConst.get("image/gif").add(new ConstGoLangApiSignature("image/gif", "DisposalPrevious", " 3", null));
		mapType.get("image/gif").add(new TypeGoLangApiSignature("image/gif", "GIF struct, BackgroundIndex uint8"));

		pkgs.add("mime");
		mapConst.putIfAbsent("mime", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("mime", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("mime", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("mime", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("mime", new HashSet<VarGoLangApiSignature>());

		mapConst.get("mime").add(new ConstGoLangApiSignature("mime", "BEncoding", " 98", null));
		mapMethod.get("mime").add(new MethodGoLangApiSignature("mime", "WordEncoder", "Encode",
				new String[] { "string", " string" }, new String[] { "string" }));
		mapMethod.get("mime").add(new MethodGoLangApiSignature("mime", "*WordDecoder", "DecodeHeader",
				new String[] { "string" }, new String[] { "string", " error" }));
		mapConst.get("mime").add(new ConstGoLangApiSignature("mime", "QEncoding", " 113", null));
		mapConst.get("mime").add(new ConstGoLangApiSignature("mime", "BEncoding", null, "WordEncoder"));
		mapFunc.get("mime").add(new FuncGoLangApiSignature("mime", "ExtensionsByType", new String[] { "string" },
				new String[] { "[]string", " error" }));
		mapType.get("mime").add(new TypeGoLangApiSignature("mime",
				"WordDecoder struct, CharsetReader func(string, io.Reader) (io.Reader, error)"));
		mapConst.get("mime").add(new ConstGoLangApiSignature("mime", "QEncoding", null, "WordEncoder"));
		mapType.get("mime").add(new TypeGoLangApiSignature("mime", "WordDecoder struct"));
		mapType.get("mime").add(new TypeGoLangApiSignature("mime", "WordEncoder uint8"));
		mapMethod.get("mime").add(new MethodGoLangApiSignature("mime", "*WordDecoder", "Decode",
				new String[] { "string" }, new String[] { "string", " error" }));

		pkgs.add("syscall (linux-arm-cgo)");
		mapConst.putIfAbsent("syscall (linux-arm-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (linux-arm-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (linux-arm-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (linux-arm-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (linux-arm-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (linux-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (linux-arm-cgo)", "SysProcAttr struct, Foreground bool"));
		mapType.get("syscall (linux-arm-cgo)").add(new TypeGoLangApiSignature("syscall (linux-arm-cgo)",
				"SysProcAttr struct, GidMappingsEnableSetgroups bool"));
		mapType.get("syscall (linux-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (linux-arm-cgo)", "SysProcAttr struct, Pgid int"));

		pkgs.add("syscall (netbsd-amd64)");
		mapConst.putIfAbsent("syscall (netbsd-amd64)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (netbsd-amd64)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (netbsd-amd64)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (netbsd-amd64)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (netbsd-amd64)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (netbsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (netbsd-amd64)", "SysProcAttr struct, Pgid int"));
		mapType.get("syscall (netbsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (netbsd-amd64)", "SysProcAttr struct, Ctty int"));
		mapType.get("syscall (netbsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (netbsd-amd64)", "SysProcAttr struct, Foreground bool"));

		pkgs.add("reflect");
		mapConst.putIfAbsent("reflect", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("reflect", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("reflect", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("reflect", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("reflect", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("reflect").add(new FuncGoLangApiSignature("reflect", "ArrayOf", new String[] { "int", " Type" },
				new String[] { "Type" }));
		mapFunc.get("reflect").add(new FuncGoLangApiSignature("reflect", "FuncOf",
				new String[] { "[]Type", " []Type", " bool" }, new String[] { "Type" }));

		pkgs.add("net/http/pprof");
		mapConst.putIfAbsent("net/http/pprof", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net/http/pprof", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net/http/pprof", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net/http/pprof", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net/http/pprof", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("net/http/pprof").add(new FuncGoLangApiSignature("net/http/pprof", "Trace",
				new String[] { "http.ResponseWriter", " *http.Request" }, new String[] { "" }));

		pkgs.add("crypto/x509");
		mapConst.putIfAbsent("crypto/x509", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("crypto/x509", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("crypto/x509", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("crypto/x509", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("crypto/x509", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("crypto/x509").add(new MethodGoLangApiSignature("crypto/x509", "*CertificateRequest",
				"CheckSignature", new String[] { "" }, new String[] { "error" }));
		mapType.get("crypto/x509").add(new TypeGoLangApiSignature("crypto/x509",
				"Certificate struct, UnhandledCriticalExtensions []asn1.ObjectIdentifier"));

		pkgs.add("encoding/base64");
		mapConst.putIfAbsent("encoding/base64", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("encoding/base64", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("encoding/base64", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("encoding/base64", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("encoding/base64", new HashSet<VarGoLangApiSignature>());

		mapVar.get("encoding/base64").add(new VarGoLangApiSignature("encoding/base64", "RawStdEncoding", "*Encoding"));
		mapMethod.get("encoding/base64").add(new MethodGoLangApiSignature("encoding/base64", "Encoding", "WithPadding",
				new String[] { "int32" }, new String[] { "*Encoding" }));
		mapConst.get("encoding/base64")
				.add(new ConstGoLangApiSignature("encoding/base64", "StdPadding", null, "int32"));
		mapVar.get("encoding/base64").add(new VarGoLangApiSignature("encoding/base64", "RawURLEncoding", "*Encoding"));
		mapConst.get("encoding/base64").add(new ConstGoLangApiSignature("encoding/base64", "NoPadding", null, "int32"));
		mapConst.get("encoding/base64").add(new ConstGoLangApiSignature("encoding/base64", "NoPadding", " -1", null));
		mapConst.get("encoding/base64").add(new ConstGoLangApiSignature("encoding/base64", "StdPadding", " 61", null));

		pkgs.add("net/http/fcgi");
		mapConst.putIfAbsent("net/http/fcgi", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net/http/fcgi", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net/http/fcgi", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net/http/fcgi", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net/http/fcgi", new HashSet<VarGoLangApiSignature>());

		mapVar.get("net/http/fcgi").add(new VarGoLangApiSignature("net/http/fcgi", "ErrConnClosed", "error"));
		mapVar.get("net/http/fcgi").add(new VarGoLangApiSignature("net/http/fcgi", "ErrRequestAborted", "error"));

		pkgs.add("net");
		mapConst.putIfAbsent("net", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net", new HashSet<VarGoLangApiSignature>());

		mapType.get("net").add(new TypeGoLangApiSignature("net", "OpError struct, Source Addr"));
		mapType.get("net").add(new TypeGoLangApiSignature("net", "Dialer struct, FallbackDelay time.Duration"));

		pkgs.add("crypto/elliptic");
		mapConst.putIfAbsent("crypto/elliptic", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("crypto/elliptic", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("crypto/elliptic", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("crypto/elliptic", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("crypto/elliptic", new HashSet<VarGoLangApiSignature>());

		mapType.get("crypto/elliptic")
				.add(new TypeGoLangApiSignature("crypto/elliptic", "CurveParams struct, Name string"));

		pkgs.add("image");
		mapConst.putIfAbsent("image", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("image", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("image", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("image", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("image", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("image").add(
				new FuncGoLangApiSignature("image", "NewCMYK", new String[] { "Rectangle" }, new String[] { "*CMYK" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "Rectangle", "At",
				new String[] { "int", " int" }, new String[] { "color.Color" }));
		mapType.get("image").add(new TypeGoLangApiSignature("image", "CMYK struct, Stride int"));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*CMYK", "Set",
				new String[] { "int", " int", " color.Color" }, new String[] { "" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*CMYK", "SetCMYK",
				new String[] { "int", " int", " color.CMYK" }, new String[] { "" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*CMYK", "PixOffset",
				new String[] { "int", " int" }, new String[] { "int" }));
		mapType.get("image").add(new TypeGoLangApiSignature("image", "CMYK struct, Pix []uint8"));
		mapMethod.get("image").add(
				new MethodGoLangApiSignature("image", "*CMYK", "Opaque", new String[] { "" }, new String[] { "bool" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*CMYK", "ColorModel", new String[] { "" },
				new String[] { "color.Model" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*CMYK", "Bounds", new String[] { "" },
				new String[] { "Rectangle" }));
		mapType.get("image").add(new TypeGoLangApiSignature("image", "CMYK struct"));
		mapConst.get("image").add(new ConstGoLangApiSignature("image", "YCbCrSubsampleRatio410", " 5", null));
		mapConst.get("image").add(new ConstGoLangApiSignature("image", "YCbCrSubsampleRatio411", " 4", null));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "Rectangle", "Bounds", new String[] { "" },
				new String[] { "Rectangle" }));
		mapConst.get("image")
				.add(new ConstGoLangApiSignature("image", "YCbCrSubsampleRatio411", null, "YCbCrSubsampleRatio"));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*CMYK", "CMYKAt",
				new String[] { "int", " int" }, new String[] { "color.CMYK" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "Rectangle", "ColorModel", new String[] { "" },
				new String[] { "color.Model" }));
		mapConst.get("image")
				.add(new ConstGoLangApiSignature("image", "YCbCrSubsampleRatio410", null, "YCbCrSubsampleRatio"));
		mapType.get("image").add(new TypeGoLangApiSignature("image", "CMYK struct, Rect Rectangle"));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*CMYK", "SubImage",
				new String[] { "Rectangle" }, new String[] { "Image" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*CMYK", "At", new String[] { "int", " int" },
				new String[] { "color.Color" }));

		pkgs.add("io");
		mapConst.putIfAbsent("io", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("io", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("io", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("io", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("io", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("io").add(new FuncGoLangApiSignature("io", "CopyBuffer",
				new String[] { "Writer", " Reader", " []uint8" }, new String[] { "int64", " error" }));

		pkgs.add("math/big");
		mapConst.putIfAbsent("math/big", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("math/big", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("math/big", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("math/big", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("math/big", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "SetPrec",
				new String[] { "uint" }, new String[] { "*Float" }));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "MantExp",
				new String[] { "*Float" }, new String[] { "int" }));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "ErrNaN", "Error", new String[] { "" },
				new String[] { "string" }));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "Int", new String[] { "*Int" },
				new String[] { "*Int", " Accuracy" }));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "Set",
				new String[] { "*Float" }, new String[] { "*Float" }));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Int", "ModSqrt",
				new String[] { "*Int", " *Int" }, new String[] { "*Int" }));
		mapConst.get("math/big").add(new ConstGoLangApiSignature("math/big", "ToPositiveInf", " 5", null));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "Uint64", new String[] { "" },
				new String[] { "uint64", " Accuracy" }));
		mapConst.get("math/big").add(new ConstGoLangApiSignature("math/big", "Above", " 1", null));
		mapConst.get("math/big").add(new ConstGoLangApiSignature("math/big", "MaxExp", null, "ideal-int"));
		mapConst.get("math/big").add(new ConstGoLangApiSignature("math/big", "ToPositiveInf", null, "RoundingMode"));
		mapConst.get("math/big").add(new ConstGoLangApiSignature("math/big", "ToNearestEven", " 0", null));
		mapFunc.get("math/big").add(new FuncGoLangApiSignature("math/big", "Jacobi", new String[] { "*Int", " *Int" },
				new String[] { "int" }));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "Add",
				new String[] { "*Float", " *Float" }, new String[] { "*Float" }));
		mapConst.get("math/big").add(new ConstGoLangApiSignature("math/big", "Exact", " 0", null));
		mapConst.get("math/big").add(new ConstGoLangApiSignature("math/big", "MinExp", " -2147483648", null));
		mapConst.get("math/big").add(new ConstGoLangApiSignature("math/big", "MaxPrec", " 4294967295", null));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "SetFloat64",
				new String[] { "float64" }, new String[] { "*Float" }));
		mapConst.get("math/big").add(new ConstGoLangApiSignature("math/big", "Exact", null, "Accuracy"));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "SetMode",
				new String[] { "RoundingMode" }, new String[] { "*Float" }));
		mapFunc.get("math/big")
				.add(new FuncGoLangApiSignature("math/big", "ParseFloat",
						new String[] { "string", " int", " uint", " RoundingMode" },
						new String[] { "*Float", " int", " error" }));
		mapConst.get("math/big").add(new ConstGoLangApiSignature("math/big", "MaxPrec", null, "ideal-int"));
		mapConst.get("math/big").add(new ConstGoLangApiSignature("math/big", "MaxExp", " 2147483647", null));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "Cmp",
				new String[] { "*Float" }, new String[] { "int" }));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "Parse",
				new String[] { "string", " int" }, new String[] { "*Float", " int", " error" }));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "Mul",
				new String[] { "*Float", " *Float" }, new String[] { "*Float" }));
		mapConst.get("math/big").add(new ConstGoLangApiSignature("math/big", "AwayFromZero", null, "RoundingMode"));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "Text",
				new String[] { "uint8", " int" }, new String[] { "string" }));
		mapType.get("math/big").add(new TypeGoLangApiSignature("math/big", "RoundingMode uint8"));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "Sign", new String[] { "" },
				new String[] { "int" }));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "Append",
				new String[] { "[]uint8", " uint8", " int" }, new String[] { "[]uint8" }));
		mapConst.get("math/big").add(new ConstGoLangApiSignature("math/big", "ToNearestAway", null, "RoundingMode"));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "Acc", new String[] { "" },
				new String[] { "Accuracy" }));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "String", new String[] { "" },
				new String[] { "string" }));
		mapConst.get("math/big").add(new ConstGoLangApiSignature("math/big", "ToNegativeInf", " 4", null));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "IsInf", new String[] { "" },
				new String[] { "bool" }));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "SetInt64",
				new String[] { "int64" }, new String[] { "*Float" }));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "Float32", new String[] { "" },
				new String[] { "float32", " Accuracy" }));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "Quo",
				new String[] { "*Float", " *Float" }, new String[] { "*Float" }));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "SetInt",
				new String[] { "*Int" }, new String[] { "*Float" }));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "MinPrec", new String[] { "" },
				new String[] { "uint" }));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "SetUint64",
				new String[] { "uint64" }, new String[] { "*Float" }));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "Rat", new String[] { "*Rat" },
				new String[] { "*Rat", " Accuracy" }));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "Int64", new String[] { "" },
				new String[] { "int64", " Accuracy" }));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "SetInf",
				new String[] { "bool" }, new String[] { "*Float" }));
		mapConst.get("math/big").add(new ConstGoLangApiSignature("math/big", "ToNearestAway", " 1", null));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "Neg",
				new String[] { "*Float" }, new String[] { "*Float" }));
		mapConst.get("math/big").add(new ConstGoLangApiSignature("math/big", "ToZero", " 2", null));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "Abs",
				new String[] { "*Float" }, new String[] { "*Float" }));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "Prec", new String[] { "" },
				new String[] { "uint" }));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "Float64", new String[] { "" },
				new String[] { "float64", " Accuracy" }));
		mapType.get("math/big").add(new TypeGoLangApiSignature("math/big", "Float struct"));
		mapConst.get("math/big").add(new ConstGoLangApiSignature("math/big", "MinExp", null, "ideal-int"));
		mapConst.get("math/big").add(new ConstGoLangApiSignature("math/big", "ToNearestEven", null, "RoundingMode"));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "IsInt", new String[] { "" },
				new String[] { "bool" }));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "SetRat",
				new String[] { "*Rat" }, new String[] { "*Float" }));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "Accuracy", "String",
				new String[] { "" }, new String[] { "string" }));
		mapConst.get("math/big").add(new ConstGoLangApiSignature("math/big", "Below", null, "Accuracy"));
		mapType.get("math/big").add(new TypeGoLangApiSignature("math/big", "ErrNaN struct"));
		mapConst.get("math/big").add(new ConstGoLangApiSignature("math/big", "Below", " -1", null));
		mapFunc.get("math/big").add(new FuncGoLangApiSignature("math/big", "NewFloat", new String[] { "float64" },
				new String[] { "*Float" }));
		mapConst.get("math/big").add(new ConstGoLangApiSignature("math/big", "ToNegativeInf", null, "RoundingMode"));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "Copy",
				new String[] { "*Float" }, new String[] { "*Float" }));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "SetMantExp",
				new String[] { "*Float", " int" }, new String[] { "*Float" }));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "SetString",
				new String[] { "string" }, new String[] { "*Float", " bool" }));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "Format",
				new String[] { "fmt.State", " int32" }, new String[] { "" }));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "Mode", new String[] { "" },
				new String[] { "RoundingMode" }));
		mapType.get("math/big").add(new TypeGoLangApiSignature("math/big", "Accuracy int8"));
		mapConst.get("math/big").add(new ConstGoLangApiSignature("math/big", "ToZero", null, "RoundingMode"));
		mapConst.get("math/big").add(new ConstGoLangApiSignature("math/big", "Above", null, "Accuracy"));
		mapConst.get("math/big").add(new ConstGoLangApiSignature("math/big", "AwayFromZero", " 3", null));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "Signbit", new String[] { "" },
				new String[] { "bool" }));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "Sub",
				new String[] { "*Float", " *Float" }, new String[] { "*Float" }));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "RoundingMode", "String",
				new String[] { "" }, new String[] { "string" }));

		pkgs.add("text/template");
		mapConst.putIfAbsent("text/template", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("text/template", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("text/template", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("text/template", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("text/template", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("text/template").add(new MethodGoLangApiSignature("text/template", "*Template", "Option",
				new String[] { "...string" }, new String[] { "*Template" }));
		mapMethod.get("text/template").add(new MethodGoLangApiSignature("text/template", "*Template",
				"DefinedTemplates", new String[] { "" }, new String[] { "string" }));

		pkgs.add("syscall (openbsd-386-cgo)");
		mapConst.putIfAbsent("syscall (openbsd-386-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (openbsd-386-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (openbsd-386-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (openbsd-386-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (openbsd-386-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (openbsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-386-cgo)", "SysProcAttr struct, Pgid int"));
		mapType.get("syscall (openbsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-386-cgo)", "SysProcAttr struct, Foreground bool"));
		mapType.get("syscall (openbsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-386-cgo)", "SysProcAttr struct, Ctty int"));

		pkgs.add("go/types");
		mapConst.putIfAbsent("go/types", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("go/types", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("go/types", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("go/types", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("go/types", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*TypeName", "Pos", new String[] { "" },
				new String[] { "token.Pos" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Complex64", " 15", null));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "IsFloat", null, "BasicInfo"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Info", "ObjectOf",
				new String[] { "*ast.Ident" }, new String[] { "Object" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Type interface { String, Underlying }"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "Checker", "TypeOf",
				new String[] { "ast.Expr" }, new String[] { "Type" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Pointer", "String",
				new String[] { "" }, new String[] { "string" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*StdSizes", "Offsetsof",
				new String[] { "[]*Var" }, new String[] { "[]int64" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Interface", "Complete",
				new String[] { "" }, new String[] { "*Interface" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Initializer struct, Lhs []*Var"));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "UntypedBool", " 19", null));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Nil", "String", new String[] { "" },
				new String[] { "string" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "UntypedString", " 24", null));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "NewPackage",
				new String[] { "string", " string" }, new String[] { "*Package" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Nil struct"));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Qualifier func(*Package) string"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Builtin", "String",
				new String[] { "" }, new String[] { "string" }));
		mapType.get("go/types")
				.add(new TypeGoLangApiSignature("go/types", "Sizes interface, Offsetsof([]*Var) []int64"));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "Implements",
				new String[] { "Type", " *Interface" }, new String[] { "bool" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Package struct"));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "NewNamed",
				new String[] { "*TypeName", " Type", " []*Func" }, new String[] { "*Named" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Named", "Obj", new String[] { "" },
				new String[] { "*TypeName" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Initializer struct"));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Tuple struct"));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Error struct"));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "IsComplex", " 16", null));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Signature", "Variadic",
				new String[] { "" }, new String[] { "bool" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*StdSizes", "Sizeof",
				new String[] { "Type" }, new String[] { "int64" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "IsNumeric", null, "BasicInfo"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Scope", "Parent", new String[] { "" },
				new String[] { "*Scope" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Rune", " 5", null));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Type interface, String() string"));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Uint8", " 8", null));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Selection", "Obj", new String[] { "" },
				new String[] { "Object" }));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "NewStruct",
				new String[] { "[]*Var", " []string" }, new String[] { "*Struct" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Label", "Name", new String[] { "" },
				new String[] { "string" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Const", "Name", new String[] { "" },
				new String[] { "string" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Nil", "Exported", new String[] { "" },
				new String[] { "bool" }));
		mapVar.get("go/types").add(new VarGoLangApiSignature("go/types", "Typ", "[]*Basic"));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Bool", null, "BasicKind"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*PkgName", "Exported",
				new String[] { "" }, new String[] { "bool" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "TypeAndValue", "IsType",
				new String[] { "" }, new String[] { "bool" }));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "NewPointer", new String[] { "Type" },
				new String[] { "*Pointer" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*TypeName", "Pkg", new String[] { "" },
				new String[] { "*Package" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Func struct"));
		mapMethod.get("go/types").add(
				new MethodGoLangApiSignature("go/types", "*Var", "Id", new String[] { "" }, new String[] { "string" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*TypeName", "String",
				new String[] { "" }, new String[] { "string" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "IsBoolean", null, "BasicInfo"));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Float32", null, "BasicKind"));
		mapMethod.get("go/types").add(
				new MethodGoLangApiSignature("go/types", "*Map", "Elem", new String[] { "" }, new String[] { "Type" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*PkgName", "Pkg", new String[] { "" },
				new String[] { "*Package" }));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "NewScope",
				new String[] { "*Scope", " token.Pos", " token.Pos", " string" }, new String[] { "*Scope" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "RecvOnly", null, "ChanDir"));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Checker struct"));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "UnsafePointer", " 18", null));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "NewTuple", new String[] { "...*Var" },
				new String[] { "*Tuple" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*PkgName", "Parent",
				new String[] { "" }, new String[] { "*Scope" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Struct", "String", new String[] { "" },
				new String[] { "string" }));
		mapMethod.get("go/types").add(
				new MethodGoLangApiSignature("go/types", "*Tuple", "Len", new String[] { "" }, new String[] { "int" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "IsUnsigned", " 4", null));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Func", "Exported", new String[] { "" },
				new String[] { "bool" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Builtin", "Pkg", new String[] { "" },
				new String[] { "*Package" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Int16", null, "BasicKind"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "TypeAndValue", "IsVoid",
				new String[] { "" }, new String[] { "bool" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Complex128", " 16", null));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "WriteExpr",
				new String[] { "*bytes.Buffer", " ast.Expr" }, new String[] { "" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Interface", "Embedded",
				new String[] { "int" }, new String[] { "*Named" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Map", "Underlying",
				new String[] { "" }, new String[] { "Type" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "TypeAndValue", "HasOk",
				new String[] { "" }, new String[] { "bool" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Const", "Val", new String[] { "" },
				new String[] { "constant.Value" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Scope", "Child",
				new String[] { "int" }, new String[] { "*Scope" }));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "IsInterface", new String[] { "Type" },
				new String[] { "bool" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "UntypedFloat", " 22", null));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Const", "Parent", new String[] { "" },
				new String[] { "*Scope" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "UntypedComplex", " 23", null));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Int32", " 5", null));
		mapType.get("go/types")
				.add(new TypeGoLangApiSignature("go/types", "Importer interface, Import(string) (*Package, error)"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Scope", "Lookup",
				new String[] { "string" }, new String[] { "Object" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Float64", null, "BasicKind"));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "MethodVal", null, "SelectionKind"));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Object interface, Name() string"));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "WriteSignature",
				new String[] { "*bytes.Buffer", " *Signature", " Qualifier" }, new String[] { "" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Nil", "Pos", new String[] { "" },
				new String[] { "token.Pos" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Package", "Name", new String[] { "" },
				new String[] { "string" }));
		mapVar.get("go/types").add(new VarGoLangApiSignature("go/types", "Universe", "*Scope"));
		mapType.get("go/types")
				.add(new TypeGoLangApiSignature("go/types", "Info struct, Types map[ast.Expr]TypeAndValue"));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "String", null, "BasicKind"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Builtin", "Parent",
				new String[] { "" }, new String[] { "*Scope" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*StdSizes", "Alignof",
				new String[] { "Type" }, new String[] { "int64" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "String", " 17", null));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "IsConstType", " 59", null));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Interface", "Empty",
				new String[] { "" }, new String[] { "bool" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "SendOnly", " 1", null));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Int8", null, "BasicKind"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Signature", "Params",
				new String[] { "" }, new String[] { "*Tuple" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Scope", "Names", new String[] { "" },
				new String[] { "[]string" }));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "WriteType",
				new String[] { "*bytes.Buffer", " Type", " Qualifier" }, new String[] { "" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Initializer struct, Rhs ast.Expr"));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "IsComplex", null, "BasicInfo"));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "TypeString",
				new String[] { "Type", " Qualifier" }, new String[] { "string" }));
		mapType.get("go/types")
				.add(new TypeGoLangApiSignature("go/types", "Info struct, Implicits map[ast.Node]Object"));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "DefPredeclaredTestFuncs",
				new String[] { "" }, new String[] { "" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Config struct, Error func(error)"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Named", "SetUnderlying",
				new String[] { "Type" }, new String[] { "" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Scope", "NumChildren",
				new String[] { "" }, new String[] { "int" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Pointer struct"));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "MissingMethod",
				new String[] { "Type", " *Interface", " bool" }, new String[] { "*Func", " bool" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "SendRecv", null, "ChanDir"));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "StdSizes struct"));
		mapFunc.get("go/types")
				.add(new FuncGoLangApiSignature("go/types", "LookupFieldOrMethod",
						new String[] { "Type", " bool", " *Package", " string" },
						new String[] { "Object", " []int", " bool" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Object interface, Type() Type"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Named", "Underlying",
				new String[] { "" }, new String[] { "Type" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Object interface, Pkg() *Package"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Func", "Type", new String[] { "" },
				new String[] { "Type" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Uintptr", null, "BasicKind"));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "Identical",
				new String[] { "Type", " Type" }, new String[] { "bool" }));
		mapMethod.get("go/types")
				.add(new MethodGoLangApiSignature("go/types", "*Config", "Check",
						new String[] { "string", " *token.FileSet", " []*ast.File", " *Info" },
						new String[] { "*Package", " error" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Config struct, FakeImportC bool"));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "NewTypeName",
				new String[] { "token.Pos", " *Package", " string", " Type" }, new String[] { "*TypeName" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Interface", "NumEmbeddeds",
				new String[] { "" }, new String[] { "int" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Interface", "ExplicitMethod",
				new String[] { "int" }, new String[] { "*Func" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "IsBoolean", " 1", null));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "NewArray",
				new String[] { "Type", " int64" }, new String[] { "*Array" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Scope", "Insert",
				new String[] { "Object" }, new String[] { "Object" }));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "SelectionString",
				new String[] { "*Selection", " Qualifier" }, new String[] { "string" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Scope", "Contains",
				new String[] { "token.Pos" }, new String[] { "bool" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "ChanDir int"));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Scope struct"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*TypeName", "Parent",
				new String[] { "" }, new String[] { "*Scope" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Selection", "String",
				new String[] { "" }, new String[] { "string" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Interface", "Method",
				new String[] { "int" }, new String[] { "*Func" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Signature struct"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Func", "Name", new String[] { "" },
				new String[] { "string" }));
		mapFunc.get("go/types")
				.add(new FuncGoLangApiSignature("go/types", "Eval",
						new String[] { "*token.FileSet", " *Package", " token.Pos", " string" },
						new String[] { "TypeAndValue", " error" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Package", "MarkComplete",
				new String[] { "" }, new String[] { "" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Label", "Id", new String[] { "" },
				new String[] { "string" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Signature", "Results",
				new String[] { "" }, new String[] { "*Tuple" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Int64", " 6", null));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "IsConstType", null, "BasicInfo"));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Uint8", null, "BasicKind"));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Sizes interface, Alignof(Type) int64"));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "UntypedNil", null, "BasicKind"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Tuple", "Underlying",
				new String[] { "" }, new String[] { "Type" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Bool", " 1", null));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Const", "String", new String[] { "" },
				new String[] { "string" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Array", "Underlying",
				new String[] { "" }, new String[] { "Type" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Const", "Type", new String[] { "" },
				new String[] { "Type" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Interface", "NumExplicitMethods",
				new String[] { "" }, new String[] { "int" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "UntypedNil", " 25", null));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Builtin", "Pos", new String[] { "" },
				new String[] { "token.Pos" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Named", "String", new String[] { "" },
				new String[] { "string" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "UntypedBool", null, "BasicKind"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Var", "Parent", new String[] { "" },
				new String[] { "*Scope" }));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "NewLabel",
				new String[] { "token.Pos", " *Package", " string" }, new String[] { "*Label" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Checker", "Files",
				new String[] { "[]*ast.File" }, new String[] { "error" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Invalid", " 0", null));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*MethodSet", "Lookup",
				new String[] { "*Package", " string" }, new String[] { "*Selection" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "Checker", "ObjectOf",
				new String[] { "*ast.Ident" }, new String[] { "Object" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Type interface, Underlying() Type"));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "MethodSet struct"));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "NewMap", new String[] { "Type", " Type" },
				new String[] { "*Map" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Config struct"));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "TypeAndValue struct"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Array", "Elem", new String[] { "" },
				new String[] { "Type" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Var", "Anonymous", new String[] { "" },
				new String[] { "bool" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Uintptr", " 12", null));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Object interface, Pos() token.Pos"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Chan", "String", new String[] { "" },
				new String[] { "string" }));
		mapType.get("go/types")
				.add(new TypeGoLangApiSignature("go/types", "TypeAndValue struct, Value constant.Value"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Var", "Name", new String[] { "" },
				new String[] { "string" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Int", " 2", null));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Uint16", null, "BasicKind"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Nil", "Pkg", new String[] { "" },
				new String[] { "*Package" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Var struct"));
		mapMethod.get("go/types").add(
				new MethodGoLangApiSignature("go/types", "*Nil", "Id", new String[] { "" }, new String[] { "string" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Named", "AddMethod",
				new String[] { "*Func" }, new String[] { "" }));
		mapMethod.get("go/types").add(
				new MethodGoLangApiSignature("go/types", "*Var", "Type", new String[] { "" }, new String[] { "Type" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "UntypedRune", " 21", null));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*TypeName", "Exported",
				new String[] { "" }, new String[] { "bool" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "IsString", " 32", null));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Const", "Exported",
				new String[] { "" }, new String[] { "bool" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "IsOrdered", " 42", null));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Basic struct"));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Config struct, Sizes Sizes"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Array", "String", new String[] { "" },
				new String[] { "string" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*PkgName", "String",
				new String[] { "" }, new String[] { "string" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Basic", "Kind", new String[] { "" },
				new String[] { "BasicKind" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Struct", "Underlying",
				new String[] { "" }, new String[] { "Type" }));
		mapType.get("go/types")
				.add(new TypeGoLangApiSignature("go/types", "Config struct, DisableUnusedImportCheck bool"));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Info struct, Uses map[*ast.Ident]Object"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Builtin", "Exported",
				new String[] { "" }, new String[] { "bool" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Chan", "Dir", new String[] { "" },
				new String[] { "ChanDir" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Chan", "Elem", new String[] { "" },
				new String[] { "Type" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*PkgName", "Pos", new String[] { "" },
				new String[] { "token.Pos" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Named struct"));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "UntypedRune", null, "BasicKind"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Struct", "NumFields",
				new String[] { "" }, new String[] { "int" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Basic", "Info", new String[] { "" },
				new String[] { "BasicInfo" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "IsUntyped", null, "BasicInfo"));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Uint", " 7", null));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "FieldVal", null, "SelectionKind"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Func", "Parent", new String[] { "" },
				new String[] { "*Scope" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Struct", "Tag", new String[] { "int" },
				new String[] { "string" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "UntypedComplex", null, "BasicKind"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Named", "NumMethods",
				new String[] { "" }, new String[] { "int" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*TypeName", "Name", new String[] { "" },
				new String[] { "string" }));
		mapMethod.get("go/types").add(
				new MethodGoLangApiSignature("go/types", "*Nil", "Type", new String[] { "" }, new String[] { "Type" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "RecvOnly", " 2", null));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Var", "Exported", new String[] { "" },
				new String[] { "bool" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Int", null, "BasicKind"));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "NewVar",
				new String[] { "token.Pos", " *Package", " string", " Type" }, new String[] { "*Var" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "BasicInfo int"));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "StdSizes struct, MaxAlign int64"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*MethodSet", "String",
				new String[] { "" }, new String[] { "string" }));
		mapFunc.get("go/types").add(
				new FuncGoLangApiSignature("go/types", "NewSlice", new String[] { "Type" }, new String[] { "*Slice" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Info struct, InitOrder []*Initializer"));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Error struct, Msg string"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Builtin", "Type", new String[] { "" },
				new String[] { "Type" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Map", "String", new String[] { "" },
				new String[] { "string" }));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "RelativeTo", new String[] { "*Package" },
				new String[] { "Qualifier" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Tuple", "At", new String[] { "int" },
				new String[] { "*Var" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Info struct, Defs map[*ast.Ident]Object"));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "SendOnly", null, "ChanDir"));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "ExprString", new String[] { "ast.Expr" },
				new String[] { "string" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Chan", "Underlying",
				new String[] { "" }, new String[] { "Type" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Byte", null, "BasicKind"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Func", "Scope", new String[] { "" },
				new String[] { "*Scope" }));
		mapMethod.get("go/types").add(
				new MethodGoLangApiSignature("go/types", "*Map", "Key", new String[] { "" }, new String[] { "Type" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Const", "Pkg", new String[] { "" },
				new String[] { "*Package" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Label", "Pkg", new String[] { "" },
				new String[] { "*Package" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Object interface, unexported methods"));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Label struct"));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "BasicKind int"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Label", "Pos", new String[] { "" },
				new String[] { "token.Pos" }));
		mapMethod.get("go/types").add(
				new MethodGoLangApiSignature("go/types", "*Scope", "Len", new String[] { "" }, new String[] { "int" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Builtin struct"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*TypeName", "Type", new String[] { "" },
				new String[] { "Type" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Interface struct"));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "IsUnsigned", null, "BasicInfo"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Basic", "String", new String[] { "" },
				new String[] { "string" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "UntypedString", null, "BasicKind"));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Error struct, Soft bool"));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "IsInteger", " 2", null));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Scope", "End", new String[] { "" },
				new String[] { "token.Pos" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "Error", "Error", new String[] { "" },
				new String[] { "string" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Selection", "Index",
				new String[] { "" }, new String[] { "[]int" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Struct", "Field",
				new String[] { "int" }, new String[] { "*Var" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Object interface, Parent() *Scope"));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Struct struct"));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "AssertableTo",
				new String[] { "*Interface", " Type" }, new String[] { "bool" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Func", "Id", new String[] { "" },
				new String[] { "string" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Int64", null, "BasicKind"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Const", "Pos", new String[] { "" },
				new String[] { "token.Pos" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Pointer", "Underlying",
				new String[] { "" }, new String[] { "Type" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "SelectionKind int"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*PkgName", "Id", new String[] { "" },
				new String[] { "string" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Chan struct"));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Complex64", null, "BasicKind"));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "SendRecv", " 0", null));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Selection", "Kind",
				new String[] { "" }, new String[] { "SelectionKind" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Tuple", "String", new String[] { "" },
				new String[] { "string" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Label", "String", new String[] { "" },
				new String[] { "string" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "IsUntyped", " 64", null));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Initializer", "String",
				new String[] { "" }, new String[] { "string" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Builtin", "Name", new String[] { "" },
				new String[] { "string" }));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "AssignableTo",
				new String[] { "Type", " Type" }, new String[] { "bool" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Package", "Imports",
				new String[] { "" }, new String[] { "[]*Package" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Package", "Path", new String[] { "" },
				new String[] { "string" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Float64", " 14", null));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Error struct, Fset *token.FileSet"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Var", "Pos", new String[] { "" },
				new String[] { "token.Pos" }));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "NewChan",
				new String[] { "ChanDir", " Type" }, new String[] { "*Chan" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*PkgName", "Imported",
				new String[] { "" }, new String[] { "*Package" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Var", "IsField", new String[] { "" },
				new String[] { "bool" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*MethodSet", "Len", new String[] { "" },
				new String[] { "int" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Package", "Complete",
				new String[] { "" }, new String[] { "bool" }));
		mapType.get("go/types").add(
				new TypeGoLangApiSignature("go/types", "Info struct, Selections map[*ast.SelectorExpr]*Selection"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Var", "String", new String[] { "" },
				new String[] { "string" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Int8", " 3", null));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "PkgName struct"));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "Id", new String[] { "*Package", " string" },
				new String[] { "string" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Array", "Len", new String[] { "" },
				new String[] { "int64" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Interface", "NumMethods",
				new String[] { "" }, new String[] { "int" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*PkgName", "Type", new String[] { "" },
				new String[] { "Type" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Scope", "Innermost",
				new String[] { "token.Pos" }, new String[] { "*Scope" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Signature", "Underlying",
				new String[] { "" }, new String[] { "Type" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Int32", null, "BasicKind"));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "NewFunc",
				new String[] { "token.Pos", " *Package", " string", " *Signature" }, new String[] { "*Func" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "MethodExpr", null, "SelectionKind"));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Importer interface { Import }"));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "UntypedFloat", null, "BasicKind"));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "ObjectString",
				new String[] { "Object", " Qualifier" }, new String[] { "string" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*PkgName", "Name", new String[] { "" },
				new String[] { "string" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Selection", "Recv",
				new String[] { "" }, new String[] { "Type" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "TypeAndValue struct, Type Type"));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Int16", " 4", null));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Label", "Exported",
				new String[] { "" }, new String[] { "bool" }));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "NewMethodSet", new String[] { "Type" },
				new String[] { "*MethodSet" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "TypeAndValue", "IsNil",
				new String[] { "" }, new String[] { "bool" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "FieldVal", " 0", null));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Config struct, Importer Importer"));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Uint32", null, "BasicKind"));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Float32", " 13", null));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "IsFloat", " 8", null));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "UnsafePointer", null, "BasicKind"));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "NewField",
				new String[] { "token.Pos", " *Package", " string", " Type", " bool" }, new String[] { "*Var" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Signature", "Recv",
				new String[] { "" }, new String[] { "*Var" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Const struct"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Slice", "Elem", new String[] { "" },
				new String[] { "Type" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Basic", "Underlying",
				new String[] { "" }, new String[] { "Type" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Slice", "String", new String[] { "" },
				new String[] { "string" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "UntypedInt", " 20", null));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "ConvertibleTo",
				new String[] { "Type", " Type" }, new String[] { "bool" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Named", "Method",
				new String[] { "int" }, new String[] { "*Func" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "TypeName struct"));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "NewChecker",
				new String[] { "*Config", " *token.FileSet", " *Package", " *Info" }, new String[] { "*Checker" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Scope", "String", new String[] { "" },
				new String[] { "string" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Func", "Pkg", new String[] { "" },
				new String[] { "*Package" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Selection", "Indirect",
				new String[] { "" }, new String[] { "bool" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "IsInteger", null, "BasicInfo"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*TypeName", "Id", new String[] { "" },
				new String[] { "string" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Func", "String", new String[] { "" },
				new String[] { "string" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Complex128", null, "BasicKind"));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "NewPkgName",
				new String[] { "token.Pos", " *Package", " string", " *Package" }, new String[] { "*PkgName" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Const", "Id", new String[] { "" },
				new String[] { "string" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Selection", "Type",
				new String[] { "" }, new String[] { "Type" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Uint64", " 11", null));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Func", "Pos", new String[] { "" },
				new String[] { "token.Pos" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Package", "Scope", new String[] { "" },
				new String[] { "*Scope" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Signature", "String",
				new String[] { "" }, new String[] { "string" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Object interface, Exported() bool"));
		mapVar.get("go/types").add(new VarGoLangApiSignature("go/types", "Unsafe", "*Package"));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Error struct, Pos token.Pos"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Scope", "Pos", new String[] { "" },
				new String[] { "token.Pos" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Basic", "Name", new String[] { "" },
				new String[] { "string" }));
		mapFunc.get("go/types").add(
				new FuncGoLangApiSignature("go/types", "Comparable", new String[] { "Type" }, new String[] { "bool" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Byte", " 8", null));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Nil", "Parent", new String[] { "" },
				new String[] { "*Scope" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Info struct"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "TypeAndValue", "IsValue",
				new String[] { "" }, new String[] { "bool" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Info struct, Scopes map[ast.Node]*Scope"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "TypeAndValue", "IsBuiltin",
				new String[] { "" }, new String[] { "bool" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Interface", "Underlying",
				new String[] { "" }, new String[] { "Type" }));
	}

	private void build1() {
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Sizes interface, Sizeof(Type) int64"));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Rune", null, "BasicKind"));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "IsOrdered", null, "BasicInfo"));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "NewSignature",
				new String[] { "*Var", " *Tuple", " *Tuple", " bool" }, new String[] { "*Signature" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "UntypedInt", null, "BasicKind"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Builtin", "Id", new String[] { "" },
				new String[] { "string" }));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "NewParam",
				new String[] { "token.Pos", " *Package", " string", " Type" }, new String[] { "*Var" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Label", "Type", new String[] { "" },
				new String[] { "Type" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Uint32", " 10", null));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Selection struct"));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "StdSizes struct, WordSize int64"));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Uint64", null, "BasicKind"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Info", "TypeOf",
				new String[] { "ast.Expr" }, new String[] { "Type" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Scope", "WriteTo",
				new String[] { "io.Writer", " int", " bool" }, new String[] { "" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Slice", "Underlying",
				new String[] { "" }, new String[] { "Type" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Object interface, String() string"));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Invalid", null, "BasicKind"));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "IsNumeric", " 26", null));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Var", "Pkg", new String[] { "" },
				new String[] { "*Package" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Uint16", " 9", null));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "MethodExpr", " 2", null));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Map struct"));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Object interface, Id() string"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Package", "SetImports",
				new String[] { "[]*Package" }, new String[] { "" }));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "Uint", null, "BasicKind"));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Array struct"));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "IsString", null, "BasicInfo"));
		mapType.get("go/types")
				.add(new TypeGoLangApiSignature("go/types", "Sizes interface { Alignof, Offsetsof, Sizeof }"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Label", "Parent", new String[] { "" },
				new String[] { "*Scope" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Scope", "LookupParent",
				new String[] { "string", " token.Pos" }, new String[] { "*Scope", " Object" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Func", "FullName", new String[] { "" },
				new String[] { "string" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Pointer", "Elem", new String[] { "" },
				new String[] { "Type" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Package", "String",
				new String[] { "" }, new String[] { "string" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "TypeAndValue", "Addressable",
				new String[] { "" }, new String[] { "bool" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Config struct, IgnoreFuncBodies bool"));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Interface", "String",
				new String[] { "" }, new String[] { "string" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Nil", "Name", new String[] { "" },
				new String[] { "string" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*MethodSet", "At",
				new String[] { "int" }, new String[] { "*Selection" }));
		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "TypeAndValue", "Assignable",
				new String[] { "" }, new String[] { "bool" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Slice struct"));
		mapConst.get("go/types").add(new ConstGoLangApiSignature("go/types", "MethodVal", " 1", null));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "Checker struct, embedded *Info"));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "NewInterface",
				new String[] { "[]*Func", " []*Named" }, new String[] { "*Interface" }));

		pkgs.add("runtime");
		mapConst.putIfAbsent("runtime", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("runtime", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("runtime", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("runtime", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("runtime", new HashSet<VarGoLangApiSignature>());

		mapType.get("runtime").add(new TypeGoLangApiSignature("runtime", "MemStats struct, GCCPUFraction float64"));
		mapFunc.get("runtime")
				.add(new FuncGoLangApiSignature("runtime", "StopTrace", new String[] { "" }, new String[] { "" }));
		mapFunc.get("runtime").add(
				new FuncGoLangApiSignature("runtime", "StartTrace", new String[] { "" }, new String[] { "error" }));
		mapFunc.get("runtime").add(
				new FuncGoLangApiSignature("runtime", "ReadTrace", new String[] { "" }, new String[] { "[]uint8" }));

		pkgs.add("go/ast");
		mapConst.putIfAbsent("go/ast", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("go/ast", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("go/ast", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("go/ast", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("go/ast", new HashSet<VarGoLangApiSignature>());

		mapType.get("go/ast").add(new TypeGoLangApiSignature("go/ast", "EmptyStmt struct, Implicit bool"));

		pkgs.add("syscall (openbsd-amd64)");
		mapConst.putIfAbsent("syscall (openbsd-amd64)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (openbsd-amd64)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (openbsd-amd64)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (openbsd-amd64)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (openbsd-amd64)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (openbsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64)", "SysProcAttr struct, Pgid int"));
		mapType.get("syscall (openbsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64)", "SysProcAttr struct, Ctty int"));
		mapType.get("syscall (openbsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64)", "SysProcAttr struct, Foreground bool"));

		pkgs.add("database/sql");
		mapConst.putIfAbsent("database/sql", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("database/sql", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("database/sql", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("database/sql", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("database/sql", new HashSet<VarGoLangApiSignature>());

		mapType.get("database/sql")
				.add(new TypeGoLangApiSignature("database/sql", "DBStats struct, OpenConnections int"));
		mapType.get("database/sql").add(new TypeGoLangApiSignature("database/sql", "DBStats struct"));
		mapMethod.get("database/sql").add(new MethodGoLangApiSignature("database/sql", "*DB", "Stats",
				new String[] { "" }, new String[] { "DBStats" }));

		pkgs.add("crypto");
		mapConst.putIfAbsent("crypto", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("crypto", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("crypto", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("crypto", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("crypto", new HashSet<VarGoLangApiSignature>());

		mapConst.get("crypto").add(new ConstGoLangApiSignature("crypto", "SHA512_224", " 14", null));
		mapConst.get("crypto").add(new ConstGoLangApiSignature("crypto", "SHA512_256", " 15", null));
		mapType.get("crypto").add(new TypeGoLangApiSignature("crypto", "Decrypter interface, Public() PublicKey"));
		mapType.get("crypto").add(new TypeGoLangApiSignature("crypto", "DecrypterOpts interface {}"));
		mapConst.get("crypto").add(new ConstGoLangApiSignature("crypto", "SHA512_224", null, "Hash"));
		mapConst.get("crypto").add(new ConstGoLangApiSignature("crypto", "SHA512_256", null, "Hash"));
		mapType.get("crypto").add(new TypeGoLangApiSignature("crypto",
				"Decrypter interface, Decrypt(io.Reader, []uint8, DecrypterOpts) ([]uint8, error)"));
		mapType.get("crypto").add(new TypeGoLangApiSignature("crypto", "Decrypter interface { Decrypt, Public }"));

		pkgs.add("syscall (linux-arm)");
		mapConst.putIfAbsent("syscall (linux-arm)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (linux-arm)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (linux-arm)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (linux-arm)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (linux-arm)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (linux-arm)")
				.add(new TypeGoLangApiSignature("syscall (linux-arm)", "SysProcAttr struct, Pgid int"));
		mapType.get("syscall (linux-arm)").add(new TypeGoLangApiSignature("syscall (linux-arm)",
				"SysProcAttr struct, GidMappingsEnableSetgroups bool"));
		mapType.get("syscall (linux-arm)")
				.add(new TypeGoLangApiSignature("syscall (linux-arm)", "SysProcAttr struct, Foreground bool"));

		pkgs.add("syscall (netbsd-arm-cgo)");
		mapConst.putIfAbsent("syscall (netbsd-arm-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (netbsd-arm-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (netbsd-arm-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (netbsd-arm-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (netbsd-arm-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (netbsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (netbsd-arm-cgo)", "SysProcAttr struct, Ctty int"));
		mapType.get("syscall (netbsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (netbsd-arm-cgo)", "SysProcAttr struct, Foreground bool"));
		mapType.get("syscall (netbsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (netbsd-arm-cgo)", "SysProcAttr struct, Pgid int"));

		pkgs.add("syscall (darwin-amd64-cgo)");
		mapConst.putIfAbsent("syscall (darwin-amd64-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (darwin-amd64-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (darwin-amd64-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (darwin-amd64-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (darwin-amd64-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (darwin-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (darwin-amd64-cgo)", "SysProcAttr struct, Pgid int"));
		mapType.get("syscall (darwin-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (darwin-amd64-cgo)", "SysProcAttr struct, Foreground bool"));
		mapType.get("syscall (darwin-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (darwin-amd64-cgo)", "SysProcAttr struct, Ctty int"));

		pkgs.add("syscall (netbsd-386-cgo)");
		mapConst.putIfAbsent("syscall (netbsd-386-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (netbsd-386-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (netbsd-386-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (netbsd-386-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (netbsd-386-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (netbsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (netbsd-386-cgo)", "SysProcAttr struct, Pgid int"));
		mapType.get("syscall (netbsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (netbsd-386-cgo)", "SysProcAttr struct, Foreground bool"));
		mapType.get("syscall (netbsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (netbsd-386-cgo)", "SysProcAttr struct, Ctty int"));

		pkgs.add("unicode");
		mapConst.putIfAbsent("unicode", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("unicode", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("unicode", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("unicode", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("unicode", new HashSet<VarGoLangApiSignature>());

		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Hatran", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "SignWriting", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Ahom", "*RangeTable"));
		mapConst.get("unicode").add(new ConstGoLangApiSignature("unicode", "Version", " \"8.0.0\"", null));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Anatolian_Hieroglyphs", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Multani", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Old_Hungarian", "*RangeTable"));

		pkgs.add("go/build");
		mapConst.putIfAbsent("go/build", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("go/build", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("go/build", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("go/build", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("go/build", new HashSet<VarGoLangApiSignature>());

		mapType.get("go/build").add(new TypeGoLangApiSignature("go/build", "Package struct, PkgTargetRoot string"));

		pkgs.add("net/mail");
		mapConst.putIfAbsent("net/mail", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net/mail", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net/mail", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net/mail", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net/mail", new HashSet<VarGoLangApiSignature>());

		mapType.get("net/mail")
				.add(new TypeGoLangApiSignature("net/mail", "AddressParser struct, WordDecoder *mime.WordDecoder"));
		mapType.get("net/mail").add(new TypeGoLangApiSignature("net/mail", "AddressParser struct"));
		mapMethod.get("net/mail").add(new MethodGoLangApiSignature("net/mail", "*AddressParser", "Parse",
				new String[] { "string" }, new String[] { "*Address", " error" }));
		mapMethod.get("net/mail").add(new MethodGoLangApiSignature("net/mail", "*AddressParser", "ParseList",
				new String[] { "string" }, new String[] { "[]*Address", " error" }));

		pkgs.add("syscall (darwin-amd64)");
		mapConst.putIfAbsent("syscall (darwin-amd64)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (darwin-amd64)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (darwin-amd64)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (darwin-amd64)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (darwin-amd64)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (darwin-amd64)")
				.add(new TypeGoLangApiSignature("syscall (darwin-amd64)", "SysProcAttr struct, Pgid int"));
		mapType.get("syscall (darwin-amd64)")
				.add(new TypeGoLangApiSignature("syscall (darwin-amd64)", "SysProcAttr struct, Ctty int"));
		mapType.get("syscall (darwin-amd64)")
				.add(new TypeGoLangApiSignature("syscall (darwin-amd64)", "SysProcAttr struct, Foreground bool"));

		pkgs.add("go/parser");
		mapConst.putIfAbsent("go/parser", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("go/parser", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("go/parser", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("go/parser", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("go/parser", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("go/parser")
				.add(new FuncGoLangApiSignature("go/parser", "ParseExprFrom",
						new String[] { "*token.FileSet", " string", " interface{}", " Mode" },
						new String[] { "ast.Expr", " error" }));

		pkgs.add("net/url");
		mapConst.putIfAbsent("net/url", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net/url", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net/url", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net/url", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net/url", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("net/url").add(new MethodGoLangApiSignature("net/url", "*URL", "EscapedPath", new String[] { "" },
				new String[] { "string" }));
		mapType.get("net/url").add(new TypeGoLangApiSignature("net/url", "URL struct, RawPath string"));

		pkgs.add("html/template");
		mapConst.putIfAbsent("html/template", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("html/template", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("html/template", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("html/template", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("html/template", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("html/template").add(new MethodGoLangApiSignature("html/template", "*Template", "Option",
				new String[] { "...string" }, new String[] { "*Template" }));

		pkgs.add("bufio");
		mapConst.putIfAbsent("bufio", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("bufio", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("bufio", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("bufio", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("bufio", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("bufio").add(new MethodGoLangApiSignature("bufio", "*Reader", "Discard", new String[] { "int" },
				new String[] { "int", " error" }));
		mapMethod.get("bufio").add(new MethodGoLangApiSignature("bufio", "ReadWriter", "Discard",
				new String[] { "int" }, new String[] { "int", " error" }));

		pkgs.add("flag");
		mapConst.putIfAbsent("flag", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("flag", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("flag", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("flag", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("flag", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("flag").add(new FuncGoLangApiSignature("flag", "UnquoteUsage", new String[] { "*Flag" },
				new String[] { "string", " string" }));

		pkgs.add("syscall (linux-386)");
		mapConst.putIfAbsent("syscall (linux-386)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (linux-386)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (linux-386)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (linux-386)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (linux-386)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (linux-386)").add(new TypeGoLangApiSignature("syscall (linux-386)",
				"SysProcAttr struct, GidMappingsEnableSetgroups bool"));
		mapType.get("syscall (linux-386)")
				.add(new TypeGoLangApiSignature("syscall (linux-386)", "SysProcAttr struct, Foreground bool"));
		mapType.get("syscall (linux-386)")
				.add(new TypeGoLangApiSignature("syscall (linux-386)", "SysProcAttr struct, Pgid int"));

		pkgs.add("log");
		mapConst.putIfAbsent("log", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("log", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("log", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("log", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("log", new HashSet<VarGoLangApiSignature>());

		mapConst.get("log").add(new ConstGoLangApiSignature("log", "LUTC", null, "ideal-int"));
		mapFunc.get("log").add(new FuncGoLangApiSignature("log", "Output", new String[] { "int", " string" },
				new String[] { "error" }));
		mapMethod.get("log").add(new MethodGoLangApiSignature("log", "*Logger", "SetOutput",
				new String[] { "io.Writer" }, new String[] { "" }));
		mapConst.get("log").add(new ConstGoLangApiSignature("log", "LUTC", " 32", null));

		pkgs.add("syscall (freebsd-arm-cgo)");
		mapConst.putIfAbsent("syscall (freebsd-arm-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (freebsd-arm-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (freebsd-arm-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (freebsd-arm-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (freebsd-arm-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (freebsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm-cgo)", "SysProcAttr struct, Pgid int"));
		mapType.get("syscall (freebsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm-cgo)", "SysProcAttr struct, Ctty int"));
		mapType.get("syscall (freebsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm-cgo)", "SysProcAttr struct, Foreground bool"));

		pkgs.add("syscall (freebsd-386-cgo)");
		mapConst.putIfAbsent("syscall (freebsd-386-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (freebsd-386-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (freebsd-386-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (freebsd-386-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (freebsd-386-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (freebsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386-cgo)", "SysProcAttr struct, Pgid int"));
		mapType.get("syscall (freebsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386-cgo)", "SysProcAttr struct, Ctty int"));
		mapType.get("syscall (freebsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386-cgo)", "SysProcAttr struct, Foreground bool"));

		pkgs.add("syscall (freebsd-amd64-cgo)");
		mapConst.putIfAbsent("syscall (freebsd-amd64-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (freebsd-amd64-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (freebsd-amd64-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (freebsd-amd64-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (freebsd-amd64-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (freebsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64-cgo)", "SysProcAttr struct, Foreground bool"));
		mapType.get("syscall (freebsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64-cgo)", "SysProcAttr struct, Pgid int"));
		mapType.get("syscall (freebsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64-cgo)", "SysProcAttr struct, Ctty int"));

		pkgs.add("mime/quotedprintable");
		mapConst.putIfAbsent("mime/quotedprintable", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("mime/quotedprintable", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("mime/quotedprintable", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("mime/quotedprintable", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("mime/quotedprintable", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("mime/quotedprintable").add(new FuncGoLangApiSignature("mime/quotedprintable", "NewReader",
				new String[] { "io.Reader" }, new String[] { "*Reader" }));
		mapMethod.get("mime/quotedprintable").add(new MethodGoLangApiSignature("mime/quotedprintable", "*Writer",
				"Write", new String[] { "[]uint8" }, new String[] { "int", " error" }));
		mapType.get("mime/quotedprintable").add(new TypeGoLangApiSignature("mime/quotedprintable", "Reader struct"));
		mapType.get("mime/quotedprintable")
				.add(new TypeGoLangApiSignature("mime/quotedprintable", "Writer struct, Binary bool"));
		mapMethod.get("mime/quotedprintable").add(new MethodGoLangApiSignature("mime/quotedprintable", "*Reader",
				"Read", new String[] { "[]uint8" }, new String[] { "int", " error" }));
		mapMethod.get("mime/quotedprintable").add(new MethodGoLangApiSignature("mime/quotedprintable", "*Writer",
				"Close", new String[] { "" }, new String[] { "error" }));
		mapFunc.get("mime/quotedprintable").add(new FuncGoLangApiSignature("mime/quotedprintable", "NewWriter",
				new String[] { "io.Writer" }, new String[] { "*Writer" }));
		mapType.get("mime/quotedprintable").add(new TypeGoLangApiSignature("mime/quotedprintable", "Writer struct"));

		pkgs.add("crypto/cipher");
		mapConst.putIfAbsent("crypto/cipher", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("crypto/cipher", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("crypto/cipher", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("crypto/cipher", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("crypto/cipher", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("crypto/cipher").add(new FuncGoLangApiSignature("crypto/cipher", "NewGCMWithNonceSize",
				new String[] { "Block", " int" }, new String[] { "AEAD", " error" }));

		pkgs.add("crypto/x509/pkix");
		mapConst.putIfAbsent("crypto/x509/pkix", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("crypto/x509/pkix", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("crypto/x509/pkix", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("crypto/x509/pkix", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("crypto/x509/pkix", new HashSet<VarGoLangApiSignature>());

		mapType.get("crypto/x509/pkix")
				.add(new TypeGoLangApiSignature("crypto/x509/pkix", "Name struct, ExtraNames []AttributeTypeAndValue"));

		pkgs.add("syscall (freebsd-386)");
		mapConst.putIfAbsent("syscall (freebsd-386)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (freebsd-386)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (freebsd-386)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (freebsd-386)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (freebsd-386)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (freebsd-386)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386)", "SysProcAttr struct, Pgid int"));
		mapType.get("syscall (freebsd-386)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386)", "SysProcAttr struct, Foreground bool"));
		mapType.get("syscall (freebsd-386)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386)", "SysProcAttr struct, Ctty int"));

		pkgs.add("strings");
		mapConst.putIfAbsent("strings", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("strings", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("strings", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("strings", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("strings", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("strings").add(new FuncGoLangApiSignature("strings", "LastIndexByte",
				new String[] { "string", " uint8" }, new String[] { "int" }));
		mapFunc.get("strings").add(new FuncGoLangApiSignature("strings", "Compare",
				new String[] { "string", " string" }, new String[] { "int" }));
		mapMethod.get("strings").add(new MethodGoLangApiSignature("strings", "*Reader", "Size", new String[] { "" },
				new String[] { "int64" }));

		pkgs.add("syscall (darwin-386-cgo)");
		mapConst.putIfAbsent("syscall (darwin-386-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (darwin-386-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (darwin-386-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (darwin-386-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (darwin-386-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (darwin-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (darwin-386-cgo)", "SysProcAttr struct, Pgid int"));
		mapType.get("syscall (darwin-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (darwin-386-cgo)", "SysProcAttr struct, Ctty int"));
		mapType.get("syscall (darwin-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (darwin-386-cgo)", "SysProcAttr struct, Foreground bool"));

		pkgs.add("syscall (netbsd-arm)");
		mapConst.putIfAbsent("syscall (netbsd-arm)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (netbsd-arm)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (netbsd-arm)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (netbsd-arm)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (netbsd-arm)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (netbsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (netbsd-arm)", "SysProcAttr struct, Ctty int"));
		mapType.get("syscall (netbsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (netbsd-arm)", "SysProcAttr struct, Foreground bool"));
		mapType.get("syscall (netbsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (netbsd-arm)", "SysProcAttr struct, Pgid int"));

		pkgs.add("go/types, func NewConst(token.Pos, *Package, string, Type");
		mapConst.putIfAbsent("go/types, func NewConst(token.Pos, *Package, string, Type",
				new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("go/types, func NewConst(token.Pos, *Package, string, Type",
				new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("go/types, func NewConst(token.Pos, *Package, string, Type",
				new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("go/types, func NewConst(token.Pos, *Package, string, Type",
				new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("go/types, func NewConst(token.Pos, *Package, string, Type",
				new HashSet<VarGoLangApiSignature>());

		mapFunc.get("go/types, func NewConst(token.Pos, *Package, string, Type")
				.add(new FuncGoLangApiSignature("go/types", "NewConst",
						new String[] { "token.Pos", " *Package", " string", " Type", " constant.Value" },
						new String[] { "*Const" }));

		pkgs.add("net/smtp");
		mapConst.putIfAbsent("net/smtp", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net/smtp", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net/smtp", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net/smtp", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net/smtp", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("net/smtp").add(new MethodGoLangApiSignature("net/smtp", "*Client", "TLSConnectionState",
				new String[] { "" }, new String[] { "tls.ConnectionState", " bool" }));

		pkgs.add("syscall (freebsd-arm)");
		mapConst.putIfAbsent("syscall (freebsd-arm)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (freebsd-arm)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (freebsd-arm)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (freebsd-arm)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (freebsd-arm)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (freebsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm)", "SysProcAttr struct, Pgid int"));
		mapType.get("syscall (freebsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm)", "SysProcAttr struct, Foreground bool"));
		mapType.get("syscall (freebsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm)", "SysProcAttr struct, Ctty int"));

		pkgs.add("crypto/rsa");
		mapConst.putIfAbsent("crypto/rsa", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("crypto/rsa", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("crypto/rsa", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("crypto/rsa", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("crypto/rsa", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("crypto/rsa")
				.add(new MethodGoLangApiSignature("crypto/rsa", "*PrivateKey", "Decrypt",
						new String[] { "io.Reader", " []uint8", " crypto.DecrypterOpts" },
						new String[] { "[]uint8", " error" }));
		mapType.get("crypto/rsa").add(new TypeGoLangApiSignature("crypto/rsa", "OAEPOptions struct"));
		mapType.get("crypto/rsa").add(new TypeGoLangApiSignature("crypto/rsa", "OAEPOptions struct, Label []uint8"));
		mapType.get("crypto/rsa")
				.add(new TypeGoLangApiSignature("crypto/rsa", "PKCS1v15DecryptOptions struct, SessionKeyLen int"));
		mapType.get("crypto/rsa").add(new TypeGoLangApiSignature("crypto/rsa", "OAEPOptions struct, Hash crypto.Hash"));
		mapType.get("crypto/rsa").add(new TypeGoLangApiSignature("crypto/rsa", "PKCS1v15DecryptOptions struct"));

		pkgs.add("debug/dwarf");
		mapConst.putIfAbsent("debug/dwarf", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("debug/dwarf", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("debug/dwarf", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("debug/dwarf", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("debug/dwarf", new HashSet<VarGoLangApiSignature>());

		mapType.get("debug/dwarf").add(new TypeGoLangApiSignature("debug/dwarf", "Class int"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassReference", null, "Class"));
		mapType.get("debug/dwarf").add(new TypeGoLangApiSignature("debug/dwarf", "LineEntry struct, OpIndex int"));
		mapType.get("debug/dwarf").add(new TypeGoLangApiSignature("debug/dwarf", "LineFile struct, Name string"));
		mapMethod.get("debug/dwarf").add(new MethodGoLangApiSignature("debug/dwarf", "*LineReader", "Next",
				new String[] { "*LineEntry" }, new String[] { "error" }));
		mapType.get("debug/dwarf").add(new TypeGoLangApiSignature("debug/dwarf", "LineEntry struct, IsStmt bool"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassBlock", null, "Class"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassMacPtr", null, "Class"));
		mapMethod.get("debug/dwarf").add(new MethodGoLangApiSignature("debug/dwarf", "*LineReader", "SeekPC",
				new String[] { "uint64", " *LineEntry" }, new String[] { "error" }));
		mapType.get("debug/dwarf").add(new TypeGoLangApiSignature("debug/dwarf", "Field struct, Class Class"));
		mapType.get("debug/dwarf")
				.add(new TypeGoLangApiSignature("debug/dwarf", "LineEntry struct, EpilogueBegin bool"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassStringAlt", " 14", null));
		mapMethod.get("debug/dwarf").add(new MethodGoLangApiSignature("debug/dwarf", "Class", "GoString",
				new String[] { "" }, new String[] { "string" }));
		mapType.get("debug/dwarf").add(new TypeGoLangApiSignature("debug/dwarf", "LineFile struct"));
		mapMethod.get("debug/dwarf").add(new MethodGoLangApiSignature("debug/dwarf", "*Reader", "AddressSize",
				new String[] { "" }, new String[] { "int" }));
		mapType.get("debug/dwarf").add(new TypeGoLangApiSignature("debug/dwarf", "LineEntry struct, ISA int"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassReferenceSig", null, "Class"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassBlock", " 2", null));
		mapType.get("debug/dwarf")
				.add(new TypeGoLangApiSignature("debug/dwarf", "LineEntry struct, Discriminator int"));
		mapType.get("debug/dwarf").add(new TypeGoLangApiSignature("debug/dwarf", "LineEntry struct, File *LineFile"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassMacPtr", " 8", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassLocListPtr", " 7", null));
		mapType.get("debug/dwarf").add(new TypeGoLangApiSignature("debug/dwarf", "LineEntry struct"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassReference", " 10", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassReferenceSig", " 11", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassStringAlt", null, "Class"));
		mapType.get("debug/dwarf").add(new TypeGoLangApiSignature("debug/dwarf", "LineEntry struct, EndSequence bool"));
		mapType.get("debug/dwarf").add(new TypeGoLangApiSignature("debug/dwarf", "LineEntry struct, Address uint64"));
		mapType.get("debug/dwarf").add(new TypeGoLangApiSignature("debug/dwarf", "LineFile struct, Length int"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassReferenceAlt", " 13", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassAddress", " 1", null));
		mapVar.get("debug/dwarf").add(new VarGoLangApiSignature("debug/dwarf", "ErrUnknownPC", "error"));
		mapMethod.get("debug/dwarf").add(new MethodGoLangApiSignature("debug/dwarf", "*Entry", "AttrField",
				new String[] { "Attr" }, new String[] { "*Field" }));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassLocListPtr", null, "Class"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassString", " 12", null));
		mapType.get("debug/dwarf").add(new TypeGoLangApiSignature("debug/dwarf", "LineEntry struct, Line int"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassRangeListPtr", null, "Class"));
		mapType.get("debug/dwarf").add(new TypeGoLangApiSignature("debug/dwarf", "LineEntry struct, BasicBlock bool"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassAddress", null, "Class"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassRangeListPtr", " 9", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassString", null, "Class"));
		mapMethod.get("debug/dwarf").add(new MethodGoLangApiSignature("debug/dwarf", "*LineReader", "Reset",
				new String[] { "" }, new String[] { "" }));
		mapMethod.get("debug/dwarf").add(new MethodGoLangApiSignature("debug/dwarf", "*Data", "LineReader",
				new String[] { "*Entry" }, new String[] { "*LineReader", " error" }));
		mapType.get("debug/dwarf").add(new TypeGoLangApiSignature("debug/dwarf", "LineReaderPos struct"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassExprLoc", null, "Class"));
		mapMethod.get("debug/dwarf").add(new MethodGoLangApiSignature("debug/dwarf", "Class", "String",
				new String[] { "" }, new String[] { "string" }));
		mapType.get("debug/dwarf").add(new TypeGoLangApiSignature("debug/dwarf", "LineFile struct, Mtime uint64"));
		mapType.get("debug/dwarf").add(new TypeGoLangApiSignature("debug/dwarf", "LineEntry struct, PrologueEnd bool"));
		mapMethod.get("debug/dwarf").add(new MethodGoLangApiSignature("debug/dwarf", "*LineReader", "Seek",
				new String[] { "LineReaderPos" }, new String[] { "" }));
		mapType.get("debug/dwarf").add(new TypeGoLangApiSignature("debug/dwarf", "LineReader struct"));
		mapMethod.get("debug/dwarf").add(new MethodGoLangApiSignature("debug/dwarf", "*LineReader", "Tell",
				new String[] { "" }, new String[] { "LineReaderPos" }));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassConstant", " 3", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassConstant", null, "Class"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassFlag", " 5", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassLinePtr", " 6", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassLinePtr", null, "Class"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassFlag", null, "Class"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassReferenceAlt", null, "Class"));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassExprLoc", " 4", null));
		mapType.get("debug/dwarf").add(new TypeGoLangApiSignature("debug/dwarf", "LineEntry struct, Column int"));

		pkgs.add("os");
		mapConst.putIfAbsent("os", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("os", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("os", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("os", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("os", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("os").add(new FuncGoLangApiSignature("os", "LookupEnv", new String[] { "string" },
				new String[] { "string", " bool" }));

		pkgs.add("go/importer");
		mapConst.putIfAbsent("go/importer", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("go/importer", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("go/importer", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("go/importer", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("go/importer", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("go/importer").add(new FuncGoLangApiSignature("go/importer", "Default", new String[] { "" },
				new String[] { "types.Importer" }));
		mapFunc.get("go/importer").add(new FuncGoLangApiSignature("go/importer", "For",
				new String[] { "string", " Lookup" }, new String[] { "types.Importer" }));
		mapType.get("go/importer")
				.add(new TypeGoLangApiSignature("go/importer", "Lookup func(string) (io.ReadCloser, error)"));

		pkgs.add("image/color");
		mapConst.putIfAbsent("image/color", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("image/color", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("image/color", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("image/color", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("image/color", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("image/color").add(new FuncGoLangApiSignature("image/color", "RGBToCMYK",
				new String[] { "uint8", " uint8", " uint8" }, new String[] { "uint8", " uint8", " uint8", " uint8" }));
		mapType.get("image/color").add(new TypeGoLangApiSignature("image/color", "CMYK struct, Y uint8"));
		mapType.get("image/color").add(new TypeGoLangApiSignature("image/color", "CMYK struct, C uint8"));
		mapFunc.get("image/color").add(new FuncGoLangApiSignature("image/color", "CMYKToRGB",
				new String[] { "uint8", " uint8", " uint8", " uint8" }, new String[] { "uint8", " uint8", " uint8" }));
		mapVar.get("image/color").add(new VarGoLangApiSignature("image/color", "CMYKModel", "Model"));
		mapMethod.get("image/color").add(new MethodGoLangApiSignature("image/color", "CMYK", "RGBA",
				new String[] { "" }, new String[] { "uint32", " uint32", " uint32", " uint32" }));
		mapType.get("image/color").add(new TypeGoLangApiSignature("image/color", "CMYK struct, M uint8"));
		mapType.get("image/color").add(new TypeGoLangApiSignature("image/color", "CMYK struct"));
		mapType.get("image/color").add(new TypeGoLangApiSignature("image/color", "CMYK struct, K uint8"));

		pkgs.add("runtime/trace");
		mapConst.putIfAbsent("runtime/trace", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("runtime/trace", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("runtime/trace", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("runtime/trace", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("runtime/trace", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("runtime/trace").add(new FuncGoLangApiSignature("runtime/trace", "Start",
				new String[] { "io.Writer" }, new String[] { "error" }));
		mapFunc.get("runtime/trace")
				.add(new FuncGoLangApiSignature("runtime/trace", "Stop", new String[] { "" }, new String[] { "" }));

		pkgs.add("syscall (openbsd-amd64-cgo)");
		mapConst.putIfAbsent("syscall (openbsd-amd64-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (openbsd-amd64-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (openbsd-amd64-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (openbsd-amd64-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (openbsd-amd64-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (openbsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SysProcAttr struct, Foreground bool"));
		mapType.get("syscall (openbsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SysProcAttr struct, Ctty int"));
		mapType.get("syscall (openbsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64-cgo)", "SysProcAttr struct, Pgid int"));

		pkgs.add("syscall (darwin-386)");
		mapConst.putIfAbsent("syscall (darwin-386)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (darwin-386)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (darwin-386)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (darwin-386)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (darwin-386)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (darwin-386)")
				.add(new TypeGoLangApiSignature("syscall (darwin-386)", "SysProcAttr struct, Ctty int"));
		mapType.get("syscall (darwin-386)")
				.add(new TypeGoLangApiSignature("syscall (darwin-386)", "SysProcAttr struct, Foreground bool"));
		mapType.get("syscall (darwin-386)")
				.add(new TypeGoLangApiSignature("syscall (darwin-386)", "SysProcAttr struct, Pgid int"));

		pkgs.add("archive/zip");
		mapConst.putIfAbsent("archive/zip", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("archive/zip", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("archive/zip", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("archive/zip", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("archive/zip", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("archive/zip").add(new MethodGoLangApiSignature("archive/zip", "*Writer", "SetOffset",
				new String[] { "int64" }, new String[] { "" }));

		pkgs.add("syscall (netbsd-386)");
		mapConst.putIfAbsent("syscall (netbsd-386)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (netbsd-386)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (netbsd-386)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (netbsd-386)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (netbsd-386)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (netbsd-386)")
				.add(new TypeGoLangApiSignature("syscall (netbsd-386)", "SysProcAttr struct, Pgid int"));
		mapType.get("syscall (netbsd-386)")
				.add(new TypeGoLangApiSignature("syscall (netbsd-386)", "SysProcAttr struct, Foreground bool"));
		mapType.get("syscall (netbsd-386)")
				.add(new TypeGoLangApiSignature("syscall (netbsd-386)", "SysProcAttr struct, Ctty int"));

		pkgs.add("net/http");
		mapConst.putIfAbsent("net/http", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net/http", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net/http", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net/http", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net/http", new HashSet<VarGoLangApiSignature>());

		mapType.get("net/http").add(new TypeGoLangApiSignature("net/http", "Request struct, Cancel <-chan struct"));

		pkgs.add("syscall (linux-386-cgo)");
		mapConst.putIfAbsent("syscall (linux-386-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (linux-386-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (linux-386-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (linux-386-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (linux-386-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (linux-386-cgo)").add(new TypeGoLangApiSignature("syscall (linux-386-cgo)",
				"SysProcAttr struct, GidMappingsEnableSetgroups bool"));
		mapType.get("syscall (linux-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (linux-386-cgo)", "SysProcAttr struct, Pgid int"));
		mapType.get("syscall (linux-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (linux-386-cgo)", "SysProcAttr struct, Foreground bool"));

		pkgs.add("syscall (openbsd-386)");
		mapConst.putIfAbsent("syscall (openbsd-386)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (openbsd-386)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (openbsd-386)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (openbsd-386)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (openbsd-386)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (openbsd-386)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-386)", "SysProcAttr struct, Foreground bool"));
		mapType.get("syscall (openbsd-386)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-386)", "SysProcAttr struct, Pgid int"));
		mapType.get("syscall (openbsd-386)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-386)", "SysProcAttr struct, Ctty int"));

		pkgs.add("bytes");
		mapConst.putIfAbsent("bytes", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("bytes", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("bytes", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("bytes", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("bytes", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("bytes").add(
				new MethodGoLangApiSignature("bytes", "*Buffer", "Cap", new String[] { "" }, new String[] { "int" }));
		mapMethod.get("bytes").add(new MethodGoLangApiSignature("bytes", "*Reader", "Size", new String[] { "" },
				new String[] { "int64" }));
		mapFunc.get("bytes").add(new FuncGoLangApiSignature("bytes", "LastIndexByte",
				new String[] { "[]uint8", " uint8" }, new String[] { "int" }));

		pkgs.add("crypto/sha512");
		mapConst.putIfAbsent("crypto/sha512", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("crypto/sha512", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("crypto/sha512", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("crypto/sha512", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("crypto/sha512", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("crypto/sha512").add(new FuncGoLangApiSignature("crypto/sha512", "Sum512_224",
				new String[] { "[]uint8" }, new String[] { "[28]uint8" }));
		mapConst.get("crypto/sha512").add(new ConstGoLangApiSignature("crypto/sha512", "Size224", null, "ideal-int"));
		mapConst.get("crypto/sha512").add(new ConstGoLangApiSignature("crypto/sha512", "Size256", null, "ideal-int"));
		mapFunc.get("crypto/sha512").add(new FuncGoLangApiSignature("crypto/sha512", "New512_224", new String[] { "" },
				new String[] { "hash.Hash" }));
		mapConst.get("crypto/sha512").add(new ConstGoLangApiSignature("crypto/sha512", "Size256", " 32", null));
		mapFunc.get("crypto/sha512").add(new FuncGoLangApiSignature("crypto/sha512", "New512_256", new String[] { "" },
				new String[] { "hash.Hash" }));
		mapConst.get("crypto/sha512").add(new ConstGoLangApiSignature("crypto/sha512", "Size224", " 28", null));
		mapFunc.get("crypto/sha512").add(new FuncGoLangApiSignature("crypto/sha512", "Sum512_256",
				new String[] { "[]uint8" }, new String[] { "[32]uint8" }));

		pkgs.add("encoding/json");
		mapConst.putIfAbsent("encoding/json", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("encoding/json", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("encoding/json", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("encoding/json", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("encoding/json", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("encoding/json").add(new MethodGoLangApiSignature("encoding/json", "*Decoder", "Token",
				new String[] { "" }, new String[] { "Token", " error" }));
		mapType.get("encoding/json").add(new TypeGoLangApiSignature("encoding/json", "Delim int32"));
		mapType.get("encoding/json").add(new TypeGoLangApiSignature("encoding/json", "Token interface {}"));
		mapMethod.get("encoding/json").add(new MethodGoLangApiSignature("encoding/json", "Delim", "String",
				new String[] { "" }, new String[] { "string" }));
		mapType.get("encoding/json")
				.add(new TypeGoLangApiSignature("encoding/json", "UnmarshalTypeError struct, Offset int64"));
		mapMethod.get("encoding/json").add(new MethodGoLangApiSignature("encoding/json", "*Decoder", "More",
				new String[] { "" }, new String[] { "bool" }));

		pkgs.add("syscall (freebsd-amd64)");
		mapConst.putIfAbsent("syscall (freebsd-amd64)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (freebsd-amd64)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (freebsd-amd64)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (freebsd-amd64)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (freebsd-amd64)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (freebsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64)", "SysProcAttr struct, Ctty int"));
		mapType.get("syscall (freebsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64)", "SysProcAttr struct, Pgid int"));
		mapType.get("syscall (freebsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64)", "SysProcAttr struct, Foreground bool"));

		pkgs.add("time");
		mapConst.putIfAbsent("time", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("time", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("time", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("time", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("time", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("time").add(new MethodGoLangApiSignature("time", "Time", "AppendFormat",
				new String[] { "[]uint8", " string" }, new String[] { "[]uint8" }));

		pkgs.add("debug/elf");
		mapConst.putIfAbsent("debug/elf", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("debug/elf", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("debug/elf", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("debug/elf", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("debug/elf", new HashSet<VarGoLangApiSignature>());

		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TLS", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TPREL16_DS", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_DTPREL64", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TOC", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TLS", " 67", null));
		mapMethod.get("debug/elf").add(new MethodGoLangApiSignature("debug/elf", "R_PPC64", "String",
				new String[] { "" }, new String[] { "string" }));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_DTPREL16_HA", null, "R_PPC64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_DTPREL16_HIGHERA", " 104", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_DTPREL16_HIGHESTA", " 106", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_DTPREL16_HIGHESTA", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_DTPREL16_DS", " 101", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TPREL16_HA", " 72", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TPREL16_LO_DS", " 96", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT_TLSLD16_HA", " 86", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR24", " 2", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR16_HIGHEST", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_REL24", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TLSLD", null, "R_PPC64"));
		mapType.get("debug/elf").add(new TypeGoLangApiSignature("debug/elf", "R_PPC64 int"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR16", " 3", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TLSGD", " 107", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT_TPREL16_LO_DS", " 88", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR16", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TOC16", " 47", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_REL14", " 11", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_DTPREL16_HIGHERA", null, "R_PPC64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT_TLSLD16_HI", null, "R_PPC64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT_TLSLD16_LO", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR16_HIGHEST", " 41", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_JMP_SLOT", " 21", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT_TLSLD16_HA", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_REL32", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_DTPMOD64", " 68", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TLSGD", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_REL14_BRTAKEN", " 12", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR14_BRTAKEN", null, "R_PPC64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT_DTPREL16_HA", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR24", null, "R_PPC64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT_DTPREL16_HI", null, "R_PPC64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR16_HIGHER", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR16_LO", " 4", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR16_HI", " 5", null));
		mapMethod.get("debug/elf").add(new MethodGoLangApiSignature("debug/elf", "R_PPC64", "GoString",
				new String[] { "" }, new String[] { "string" }));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TOC16_LO", " 48", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_DTPREL64", " 78", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TOC16_HI", " 49", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT16_HI", " 16", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT16_LO", " 15", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR16_HA", " 6", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT_TLSGD16", " 79", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT_TPREL16_HI", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TPREL16_HIGHERA", " 98", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT_DTPREL16_DS", null, "R_PPC64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT_TPREL16_DS", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TPREL16_HIGHER", " 97", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_DTPMOD64", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT16_HA", " 17", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT16_HA", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT16_LO_DS", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TOC16_HA", " 50", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT16_LO", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT_TLSLD16_HI", " 85", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_REL64", " 44", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TOC16_LO_DS", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT_TLSLD16_LO", " 84", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT16_HI", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR32", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR64", " 38", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TOC16_LO_DS", " 64", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT_TLSGD16", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT16", null, "R_PPC64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT_TPREL16_HA", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TPREL64", " 73", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT16_DS", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TOC", " 51", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_REL16", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TLSLD", " 108", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_REL14_BRNTAKEN", " 13", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_REL14_BRTAKEN", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR16_HIGHERA", " 40", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR32", " 1", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR16_HIGHESTA", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR16_DS", null, "R_PPC64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_DTPREL16_HIGHER", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT_TLSLD16", " 83", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT16", " 14", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_REL14_BRNTAKEN", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TPREL64", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_REL32", " 26", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TOC16_DS", " 63", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_DTPREL16_LO_DS", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_REL24", " 10", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_DTPREL16_LO_DS", " 102", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT_TPREL16_HI", " 89", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TPREL16_HIGHEST", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR16_DS", " 56", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR16_HI", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR16_LO", null, "R_PPC64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT_TPREL16_LO_DS", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_REL16_HI", " 251", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_REL64", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_REL16_LO", " 250", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_REL16_HA", " 252", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR16_HA", null, "R_PPC64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR14_BRNTAKEN", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_REL16", " 249", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT16_DS", " 58", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TPREL16_HIGHER", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR14", " 7", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR14", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR16_LO_DS", " 57", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TPREL16_LO_DS", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT_DTPREL16_HI", " 93", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT_TPREL16_DS", " 87", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT_DTPREL16_HA", " 94", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TPREL16_DS", " 95", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT_TPREL16_HA", " 90", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_REL16_HI", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT_DTPREL16_DS", " 91", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_DTPREL16_HIGHEST", " 105", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT_DTPREL16_LO_DS", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT_TLSLD16", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR14_BRTAKEN", " 8", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR16_LO_DS", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_DTPREL16_HI", " 76", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_DTPREL16_LO", " 75", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_REL16_LO", null, "R_PPC64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TPREL16_HIGHESTA", " 100", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR16_HIGHERA", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR64", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_DTPREL16_HA", " 77", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_DTPREL16_HIGHEST", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_REL16_HA", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT16_LO_DS", " 59", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TPREL16", null, "R_PPC64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TPREL16_HIGHERA", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_JMP_SLOT", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TOC16_HI", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TPREL16_HA", null, "R_PPC64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT_DTPREL16_LO_DS", " 92", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT_TLSGD16_HA", null, "R_PPC64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT_TLSGD16_LO", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TOC16_LO", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR16_HIGHESTA", " 42", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_DTPREL16", " 74", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_NONE", " 0", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TOC16_HA", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TPREL16_HIGHEST", " 99", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT_TLSGD16_HI", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TPREL16_HI", " 71", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR14_BRNTAKEN", " 9", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TOC16", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TPREL16_LO", " 70", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT_TLSGD16_HI", " 81", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_ADDR16_HIGHER", " 39", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_DTPREL16_HI", null, "R_PPC64"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_DTPREL16_HIGHER", " 103", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_DTPREL16_LO", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT_TLSGD16_LO", " 80", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_NONE", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_REL14", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TPREL16", " 69", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TPREL16_HI", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_DTPREL16", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_DTPREL16_DS", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_GOT_TLSGD16_HA", " 82", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TPREL16_HIGHESTA", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TPREL16_LO", null, "R_PPC64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_PPC64_TOC16_DS", null, "R_PPC64"));

		pkgs.add("os/signal");
		mapConst.putIfAbsent("os/signal", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("os/signal", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("os/signal", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("os/signal", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("os/signal", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("os/signal").add(
				new FuncGoLangApiSignature("os/signal", "Reset", new String[] { "...os.Signal" }, new String[] { "" }));
		mapFunc.get("os/signal").add(new FuncGoLangApiSignature("os/signal", "Ignore", new String[] { "...os.Signal" },
				new String[] { "" }));

		pkgs.add("go/constant");
		mapConst.putIfAbsent("go/constant", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("go/constant", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("go/constant", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("go/constant", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("go/constant", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("go/constant").add(new FuncGoLangApiSignature("go/constant", "MakeUint64",
				new String[] { "uint64" }, new String[] { "Value" }));
		mapConst.get("go/constant").add(new ConstGoLangApiSignature("go/constant", "Complex", null, "Kind"));
		mapFunc.get("go/constant").add(new FuncGoLangApiSignature("go/constant", "MakeInt64", new String[] { "int64" },
				new String[] { "Value" }));
		mapFunc.get("go/constant").add(
				new FuncGoLangApiSignature("go/constant", "Real", new String[] { "Value" }, new String[] { "Value" }));
		mapFunc.get("go/constant").add(new FuncGoLangApiSignature("go/constant", "Int64Val", new String[] { "Value" },
				new String[] { "int64", " bool" }));
		mapFunc.get("go/constant").add(new FuncGoLangApiSignature("go/constant", "MakeFromBytes",
				new String[] { "[]uint8" }, new String[] { "Value" }));
		mapConst.get("go/constant").add(new ConstGoLangApiSignature("go/constant", "Bool", " 1", null));
		mapFunc.get("go/constant").add(new FuncGoLangApiSignature("go/constant", "Bytes", new String[] { "Value" },
				new String[] { "[]uint8" }));
		mapFunc.get("go/constant").add(new FuncGoLangApiSignature("go/constant", "UnaryOp",
				new String[] { "token.Token", " Value", " uint" }, new String[] { "Value" }));
		mapFunc.get("go/constant").add(new FuncGoLangApiSignature("go/constant", "MakeBool", new String[] { "bool" },
				new String[] { "Value" }));
		mapConst.get("go/constant").add(new ConstGoLangApiSignature("go/constant", "Unknown", null, "Kind"));
		mapConst.get("go/constant").add(new ConstGoLangApiSignature("go/constant", "Unknown", " 0", null));
		mapType.get("go/constant").add(new TypeGoLangApiSignature("go/constant", "Kind int"));
		mapFunc.get("go/constant").add(new FuncGoLangApiSignature("go/constant", "MakeUnknown", new String[] { "" },
				new String[] { "Value" }));
		mapFunc.get("go/constant").add(new FuncGoLangApiSignature("go/constant", "Compare",
				new String[] { "Value", " token.Token", " Value" }, new String[] { "bool" }));
		mapFunc.get("go/constant").add(
				new FuncGoLangApiSignature("go/constant", "Denom", new String[] { "Value" }, new String[] { "Value" }));
		mapFunc.get("go/constant").add(new FuncGoLangApiSignature("go/constant", "MakeFromLiteral",
				new String[] { "string", " token.Token", " uint" }, new String[] { "Value" }));
		mapFunc.get("go/constant").add(new FuncGoLangApiSignature("go/constant", "Shift",
				new String[] { "Value", " token.Token", " uint" }, new String[] { "Value" }));
		mapConst.get("go/constant").add(new ConstGoLangApiSignature("go/constant", "Bool", null, "Kind"));
		mapType.get("go/constant").add(new TypeGoLangApiSignature("go/constant", "Value interface, String() string"));
		mapConst.get("go/constant").add(new ConstGoLangApiSignature("go/constant", "Int", null, "Kind"));
		mapConst.get("go/constant").add(new ConstGoLangApiSignature("go/constant", "Complex", " 5", null));
		mapConst.get("go/constant").add(new ConstGoLangApiSignature("go/constant", "String", null, "Kind"));
		mapFunc.get("go/constant").add(new FuncGoLangApiSignature("go/constant", "BoolVal", new String[] { "Value" },
				new String[] { "bool" }));
		mapFunc.get("go/constant").add(new FuncGoLangApiSignature("go/constant", "Float32Val", new String[] { "Value" },
				new String[] { "float32", " bool" }));
		mapFunc.get("go/constant").add(new FuncGoLangApiSignature("go/constant", "MakeFloat64",
				new String[] { "float64" }, new String[] { "Value" }));
		mapFunc.get("go/constant").add(new FuncGoLangApiSignature("go/constant", "Uint64Val", new String[] { "Value" },
				new String[] { "uint64", " bool" }));
		mapConst.get("go/constant").add(new ConstGoLangApiSignature("go/constant", "Float", " 4", null));
		mapFunc.get("go/constant").add(
				new FuncGoLangApiSignature("go/constant", "Num", new String[] { "Value" }, new String[] { "Value" }));
		mapFunc.get("go/constant").add(new FuncGoLangApiSignature("go/constant", "StringVal", new String[] { "Value" },
				new String[] { "string" }));
		mapFunc.get("go/constant").add(new FuncGoLangApiSignature("go/constant", "BinaryOp",
				new String[] { "Value", " token.Token", " Value" }, new String[] { "Value" }));
		mapType.get("go/constant")
				.add(new TypeGoLangApiSignature("go/constant", "Value interface, unexported methods"));
		mapConst.get("go/constant").add(new ConstGoLangApiSignature("go/constant", "Float", null, "Kind"));
		mapFunc.get("go/constant").add(new FuncGoLangApiSignature("go/constant", "Float64Val", new String[] { "Value" },
				new String[] { "float64", " bool" }));
		mapConst.get("go/constant").add(new ConstGoLangApiSignature("go/constant", "String", " 2", null));
		mapConst.get("go/constant").add(new ConstGoLangApiSignature("go/constant", "Int", " 3", null));
		mapFunc.get("go/constant").add(new FuncGoLangApiSignature("go/constant", "MakeImag", new String[] { "Value" },
				new String[] { "Value" }));
		mapFunc.get("go/constant").add(
				new FuncGoLangApiSignature("go/constant", "BitLen", new String[] { "Value" }, new String[] { "int" }));
		mapFunc.get("go/constant").add(
				new FuncGoLangApiSignature("go/constant", "Sign", new String[] { "Value" }, new String[] { "int" }));
		mapFunc.get("go/constant").add(
				new FuncGoLangApiSignature("go/constant", "Imag", new String[] { "Value" }, new String[] { "Value" }));
		mapFunc.get("go/constant").add(new FuncGoLangApiSignature("go/constant", "MakeString",
				new String[] { "string" }, new String[] { "Value" }));
		mapType.get("go/constant").add(new TypeGoLangApiSignature("go/constant", "Value interface, Kind() Kind"));

		pkgs.add("syscall (linux-amd64)");
		mapConst.putIfAbsent("syscall (linux-amd64)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (linux-amd64)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (linux-amd64)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (linux-amd64)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (linux-amd64)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (linux-amd64)")
				.add(new TypeGoLangApiSignature("syscall (linux-amd64)", "SysProcAttr struct, Pgid int"));
		mapType.get("syscall (linux-amd64)")
				.add(new TypeGoLangApiSignature("syscall (linux-amd64)", "SysProcAttr struct, Foreground bool"));
		mapType.get("syscall (linux-amd64)").add(new TypeGoLangApiSignature("syscall (linux-amd64)",
				"SysProcAttr struct, GidMappingsEnableSetgroups bool"));

	}

}