package it.unive.golisa.golang.util;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import it.unive.golisa.golang.api.signature.ConstGoLangApiSignature;
import it.unive.golisa.golang.api.signature.FuncGoLangApiSignature;
import it.unive.golisa.golang.api.signature.MethodGoLangApiSignature;
import it.unive.golisa.golang.api.signature.TypeGoLangApiSignature;
import it.unive.golisa.golang.api.signature.VarGoLangApiSignature;

/**
 * Auto-generated by GoLiSA build
 */
public class Go1_6 {
	private final Map<String, Set<ConstGoLangApiSignature>> mapConst;
	private final Map<String, Set<FuncGoLangApiSignature>> mapFunc;
	private final Map<String, Set<MethodGoLangApiSignature>> mapMethod;
	private final Map<String, Set<TypeGoLangApiSignature>> mapType;
	private final Map<String, Set<VarGoLangApiSignature>> mapVar;
	private final Set<String> pkgs;

	public Go1_6() {
		pkgs = new HashSet<>();
		mapConst = new HashMap<String, Set<ConstGoLangApiSignature>>();
		mapFunc = new HashMap<String, Set<FuncGoLangApiSignature>>();
		mapMethod = new HashMap<String, Set<MethodGoLangApiSignature>>();
		mapType = new HashMap<String, Set<TypeGoLangApiSignature>>();
		mapVar = new HashMap<String, Set<VarGoLangApiSignature>>();

		build();
	}

	public Set<String> getPackages() {
		return pkgs;
	}

	public Map<String, Set<ConstGoLangApiSignature>> getMapConst() {
		return mapConst;
	}

	public Map<String, Set<FuncGoLangApiSignature>> getMapFunc() {
		return mapFunc;
	}

	public Map<String, Set<MethodGoLangApiSignature>> getMapMethod() {
		return mapMethod;
	}

	public Map<String, Set<TypeGoLangApiSignature>> getMapType() {
		return mapType;
	}

	public Map<String, Set<VarGoLangApiSignature>> getMapVar() {
		return mapVar;
	}

	private void build() {
		build0();
	}

	private void build0() {
		pkgs.add("crypto/tls");
		mapConst.putIfAbsent("crypto/tls", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("crypto/tls", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("crypto/tls", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("crypto/tls", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("crypto/tls", new HashSet<VarGoLangApiSignature>());

		mapConst.get("crypto/tls")
				.add(new ConstGoLangApiSignature("crypto/tls", "TLS_RSA_WITH_AES_128_GCM_SHA256", " 156", null));
		mapConst.get("crypto/tls")
				.add(new ConstGoLangApiSignature("crypto/tls", "TLS_RSA_WITH_AES_256_GCM_SHA384", null, "uint16"));
		mapMethod.get("crypto/tls").add(new MethodGoLangApiSignature("crypto/tls", "RecordHeaderError", "Error",
				new String[] { "" }, new String[] { "string" }));
		mapType.get("crypto/tls")
				.add(new TypeGoLangApiSignature("crypto/tls", "RecordHeaderError struct, RecordHeader [5]uint8"));
		mapType.get("crypto/tls").add(new TypeGoLangApiSignature("crypto/tls", "RecordHeaderError struct, Msg string"));
		mapConst.get("crypto/tls")
				.add(new ConstGoLangApiSignature("crypto/tls", "TLS_RSA_WITH_AES_256_GCM_SHA384", " 157", null));
		mapConst.get("crypto/tls")
				.add(new ConstGoLangApiSignature("crypto/tls", "TLS_RSA_WITH_AES_128_GCM_SHA256", null, "uint16"));
		mapType.get("crypto/tls").add(new TypeGoLangApiSignature("crypto/tls", "RecordHeaderError struct"));

		pkgs.add("regexp");
		mapConst.putIfAbsent("regexp", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("regexp", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("regexp", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("regexp", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("regexp", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("regexp").add(new MethodGoLangApiSignature("regexp", "*Regexp", "Copy", new String[] { "" },
				new String[] { "*Regexp" }));

		pkgs.add("bufio");
		mapConst.putIfAbsent("bufio", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("bufio", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("bufio", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("bufio", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("bufio", new HashSet<VarGoLangApiSignature>());

		mapVar.get("bufio").add(new VarGoLangApiSignature("bufio", "ErrFinalToken", "error"));
		mapMethod.get("bufio").add(new MethodGoLangApiSignature("bufio", "*Scanner", "Buffer",
				new String[] { "[]uint8", " int" }, new String[] { "" }));

		pkgs.add("math/rand");
		mapConst.putIfAbsent("math/rand", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("math/rand", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("math/rand", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("math/rand", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("math/rand", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("math/rand").add(new MethodGoLangApiSignature("math/rand", "*Rand", "Read",
				new String[] { "[]uint8" }, new String[] { "int", " error" }));
		mapFunc.get("math/rand").add(new FuncGoLangApiSignature("math/rand", "Read", new String[] { "[]uint8" },
				new String[] { "int", " error" }));

		pkgs.add("os/exec");
		mapConst.putIfAbsent("os/exec", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("os/exec", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("os/exec", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("os/exec", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("os/exec", new HashSet<VarGoLangApiSignature>());

		mapType.get("os/exec").add(new TypeGoLangApiSignature("os/exec", "ExitError struct, Stderr []uint8"));

		pkgs.add("net/http/httptest");
		mapConst.putIfAbsent("net/http/httptest", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net/http/httptest", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net/http/httptest", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net/http/httptest", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net/http/httptest", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("net/http/httptest").add(new MethodGoLangApiSignature("net/http/httptest", "*ResponseRecorder",
				"WriteString", new String[] { "string" }, new String[] { "int", " error" }));

		pkgs.add("crypto/x509");
		mapConst.putIfAbsent("crypto/x509", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("crypto/x509", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("crypto/x509", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("crypto/x509", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("crypto/x509", new HashSet<VarGoLangApiSignature>());

		mapType.get("crypto/x509").add(new TypeGoLangApiSignature("crypto/x509", "InsecureAlgorithmError int"));
		mapMethod.get("crypto/x509").add(new MethodGoLangApiSignature("crypto/x509", "InsecureAlgorithmError", "Error",
				new String[] { "" }, new String[] { "string" }));
		mapMethod.get("crypto/x509").add(new MethodGoLangApiSignature("crypto/x509", "SignatureAlgorithm", "String",
				new String[] { "" }, new String[] { "string" }));

		pkgs.add("net");
		mapConst.putIfAbsent("net", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net", new HashSet<VarGoLangApiSignature>());

		mapType.get("net").add(new TypeGoLangApiSignature("net", "Dialer struct, Cancel <-chan struct"));
		mapType.get("net").add(new TypeGoLangApiSignature("net", "DNSError struct, IsTemporary bool"));

		pkgs.add("runtime/debug");
		mapConst.putIfAbsent("runtime/debug", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("runtime/debug", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("runtime/debug", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("runtime/debug", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("runtime/debug", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("runtime/debug").add(new FuncGoLangApiSignature("runtime/debug", "SetTraceback",
				new String[] { "string" }, new String[] { "" }));

		pkgs.add("debug/dwarf");
		mapConst.putIfAbsent("debug/dwarf", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("debug/dwarf", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("debug/dwarf", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("debug/dwarf", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("debug/dwarf", new HashSet<VarGoLangApiSignature>());

		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassUnknown", " 0", null));
		mapConst.get("debug/dwarf").add(new ConstGoLangApiSignature("debug/dwarf", "ClassUnknown", null, "Class"));

		pkgs.add("image");
		mapConst.putIfAbsent("image", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("image", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("image", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("image", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("image", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*NYCbCrA", "Bounds", new String[] { "" },
				new String[] { "Rectangle" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*NYCbCrA", "ColorModel", new String[] { "" },
				new String[] { "color.Model" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*NYCbCrA", "AOffset",
				new String[] { "int", " int" }, new String[] { "int" }));
		mapFunc.get("image").add(new FuncGoLangApiSignature("image", "NewNYCbCrA",
				new String[] { "Rectangle", " YCbCrSubsampleRatio" }, new String[] { "*NYCbCrA" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*NYCbCrA", "YCbCrAt",
				new String[] { "int", " int" }, new String[] { "color.YCbCr" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*NYCbCrA", "Opaque", new String[] { "" },
				new String[] { "bool" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*NYCbCrA", "NYCbCrAAt",
				new String[] { "int", " int" }, new String[] { "color.NYCbCrA" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*NYCbCrA", "At",
				new String[] { "int", " int" }, new String[] { "color.Color" }));
		mapType.get("image").add(new TypeGoLangApiSignature("image", "NYCbCrA struct"));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*NYCbCrA", "COffset",
				new String[] { "int", " int" }, new String[] { "int" }));
		mapType.get("image").add(new TypeGoLangApiSignature("image", "NYCbCrA struct, A []uint8"));
		mapType.get("image").add(new TypeGoLangApiSignature("image", "NYCbCrA struct, AStride int"));
		mapType.get("image").add(new TypeGoLangApiSignature("image", "NYCbCrA struct, embedded YCbCr"));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*NYCbCrA", "SubImage",
				new String[] { "Rectangle" }, new String[] { "Image" }));
		mapMethod.get("image").add(new MethodGoLangApiSignature("image", "*NYCbCrA", "YOffset",
				new String[] { "int", " int" }, new String[] { "int" }));

		pkgs.add("net/http/httputil");
		mapConst.putIfAbsent("net/http/httputil", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net/http/httputil", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net/http/httputil", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net/http/httputil", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net/http/httputil", new HashSet<VarGoLangApiSignature>());

		mapType.get("net/http/httputil")
				.add(new TypeGoLangApiSignature("net/http/httputil", "BufferPool interface, Put([]uint8)"));
		mapType.get("net/http/httputil")
				.add(new TypeGoLangApiSignature("net/http/httputil", "BufferPool interface, Get() []uint8"));
		mapType.get("net/http/httputil")
				.add(new TypeGoLangApiSignature("net/http/httputil", "ReverseProxy struct, BufferPool BufferPool"));
		mapType.get("net/http/httputil")
				.add(new TypeGoLangApiSignature("net/http/httputil", "BufferPool interface { Get, Put }"));

		pkgs.add("image/color");
		mapConst.putIfAbsent("image/color", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("image/color", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("image/color", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("image/color", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("image/color", new HashSet<VarGoLangApiSignature>());

		mapType.get("image/color").add(new TypeGoLangApiSignature("image/color", "NYCbCrA struct, A uint8"));
		mapType.get("image/color").add(new TypeGoLangApiSignature("image/color", "NYCbCrA struct"));
		mapVar.get("image/color").add(new VarGoLangApiSignature("image/color", "NYCbCrAModel", "Model"));
		mapType.get("image/color").add(new TypeGoLangApiSignature("image/color", "NYCbCrA struct, embedded YCbCr"));
		mapMethod.get("image/color").add(new MethodGoLangApiSignature("image/color", "NYCbCrA", "RGBA",
				new String[] { "" }, new String[] { "uint32", " uint32", " uint32", " uint32" }));

		pkgs.add("math/big");
		mapConst.putIfAbsent("math/big", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("math/big", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("math/big", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("math/big", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("math/big", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Int", "Append",
				new String[] { "[]uint8", " int" }, new String[] { "[]uint8" }));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "MarshalText",
				new String[] { "" }, new String[] { "[]uint8", " error" }));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "UnmarshalText",
				new String[] { "[]uint8" }, new String[] { "error" }));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Int", "Text", new String[] { "int" },
				new String[] { "string" }));

		pkgs.add("text/template");
		mapConst.putIfAbsent("text/template", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("text/template", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("text/template", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("text/template", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("text/template", new HashSet<VarGoLangApiSignature>());

		mapType.get("text/template").add(new TypeGoLangApiSignature("text/template", "ExecError struct, Err error"));
		mapType.get("text/template").add(new TypeGoLangApiSignature("text/template", "ExecError struct, Name string"));
		mapType.get("text/template").add(new TypeGoLangApiSignature("text/template", "ExecError struct"));
		mapFunc.get("text/template").add(new FuncGoLangApiSignature("text/template", "IsTrue",
				new String[] { "interface{}" }, new String[] { "bool", " bool" }));
		mapMethod.get("text/template").add(new MethodGoLangApiSignature("text/template", "ExecError", "Error",
				new String[] { "" }, new String[] { "string" }));

		pkgs.add("archive/zip");
		mapConst.putIfAbsent("archive/zip", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("archive/zip", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("archive/zip", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("archive/zip", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("archive/zip", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("archive/zip").add(new MethodGoLangApiSignature("archive/zip", "*Writer", "RegisterCompressor",
				new String[] { "uint16", " Compressor" }, new String[] { "" }));
		mapMethod.get("archive/zip").add(new MethodGoLangApiSignature("archive/zip", "*ReadCloser",
				"RegisterDecompressor", new String[] { "uint16", " Decompressor" }, new String[] { "" }));
		mapMethod.get("archive/zip").add(new MethodGoLangApiSignature("archive/zip", "*Reader", "RegisterDecompressor",
				new String[] { "uint16", " Decompressor" }, new String[] { "" }));

		pkgs.add("go/types");
		mapConst.putIfAbsent("go/types", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("go/types", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("go/types", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("go/types", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("go/types", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*Package", "SetName",
				new String[] { "string" }, new String[] { "" }));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types", "ImportMode int"));
		mapType.get("go/types").add(
				new TypeGoLangApiSignature("go/types", "ImporterFrom interface, Import(string) (*Package, error)"));
		mapType.get("go/types").add(new TypeGoLangApiSignature("go/types",
				"ImporterFrom interface, ImportFrom(string, string, ImportMode) (*Package, error)"));
		mapType.get("go/types")
				.add(new TypeGoLangApiSignature("go/types", "ImporterFrom interface { Import, ImportFrom }"));

		pkgs.add("encoding/asn1");
		mapConst.putIfAbsent("encoding/asn1", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("encoding/asn1", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("encoding/asn1", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("encoding/asn1", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("encoding/asn1", new HashSet<VarGoLangApiSignature>());

		mapConst.get("encoding/asn1").add(new ConstGoLangApiSignature("encoding/asn1", "TagT61String", " 20", null));
		mapConst.get("encoding/asn1").add(new ConstGoLangApiSignature("encoding/asn1", "ClassApplication", " 1", null));
		mapConst.get("encoding/asn1").add(new ConstGoLangApiSignature("encoding/asn1", "TagUTF8String", " 12", null));
		mapConst.get("encoding/asn1")
				.add(new ConstGoLangApiSignature("encoding/asn1", "ClassPrivate", null, "ideal-int"));
		mapConst.get("encoding/asn1")
				.add(new ConstGoLangApiSignature("encoding/asn1", "TagBitString", null, "ideal-int"));
		mapConst.get("encoding/asn1")
				.add(new ConstGoLangApiSignature("encoding/asn1", "TagOctetString", null, "ideal-int"));
		mapConst.get("encoding/asn1")
				.add(new ConstGoLangApiSignature("encoding/asn1", "TagUTF8String", null, "ideal-int"));
		mapConst.get("encoding/asn1")
				.add(new ConstGoLangApiSignature("encoding/asn1", "TagGeneralString", " 27", null));
		mapConst.get("encoding/asn1")
				.add(new ConstGoLangApiSignature("encoding/asn1", "ClassContextSpecific", null, "ideal-int"));
		mapConst.get("encoding/asn1")
				.add(new ConstGoLangApiSignature("encoding/asn1", "TagUTCTime", null, "ideal-int"));
		mapConst.get("encoding/asn1").add(new ConstGoLangApiSignature("encoding/asn1", "TagBoolean", " 1", null));
		mapConst.get("encoding/asn1")
				.add(new ConstGoLangApiSignature("encoding/asn1", "TagInteger", null, "ideal-int"));
		mapConst.get("encoding/asn1")
				.add(new ConstGoLangApiSignature("encoding/asn1", "ClassContextSpecific", " 2", null));
		mapConst.get("encoding/asn1")
				.add(new ConstGoLangApiSignature("encoding/asn1", "TagBoolean", null, "ideal-int"));
		mapConst.get("encoding/asn1").add(new ConstGoLangApiSignature("encoding/asn1", "TagSequence", " 16", null));
		mapConst.get("encoding/asn1")
				.add(new ConstGoLangApiSignature("encoding/asn1", "TagSequence", null, "ideal-int"));
		mapConst.get("encoding/asn1").add(new ConstGoLangApiSignature("encoding/asn1", "TagIA5String", " 22", null));
		mapConst.get("encoding/asn1").add(new ConstGoLangApiSignature("encoding/asn1", "ClassPrivate", " 3", null));
		mapConst.get("encoding/asn1").add(new ConstGoLangApiSignature("encoding/asn1", "TagSet", null, "ideal-int"));
		mapConst.get("encoding/asn1").add(new ConstGoLangApiSignature("encoding/asn1", "TagOctetString", " 4", null));
		mapConst.get("encoding/asn1")
				.add(new ConstGoLangApiSignature("encoding/asn1", "TagPrintableString", " 19", null));
		mapConst.get("encoding/asn1").add(new ConstGoLangApiSignature("encoding/asn1", "TagOID", " 6", null));
		mapConst.get("encoding/asn1").add(new ConstGoLangApiSignature("encoding/asn1", "TagInteger", " 2", null));
		mapConst.get("encoding/asn1")
				.add(new ConstGoLangApiSignature("encoding/asn1", "TagT61String", null, "ideal-int"));
		mapConst.get("encoding/asn1")
				.add(new ConstGoLangApiSignature("encoding/asn1", "TagGeneralizedTime", " 24", null));
		mapConst.get("encoding/asn1").add(new ConstGoLangApiSignature("encoding/asn1", "TagSet", " 17", null));
		mapConst.get("encoding/asn1")
				.add(new ConstGoLangApiSignature("encoding/asn1", "ClassUniversal", null, "ideal-int"));
		mapConst.get("encoding/asn1").add(new ConstGoLangApiSignature("encoding/asn1", "TagEnum", " 10", null));
		mapConst.get("encoding/asn1").add(new ConstGoLangApiSignature("encoding/asn1", "TagUTCTime", " 23", null));
		mapConst.get("encoding/asn1").add(new ConstGoLangApiSignature("encoding/asn1", "TagBitString", " 3", null));
		mapConst.get("encoding/asn1")
				.add(new ConstGoLangApiSignature("encoding/asn1", "TagPrintableString", null, "ideal-int"));
		mapConst.get("encoding/asn1")
				.add(new ConstGoLangApiSignature("encoding/asn1", "ClassApplication", null, "ideal-int"));
		mapConst.get("encoding/asn1").add(new ConstGoLangApiSignature("encoding/asn1", "TagEnum", null, "ideal-int"));
		mapConst.get("encoding/asn1").add(new ConstGoLangApiSignature("encoding/asn1", "TagOID", null, "ideal-int"));
		mapConst.get("encoding/asn1")
				.add(new ConstGoLangApiSignature("encoding/asn1", "TagIA5String", null, "ideal-int"));
		mapConst.get("encoding/asn1").add(new ConstGoLangApiSignature("encoding/asn1", "ClassUniversal", " 0", null));
		mapConst.get("encoding/asn1")
				.add(new ConstGoLangApiSignature("encoding/asn1", "TagGeneralizedTime", null, "ideal-int"));
		mapConst.get("encoding/asn1")
				.add(new ConstGoLangApiSignature("encoding/asn1", "TagGeneralString", null, "ideal-int"));

		pkgs.add("net/http");
		mapConst.putIfAbsent("net/http", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net/http", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net/http", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net/http", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net/http", new HashSet<VarGoLangApiSignature>());

		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "MethodConnect", " \"CONNECT\"", null));
		mapConst.get("net/http")
				.add(new ConstGoLangApiSignature("net/http", "StatusPreconditionRequired", " 428", null));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "MethodTrace", null, "ideal-string"));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "MethodPatch", " \"PATCH\"", null));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "MethodHead", null, "ideal-string"));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "MethodPut", " \"PUT\"", null));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "MethodConnect", null, "ideal-string"));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "MethodHead", " \"HEAD\"", null));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "MethodPost", null, "ideal-string"));
		mapConst.get("net/http")
				.add(new ConstGoLangApiSignature("net/http", "StatusUnavailableForLegalReasons", null, "ideal-int"));
		mapConst.get("net/http")
				.add(new ConstGoLangApiSignature("net/http", "StatusUnavailableForLegalReasons", " 451", null));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "MethodDelete", " \"DELETE\"", null));
		mapType.get("net/http")
				.add(new TypeGoLangApiSignature("net/http", "Transport struct, ExpectContinueTimeout time.Duration"));
		mapType.get("net/http").add(new TypeGoLangApiSignature("net/http",
				"Transport struct, TLSNextProto map[string]func(string, *tls.Conn) RoundTripper"));
		mapConst.get("net/http")
				.add(new ConstGoLangApiSignature("net/http", "StatusTooManyRequests", null, "ideal-int"));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "MethodDelete", null, "ideal-string"));
		mapConst.get("net/http")
				.add(new ConstGoLangApiSignature("net/http", "StatusNetworkAuthenticationRequired", " 511", null));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "MethodGet", " \"GET\"", null));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "MethodPut", null, "ideal-string"));
		mapConst.get("net/http")
				.add(new ConstGoLangApiSignature("net/http", "StatusRequestHeaderFieldsTooLarge", null, "ideal-int"));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "MethodGet", null, "ideal-string"));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "MethodTrace", " \"TRACE\"", null));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "StatusTooManyRequests", " 429", null));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "MethodOptions", " \"OPTIONS\"", null));
		mapConst.get("net/http")
				.add(new ConstGoLangApiSignature("net/http", "StatusRequestHeaderFieldsTooLarge", " 431", null));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "MethodPatch", null, "ideal-string"));
		mapConst.get("net/http")
				.add(new ConstGoLangApiSignature("net/http", "StatusNetworkAuthenticationRequired", null, "ideal-int"));
		mapConst.get("net/http")
				.add(new ConstGoLangApiSignature("net/http", "StatusPreconditionRequired", null, "ideal-int"));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "MethodPost", " \"POST\"", null));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "MethodOptions", null, "ideal-string"));
		mapVar.get("net/http").add(new VarGoLangApiSignature("net/http", "ErrSkipAltProtocol", "error"));

		pkgs.add("database/sql");
		mapConst.putIfAbsent("database/sql", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("database/sql", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("database/sql", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("database/sql", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("database/sql", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("database/sql").add(new MethodGoLangApiSignature("database/sql", "*DB", "SetConnMaxLifetime",
				new String[] { "time.Duration" }, new String[] { "" }));

		pkgs.add("strconv");
		mapConst.putIfAbsent("strconv", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("strconv", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("strconv", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("strconv", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("strconv", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("strconv").add(
				new FuncGoLangApiSignature("strconv", "IsGraphic", new String[] { "int32" }, new String[] { "bool" }));
		mapFunc.get("strconv").add(new FuncGoLangApiSignature("strconv", "AppendQuoteToGraphic",
				new String[] { "[]uint8", " string" }, new String[] { "[]uint8" }));
		mapFunc.get("strconv").add(new FuncGoLangApiSignature("strconv", "QuoteToGraphic", new String[] { "string" },
				new String[] { "string" }));
		mapFunc.get("strconv").add(new FuncGoLangApiSignature("strconv", "AppendQuoteRuneToGraphic",
				new String[] { "[]uint8", " int32" }, new String[] { "[]uint8" }));
		mapFunc.get("strconv").add(new FuncGoLangApiSignature("strconv", "QuoteRuneToGraphic", new String[] { "int32" },
				new String[] { "string" }));

		pkgs.add("go/build");
		mapConst.putIfAbsent("go/build", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("go/build", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("go/build", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("go/build", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("go/build", new HashSet<VarGoLangApiSignature>());

		mapConst.get("go/build").add(new ConstGoLangApiSignature("go/build", "IgnoreVendor", null, "ImportMode"));
		mapConst.get("go/build").add(new ConstGoLangApiSignature("go/build", "IgnoreVendor", " 8", null));
		mapType.get("go/build").add(new TypeGoLangApiSignature("go/build", "Package struct, InvalidGoFiles []string"));

		pkgs.add("debug/elf");
		mapConst.putIfAbsent("debug/elf", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("debug/elf", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("debug/elf", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("debug/elf", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("debug/elf", new HashSet<VarGoLangApiSignature>());

		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "COMPRESS_ZLIB", null, "CompressionType"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_GOT_DISP", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "COMPRESS_LOPROC", " 1879048192", null));
		mapType.get("debug/elf").add(new TypeGoLangApiSignature("debug/elf", "Chdr64 struct, Addralign uint64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_GOT_HI16", " 22", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_SUB", " 24", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_TLS_TPREL_HI16", " 49", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_LO16", " 6", null));
		mapMethod.get("debug/elf").add(new MethodGoLangApiSignature("debug/elf", "R_MIPS", "String",
				new String[] { "" }, new String[] { "string" }));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_SHIFT6", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "COMPRESS_HIOS", " 1879048191", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_TLS_DTPMOD32", null, "R_MIPS"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "COMPRESS_HIPROC", null, "CompressionType"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_PJUMP", " 35", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "COMPRESS_LOPROC", null, "CompressionType"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_CALL_HI16", " 30", null));
		mapType.get("debug/elf").add(new TypeGoLangApiSignature("debug/elf", "Chdr32 struct, Type uint32"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_TLS_TPREL64", " 48", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_GPREL16", " 7", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_16", " 1", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_RELGOT", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_HIGHEST", " 29", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_ADD_IMMEDIATE", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_INSERT_B", " 26", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_PC16", null, "R_MIPS"));
		mapType.get("debug/elf").add(new TypeGoLangApiSignature("debug/elf", "Chdr32 struct, Size uint32"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_CALL_LO16", " 31", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_GOT_OFST", " 21", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_CALL_HI16", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_GOT_OFST", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_DELETE", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_PJUMP", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_NONE", " 0", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_TLS_DTPREL_LO16", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_HIGHER", " 28", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_TLS_DTPREL32", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_GOT16", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_GOT_PAGE", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_INSERT_A", " 25", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_TLS_DTPMOD32", " 38", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_GOT_LO16", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_HIGHER", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_REL16", " 33", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_GOT_LO16", " 23", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_INSERT_A", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_TLS_DTPREL32", " 39", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_LITERAL", " 8", null));
		mapType.get("debug/elf").add(new TypeGoLangApiSignature("debug/elf", "R_MIPS int"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "COMPRESS_LOOS", null, "CompressionType"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_GOT_PAGE", " 20", null));
		mapMethod.get("debug/elf").add(new MethodGoLangApiSignature("debug/elf", "CompressionType", "String",
				new String[] { "" }, new String[] { "string" }));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_GPREL16", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_HI16", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_16", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_GOT_HI16", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_SUB", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_ADD_IMMEDIATE", " 34", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_TLS_TPREL32", " 47", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "COMPRESS_ZLIB", " 1", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_GOT_DISP", " 19", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_TLS_LDM", " 43", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_NONE", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_26", " 4", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_SHIFT6", " 17", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_TLS_GOTTPREL", " 46", null));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_TLS_DTPREL_HI16", null, "R_MIPS"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_TLS_TPREL_LO16", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_GOT16", " 9", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_TLS_DTPREL_LO16", " 45", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_PC16", " 10", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_CALL_LO16", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_CALL16", " 11", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_HIGHEST", null, "R_MIPS"));
		mapMethod.get("debug/elf").add(new MethodGoLangApiSignature("debug/elf", "CompressionType", "GoString",
				new String[] { "" }, new String[] { "string" }));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_TLS_GD", " 42", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_TLS_DTPMOD64", " 40", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_64", " 18", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_INSERT_B", null, "R_MIPS"));
		mapType.get("debug/elf").add(new TypeGoLangApiSignature("debug/elf", "Chdr64 struct"));
		mapType.get("debug/elf").add(new TypeGoLangApiSignature("debug/elf", "CompressionType int"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_GPREL32", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "COMPRESS_LOOS", " 1610612736", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_TLS_DTPREL64", " 41", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_TLS_TPREL32", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_REL16", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_TLS_GOTTPREL", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_LITERAL", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_HI16", " 5", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_REL32", " 3", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_32", null, "R_MIPS"));
		mapType.get("debug/elf").add(new TypeGoLangApiSignature("debug/elf", "Chdr64 struct, Size uint64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_DELETE", " 27", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_SCN_DISP", null, "R_MIPS"));
		mapMethod.get("debug/elf").add(new MethodGoLangApiSignature("debug/elf", "R_MIPS", "GoString",
				new String[] { "" }, new String[] { "string" }));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "COMPRESS_HIOS", null, "CompressionType"));
		mapType.get("debug/elf").add(new TypeGoLangApiSignature("debug/elf", "Chdr32 struct, Addralign uint32"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_TLS_TPREL64", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_26", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_GPREL32", " 12", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_SHIFT5", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_TLS_LDM", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_LO16", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "SHF_COMPRESSED", null, "SectionFlag"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_JALR", null, "R_MIPS"));
		mapType.get("debug/elf").add(new TypeGoLangApiSignature("debug/elf", "Chdr64 struct, Type uint32"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_CALL16", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "SHF_COMPRESSED", " 2048", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_64", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_SHIFT5", " 16", null));
		mapType.get("debug/elf").add(new TypeGoLangApiSignature("debug/elf", "Chdr32 struct"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_SCN_DISP", " 32", null));
		mapType.get("debug/elf").add(new TypeGoLangApiSignature("debug/elf", "SectionHeader struct, FileSize uint64"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_JALR", " 37", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "COMPRESS_HIPROC", " 2147483647", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_RELGOT", " 36", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_TLS_TPREL_LO16", " 50", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_TLS_DTPREL_HI16", " 44", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_TLS_DTPREL64", null, "R_MIPS"));
		mapConst.get("debug/elf")
				.add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_TLS_TPREL_HI16", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_TLS_GD", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_REL32", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_TLS_DTPMOD64", null, "R_MIPS"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_MIPS_32", " 2", null));

		pkgs.add("net/url");
		mapConst.putIfAbsent("net/url", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net/url", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net/url", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net/url", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net/url", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("net/url").add(new MethodGoLangApiSignature("net/url", "InvalidHostError", "Error",
				new String[] { "" }, new String[] { "string" }));
		mapType.get("net/url").add(new TypeGoLangApiSignature("net/url", "InvalidHostError string"));
		mapMethod.get("net/url").add(new MethodGoLangApiSignature("net/url", "*Error", "Timeout", new String[] { "" },
				new String[] { "bool" }));
		mapMethod.get("net/url").add(new MethodGoLangApiSignature("net/url", "*Error", "Temporary", new String[] { "" },
				new String[] { "bool" }));

		pkgs.add("html/template");
		mapConst.putIfAbsent("html/template", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("html/template", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("html/template", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("html/template", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("html/template", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("html/template").add(new FuncGoLangApiSignature("html/template", "IsTrue",
				new String[] { "interface{}" }, new String[] { "bool", " bool" }));
		mapMethod.get("html/template").add(new MethodGoLangApiSignature("html/template", "*Template",
				"DefinedTemplates", new String[] { "" }, new String[] { "string" }));

		pkgs.add("go/constant");
		mapConst.putIfAbsent("go/constant", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("go/constant", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("go/constant", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("go/constant", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("go/constant", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("go/constant").add(
				new FuncGoLangApiSignature("go/constant", "ToInt", new String[] { "Value" }, new String[] { "Value" }));
		mapFunc.get("go/constant").add(new FuncGoLangApiSignature("go/constant", "ToFloat", new String[] { "Value" },
				new String[] { "Value" }));
		mapType.get("go/constant")
				.add(new TypeGoLangApiSignature("go/constant", "Value interface, ExactString() string"));
		mapFunc.get("go/constant").add(new FuncGoLangApiSignature("go/constant", "ToComplex", new String[] { "Value" },
				new String[] { "Value" }));

	}

}