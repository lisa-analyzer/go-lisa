package it.unive.golisa.golang.util;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import it.unive.golisa.golang.api.signature.ConstGoLangApiSignature;
import it.unive.golisa.golang.api.signature.FuncGoLangApiSignature;
import it.unive.golisa.golang.api.signature.MethodGoLangApiSignature;
import it.unive.golisa.golang.api.signature.TypeGoLangApiSignature;
import it.unive.golisa.golang.api.signature.VarGoLangApiSignature;

/**
 * Auto-generated by GoLiSA build
 */
public class Go1_7 {
	private final Map<String, Set<ConstGoLangApiSignature>> mapConst;
	private final Map<String, Set<FuncGoLangApiSignature>> mapFunc;
	private final Map<String, Set<MethodGoLangApiSignature>> mapMethod;
	private final Map<String, Set<TypeGoLangApiSignature>> mapType;
	private final Map<String, Set<VarGoLangApiSignature>> mapVar;
	private final Set<String> pkgs;

	public Go1_7() {
		pkgs = new HashSet<>();
		mapConst = new HashMap<String, Set<ConstGoLangApiSignature>>();
		mapFunc = new HashMap<String, Set<FuncGoLangApiSignature>>();
		mapMethod = new HashMap<String, Set<MethodGoLangApiSignature>>();
		mapType = new HashMap<String, Set<TypeGoLangApiSignature>>();
		mapVar = new HashMap<String, Set<VarGoLangApiSignature>>();

		build();
	}

	public Set<String> getPackages() {
		return pkgs;
	}

	public Map<String, Set<ConstGoLangApiSignature>> getMapConst() {
		return mapConst;
	}

	public Map<String, Set<FuncGoLangApiSignature>> getMapFunc() {
		return mapFunc;
	}

	public Map<String, Set<MethodGoLangApiSignature>> getMapMethod() {
		return mapMethod;
	}

	public Map<String, Set<TypeGoLangApiSignature>> getMapType() {
		return mapType;
	}

	public Map<String, Set<VarGoLangApiSignature>> getMapVar() {
		return mapVar;
	}

	private void build() {
		build0();
	}

	private void build0() {
		pkgs.add("crypto/tls");
		mapConst.putIfAbsent("crypto/tls", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("crypto/tls", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("crypto/tls", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("crypto/tls", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("crypto/tls", new HashSet<VarGoLangApiSignature>());

		mapConst.get("crypto/tls")
				.add(new ConstGoLangApiSignature("crypto/tls", "RenegotiateOnceAsClient", " 1", null));
		mapType.get("crypto/tls")
				.add(new TypeGoLangApiSignature("crypto/tls", "Config struct, Renegotiation RenegotiationSupport"));
		mapType.get("crypto/tls").add(new TypeGoLangApiSignature("crypto/tls", "RenegotiationSupport int"));
		mapConst.get("crypto/tls").add(new ConstGoLangApiSignature("crypto/tls", "RenegotiateNever", " 0", null));
		mapConst.get("crypto/tls")
				.add(new ConstGoLangApiSignature("crypto/tls", "RenegotiateNever", null, "RenegotiationSupport"));
		mapConst.get("crypto/tls").add(
				new ConstGoLangApiSignature("crypto/tls", "RenegotiateFreelyAsClient", null, "RenegotiationSupport"));
		mapType.get("crypto/tls")
				.add(new TypeGoLangApiSignature("crypto/tls", "Config struct, DynamicRecordSizingDisabled bool"));
		mapConst.get("crypto/tls")
				.add(new ConstGoLangApiSignature("crypto/tls", "RenegotiateFreelyAsClient", " 2", null));
		mapConst.get("crypto/tls").add(
				new ConstGoLangApiSignature("crypto/tls", "RenegotiateOnceAsClient", null, "RenegotiationSupport"));

		pkgs.add("syscall (linux-amd64-cgo)");
		mapConst.putIfAbsent("syscall (linux-amd64-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (linux-amd64-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (linux-amd64-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (linux-amd64-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (linux-amd64-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (linux-amd64-cgo)").add(
				new TypeGoLangApiSignature("syscall (linux-amd64-cgo)", "SysProcAttr struct, Unshareflags uintptr"));

		pkgs.add("syscall (linux-386)");
		mapConst.putIfAbsent("syscall (linux-386)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (linux-386)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (linux-386)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (linux-386)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (linux-386)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (linux-386)")
				.add(new TypeGoLangApiSignature("syscall (linux-386)", "SysProcAttr struct, Unshareflags uintptr"));

		pkgs.add("os/user");
		mapConst.putIfAbsent("os/user", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("os/user", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("os/user", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("os/user", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("os/user", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("os/user").add(new FuncGoLangApiSignature("os/user", "LookupGroup", new String[] { "string" },
				new String[] { "*Group", " error" }));
		mapMethod.get("os/user").add(new MethodGoLangApiSignature("os/user", "UnknownGroupError", "Error",
				new String[] { "" }, new String[] { "string" }));
		mapType.get("os/user").add(new TypeGoLangApiSignature("os/user", "Group struct, Name string"));
		mapType.get("os/user").add(new TypeGoLangApiSignature("os/user", "UnknownGroupError string"));
		mapMethod.get("os/user").add(new MethodGoLangApiSignature("os/user", "UnknownGroupIdError", "Error",
				new String[] { "" }, new String[] { "string" }));
		mapType.get("os/user").add(new TypeGoLangApiSignature("os/user", "Group struct"));
		mapMethod.get("os/user").add(new MethodGoLangApiSignature("os/user", "*User", "GroupIds", new String[] { "" },
				new String[] { "[]string", " error" }));
		mapType.get("os/user").add(new TypeGoLangApiSignature("os/user", "Group struct, Gid string"));
		mapFunc.get("os/user").add(new FuncGoLangApiSignature("os/user", "LookupGroupId", new String[] { "string" },
				new String[] { "*Group", " error" }));
		mapType.get("os/user").add(new TypeGoLangApiSignature("os/user", "UnknownGroupIdError string"));

		pkgs.add("syscall (linux-arm-cgo)");
		mapConst.putIfAbsent("syscall (linux-arm-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (linux-arm-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (linux-arm-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (linux-arm-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (linux-arm-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (linux-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (linux-arm-cgo)", "SysProcAttr struct, Unshareflags uintptr"));

		pkgs.add("os/exec");
		mapConst.putIfAbsent("os/exec", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("os/exec", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("os/exec", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("os/exec", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("os/exec", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("os/exec").add(new FuncGoLangApiSignature("os/exec", "CommandContext",
				new String[] { "context.Context", " string", " ...string" }, new String[] { "*Cmd" }));

		pkgs.add("compress/flate");
		mapConst.putIfAbsent("compress/flate", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("compress/flate", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("compress/flate", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("compress/flate", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("compress/flate", new HashSet<VarGoLangApiSignature>());

		mapConst.get("compress/flate").add(new ConstGoLangApiSignature("compress/flate", "HuffmanOnly", " -2", null));
		mapConst.get("compress/flate")
				.add(new ConstGoLangApiSignature("compress/flate", "HuffmanOnly", null, "ideal-int"));

		pkgs.add("testing, method (*B) Run(string");
		mapConst.putIfAbsent("testing, method (*B) Run(string", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("testing, method (*B) Run(string", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("testing, method (*B) Run(string", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("testing, method (*B) Run(string", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("testing, method (*B) Run(string", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("testing, method (*B) Run(string").add(new MethodGoLangApiSignature("testing", "*B", "Run",
				new String[] { "string", " func(*B" }, new String[] { ") bool" }));

		pkgs.add("reflect");
		mapConst.putIfAbsent("reflect", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("reflect", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("reflect", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("reflect", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("reflect", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("reflect").add(new FuncGoLangApiSignature("reflect", "StructOf", new String[] { "[]StructField" },
				new String[] { "Type" }));
		mapMethod.get("reflect").add(new MethodGoLangApiSignature("reflect", "StructTag", "Lookup",
				new String[] { "string" }, new String[] { "string", " bool" }));

		pkgs.add("strings");
		mapConst.putIfAbsent("strings", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("strings", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("strings", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("strings", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("strings", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("strings").add(new MethodGoLangApiSignature("strings", "*Reader", "Reset",
				new String[] { "string" }, new String[] { "" }));

		pkgs.add("net/http/httptest");
		mapConst.putIfAbsent("net/http/httptest", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net/http/httptest", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net/http/httptest", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net/http/httptest", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net/http/httptest", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("net/http/httptest").add(new FuncGoLangApiSignature("net/http/httptest", "NewRequest",
				new String[] { "string", " string", " io.Reader" }, new String[] { "*http.Request" }));
		mapMethod.get("net/http/httptest").add(new MethodGoLangApiSignature("net/http/httptest", "*ResponseRecorder",
				"Result", new String[] { "" }, new String[] { "*http.Response" }));

		pkgs.add("net/http/cgi");
		mapConst.putIfAbsent("net/http/cgi", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net/http/cgi", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net/http/cgi", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net/http/cgi", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net/http/cgi", new HashSet<VarGoLangApiSignature>());

		mapType.get("net/http/cgi").add(new TypeGoLangApiSignature("net/http/cgi", "Handler struct, Stderr io.Writer"));

		pkgs.add("context");
		mapConst.putIfAbsent("context", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("context", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("context", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("context", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("context", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("context").add(new FuncGoLangApiSignature("context", "WithTimeout",
				new String[] { "Context", " time.Duration" }, new String[] { "Context", " CancelFunc" }));
		mapVar.get("context").add(new VarGoLangApiSignature("context", "Canceled", "error"));
		mapType.get("context")
				.add(new TypeGoLangApiSignature("context", "Context interface { Deadline, Done, Err, Value }"));
		mapType.get("context")
				.add(new TypeGoLangApiSignature("context", "Context interface, Deadline() (time.Time, bool)"));
		mapFunc.get("context").add(new FuncGoLangApiSignature("context", "WithCancel", new String[] { "Context" },
				new String[] { "Context", " CancelFunc" }));
		mapFunc.get("context").add(
				new FuncGoLangApiSignature("context", "Background", new String[] { "" }, new String[] { "Context" }));
		mapType.get("context").add(new TypeGoLangApiSignature("context", "Context interface, Done() <-chan struct"));
		mapType.get("context").add(new TypeGoLangApiSignature("context", "CancelFunc func()"));
		mapVar.get("context").add(new VarGoLangApiSignature("context", "DeadlineExceeded", "error"));
		mapFunc.get("context")
				.add(new FuncGoLangApiSignature("context", "TODO", new String[] { "" }, new String[] { "Context" }));
		mapFunc.get("context").add(new FuncGoLangApiSignature("context", "WithValue",
				new String[] { "Context", " interface{}", " interface{}" }, new String[] { "Context" }));
		mapFunc.get("context").add(new FuncGoLangApiSignature("context", "WithDeadline",
				new String[] { "Context", " time.Time" }, new String[] { "Context", " CancelFunc" }));
		mapType.get("context")
				.add(new TypeGoLangApiSignature("context", "Context interface, Value(interface{}) interface{}"));
		mapType.get("context").add(new TypeGoLangApiSignature("context", "Context interface, Err() error"));

		pkgs.add("crypto/x509");
		mapConst.putIfAbsent("crypto/x509", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("crypto/x509", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("crypto/x509", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("crypto/x509", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("crypto/x509", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("crypto/x509").add(new FuncGoLangApiSignature("crypto/x509", "SystemCertPool", new String[] { "" },
				new String[] { "*CertPool", " error" }));
		mapType.get("crypto/x509").add(new TypeGoLangApiSignature("crypto/x509", "SystemRootsError struct, Err error"));

		pkgs.add("net");
		mapConst.putIfAbsent("net", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("net").add(new MethodGoLangApiSignature("net", "*Dialer", "DialContext",
				new String[] { "context.Context", " string", " string" }, new String[] { "Conn", " error" }));

		pkgs.add("net/http/httptrace");
		mapConst.putIfAbsent("net/http/httptrace", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net/http/httptrace", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net/http/httptrace", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net/http/httptrace", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net/http/httptrace", new HashSet<VarGoLangApiSignature>());

		mapType.get("net/http/httptrace")
				.add(new TypeGoLangApiSignature("net/http/httptrace", "ClientTrace struct, WroteHeaders func()"));
		mapType.get("net/http/httptrace")
				.add(new TypeGoLangApiSignature("net/http/httptrace", "DNSStartInfo struct, Host string"));
		mapType.get("net/http/httptrace").add(
				new TypeGoLangApiSignature("net/http/httptrace", "ClientTrace struct, DNSStart func(DNSStartInfo)"));
		mapType.get("net/http/httptrace")
				.add(new TypeGoLangApiSignature("net/http/httptrace", "GotConnInfo struct, IdleTime time.Duration"));
		mapFunc.get("net/http/httptrace").add(new FuncGoLangApiSignature("net/http/httptrace", "ContextClientTrace",
				new String[] { "context.Context" }, new String[] { "*ClientTrace" }));
		mapFunc.get("net/http/httptrace").add(new FuncGoLangApiSignature("net/http/httptrace", "WithClientTrace",
				new String[] { "context.Context", " *ClientTrace" }, new String[] { "context.Context" }));
		mapType.get("net/http/httptrace")
				.add(new TypeGoLangApiSignature("net/http/httptrace", "ClientTrace struct, PutIdleConn func(error)"));
		mapType.get("net/http/httptrace").add(new TypeGoLangApiSignature("net/http/httptrace",
				"ClientTrace struct, ConnectStart func(string, string)"));
		mapType.get("net/http/httptrace")
				.add(new TypeGoLangApiSignature("net/http/httptrace", "ClientTrace struct, Got100Continue func()"));
		mapType.get("net/http/httptrace")
				.add(new TypeGoLangApiSignature("net/http/httptrace", "ClientTrace struct, DNSDone func(DNSDoneInfo)"));
		mapType.get("net/http/httptrace").add(new TypeGoLangApiSignature("net/http/httptrace",
				"ClientTrace struct, WroteRequest func(WroteRequestInfo)"));
		mapType.get("net/http/httptrace").add(new TypeGoLangApiSignature("net/http/httptrace", "DNSDoneInfo struct"));
		mapType.get("net/http/httptrace")
				.add(new TypeGoLangApiSignature("net/http/httptrace", "GotConnInfo struct, Reused bool"));
		mapType.get("net/http/httptrace").add(new TypeGoLangApiSignature("net/http/httptrace",
				"ClientTrace struct, ConnectDone func(string, string, error)"));
		mapType.get("net/http/httptrace")
				.add(new TypeGoLangApiSignature("net/http/httptrace", "GotConnInfo struct, Conn net.Conn"));
		mapType.get("net/http/httptrace")
				.add(new TypeGoLangApiSignature("net/http/httptrace", "DNSDoneInfo struct, Addrs []net.IPAddr"));
		mapType.get("net/http/httptrace").add(new TypeGoLangApiSignature("net/http/httptrace", "DNSStartInfo struct"));
		mapType.get("net/http/httptrace")
				.add(new TypeGoLangApiSignature("net/http/httptrace", "WroteRequestInfo struct, Err error"));
		mapType.get("net/http/httptrace")
				.add(new TypeGoLangApiSignature("net/http/httptrace", "ClientTrace struct, GetConn func(string)"));
		mapType.get("net/http/httptrace")
				.add(new TypeGoLangApiSignature("net/http/httptrace", "WroteRequestInfo struct"));
		mapType.get("net/http/httptrace")
				.add(new TypeGoLangApiSignature("net/http/httptrace", "DNSDoneInfo struct, Coalesced bool"));
		mapType.get("net/http/httptrace").add(new TypeGoLangApiSignature("net/http/httptrace", "ClientTrace struct"));
		mapType.get("net/http/httptrace")
				.add(new TypeGoLangApiSignature("net/http/httptrace", "ClientTrace struct, GotConn func(GotConnInfo)"));
		mapType.get("net/http/httptrace")
				.add(new TypeGoLangApiSignature("net/http/httptrace", "GotConnInfo struct, WasIdle bool"));
		mapType.get("net/http/httptrace")
				.add(new TypeGoLangApiSignature("net/http/httptrace", "ClientTrace struct, Wait100Continue func()"));
		mapType.get("net/http/httptrace").add(new TypeGoLangApiSignature("net/http/httptrace", "GotConnInfo struct"));
		mapType.get("net/http/httptrace").add(
				new TypeGoLangApiSignature("net/http/httptrace", "ClientTrace struct, GotFirstResponseByte func()"));
		mapType.get("net/http/httptrace")
				.add(new TypeGoLangApiSignature("net/http/httptrace", "DNSDoneInfo struct, Err error"));

		pkgs.add("debug/dwarf");
		mapConst.putIfAbsent("debug/dwarf", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("debug/dwarf", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("debug/dwarf", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("debug/dwarf", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("debug/dwarf", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("debug/dwarf").add(new MethodGoLangApiSignature("debug/dwarf", "*Data", "Ranges",
				new String[] { "*Entry" }, new String[] { "[][2]uint64", " error" }));
		mapMethod.get("debug/dwarf").add(new MethodGoLangApiSignature("debug/dwarf", "*Reader", "SeekPC",
				new String[] { "uint64" }, new String[] { "*Entry", " error" }));

		pkgs.add("io");
		mapConst.putIfAbsent("io", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("io", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("io", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("io", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("io", new HashSet<VarGoLangApiSignature>());

		mapConst.get("io").add(new ConstGoLangApiSignature("io", "SeekStart", null, "ideal-int"));
		mapConst.get("io").add(new ConstGoLangApiSignature("io", "SeekCurrent", " 1", null));
		mapConst.get("io").add(new ConstGoLangApiSignature("io", "SeekEnd", null, "ideal-int"));
		mapConst.get("io").add(new ConstGoLangApiSignature("io", "SeekCurrent", null, "ideal-int"));
		mapConst.get("io").add(new ConstGoLangApiSignature("io", "SeekEnd", " 2", null));
		mapConst.get("io").add(new ConstGoLangApiSignature("io", "SeekStart", " 0", null));

		pkgs.add("math/big");
		mapConst.putIfAbsent("math/big", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("math/big", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("math/big", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("math/big", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("math/big", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "GobEncode",
				new String[] { "" }, new String[] { "[]uint8", " error" }));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Float", "GobDecode",
				new String[] { "[]uint8" }, new String[] { "error" }));

		pkgs.add("go/doc");
		mapConst.putIfAbsent("go/doc", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("go/doc", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("go/doc", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("go/doc", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("go/doc", new HashSet<VarGoLangApiSignature>());

		mapType.get("go/doc").add(new TypeGoLangApiSignature("go/doc", "Example struct, Unordered bool"));

		pkgs.add("testing, method (*T) Run(string");
		mapConst.putIfAbsent("testing, method (*T) Run(string", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("testing, method (*T) Run(string", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("testing, method (*T) Run(string", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("testing, method (*T) Run(string", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("testing, method (*T) Run(string", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("testing, method (*T) Run(string").add(new MethodGoLangApiSignature("testing", "*T", "Run",
				new String[] { "string", " func(*T" }, new String[] { ") bool" }));

		pkgs.add("testing");
		mapConst.putIfAbsent("testing", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("testing", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("testing", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("testing", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("testing", new HashSet<VarGoLangApiSignature>());

		mapType.get("testing").add(new TypeGoLangApiSignature("testing", "InternalExample struct, Unordered bool"));

		pkgs.add("runtime");
		mapConst.putIfAbsent("runtime", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("runtime", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("runtime", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("runtime", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("runtime", new HashSet<VarGoLangApiSignature>());

		mapType.get("runtime").add(new TypeGoLangApiSignature("runtime", "Frames struct"));
		mapMethod.get("runtime").add(new MethodGoLangApiSignature("runtime", "*Frames", "Next", new String[] { "" },
				new String[] { "Frame", " bool" }));
		mapType.get("runtime").add(new TypeGoLangApiSignature("runtime", "Frame struct, PC uintptr"));
		mapType.get("runtime").add(new TypeGoLangApiSignature("runtime", "Frame struct, Func *Func"));
		mapFunc.get("runtime").add(new FuncGoLangApiSignature("runtime", "CallersFrames", new String[] { "[]uintptr" },
				new String[] { "*Frames" }));
		mapType.get("runtime").add(new TypeGoLangApiSignature("runtime", "Frame struct, Function string"));
		mapFunc.get("runtime").add(new FuncGoLangApiSignature("runtime", "KeepAlive", new String[] { "interface{}" },
				new String[] { "" }));
		mapFunc.get("runtime").add(new FuncGoLangApiSignature("runtime", "SetCgoTraceback",
				new String[] { "int", " unsafe.Pointer", " unsafe.Pointer", " unsafe.Pointer" }, new String[] { "" }));
		mapType.get("runtime").add(new TypeGoLangApiSignature("runtime", "Frame struct"));
		mapType.get("runtime").add(new TypeGoLangApiSignature("runtime", "Frame struct, Line int"));
		mapType.get("runtime").add(new TypeGoLangApiSignature("runtime", "Frame struct, File string"));
		mapType.get("runtime").add(new TypeGoLangApiSignature("runtime", "Frame struct, Entry uintptr"));

		pkgs.add("net/http");
		mapConst.putIfAbsent("net/http", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net/http", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net/http", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net/http", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net/http", new HashSet<VarGoLangApiSignature>());

		mapVar.get("net/http").add(new VarGoLangApiSignature("net/http", "ServerContextKey", "*contextKey"));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "StatusProcessing", " 102", null));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "StatusNotExtended", " 510", null));
		mapType.get("net/http").add(new TypeGoLangApiSignature("net/http", "Transport struct, MaxIdleConns int"));
		mapType.get("net/http").add(new TypeGoLangApiSignature("net/http",
				"Transport struct, DialContext func(context.Context, string, string) (net.Conn, error)"));
		mapMethod.get("net/http").add(new MethodGoLangApiSignature("net/http", "*Request", "Context",
				new String[] { "" }, new String[] { "context.Context" }));
		mapType.get("net/http")
				.add(new TypeGoLangApiSignature("net/http", "Transport struct, IdleConnTimeout time.Duration"));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "StatusFailedDependency", " 424", null));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "StatusLoopDetected", " 508", null));
		mapConst.get("net/http")
				.add(new ConstGoLangApiSignature("net/http", "StatusVariantAlsoNegotiates", null, "ideal-int"));
		mapConst.get("net/http")
				.add(new ConstGoLangApiSignature("net/http", "StatusInsufficientStorage", " 507", null));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "StatusProcessing", null, "ideal-int"));
		mapConst.get("net/http")
				.add(new ConstGoLangApiSignature("net/http", "StatusUnprocessableEntity", " 422", null));
		mapConst.get("net/http")
				.add(new ConstGoLangApiSignature("net/http", "StatusUpgradeRequired", null, "ideal-int"));
		mapMethod.get("net/http").add(new MethodGoLangApiSignature("net/http", "*Request", "WithContext",
				new String[] { "context.Context" }, new String[] { "*Request" }));
		mapVar.get("net/http").add(new VarGoLangApiSignature("net/http", "LocalAddrContextKey", "*contextKey"));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "StatusIMUsed", " 226", null));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "StatusNotExtended", null, "ideal-int"));
		mapConst.get("net/http")
				.add(new ConstGoLangApiSignature("net/http", "StatusVariantAlsoNegotiates", " 506", null));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "StatusLocked", " 423", null));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "StatusMultiStatus", " 207", null));
		mapConst.get("net/http")
				.add(new ConstGoLangApiSignature("net/http", "StatusPermanentRedirect", null, "ideal-int"));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "StatusAlreadyReported", " 208", null));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "StatusIMUsed", null, "ideal-int"));
		mapType.get("net/http").add(new TypeGoLangApiSignature("net/http", "Request struct, Response *Response"));
		mapConst.get("net/http")
				.add(new ConstGoLangApiSignature("net/http", "StatusUnprocessableEntity", null, "ideal-int"));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "StatusPermanentRedirect", " 308", null));
		mapConst.get("net/http")
				.add(new ConstGoLangApiSignature("net/http", "StatusInsufficientStorage", null, "ideal-int"));
		mapConst.get("net/http")
				.add(new ConstGoLangApiSignature("net/http", "StatusFailedDependency", null, "ideal-int"));
		mapType.get("net/http").add(new TypeGoLangApiSignature("net/http", "Response struct, Uncompressed bool"));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "StatusLoopDetected", null, "ideal-int"));
		mapType.get("net/http")
				.add(new TypeGoLangApiSignature("net/http", "Transport struct, MaxResponseHeaderBytes int64"));
		mapVar.get("net/http").add(new VarGoLangApiSignature("net/http", "ErrUseLastResponse", "error"));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "StatusMultiStatus", null, "ideal-int"));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "StatusUpgradeRequired", " 426", null));
		mapConst.get("net/http")
				.add(new ConstGoLangApiSignature("net/http", "StatusAlreadyReported", null, "ideal-int"));
		mapConst.get("net/http").add(new ConstGoLangApiSignature("net/http", "StatusLocked", null, "ideal-int"));

		pkgs.add("syscall (linux-arm)");
		mapConst.putIfAbsent("syscall (linux-arm)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (linux-arm)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (linux-arm)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (linux-arm)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (linux-arm)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (linux-arm)")
				.add(new TypeGoLangApiSignature("syscall (linux-arm)", "SysProcAttr struct, Unshareflags uintptr"));

		pkgs.add("syscall (linux-386-cgo)");
		mapConst.putIfAbsent("syscall (linux-386-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (linux-386-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (linux-386-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (linux-386-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (linux-386-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (linux-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (linux-386-cgo)", "SysProcAttr struct, Unshareflags uintptr"));

		pkgs.add("bytes");
		mapConst.putIfAbsent("bytes", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("bytes", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("bytes", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("bytes", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("bytes", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("bytes").add(new FuncGoLangApiSignature("bytes", "ContainsAny",
				new String[] { "[]uint8", " string" }, new String[] { "bool" }));
		mapMethod.get("bytes").add(new MethodGoLangApiSignature("bytes", "*Reader", "Reset", new String[] { "[]uint8" },
				new String[] { "" }));
		mapFunc.get("bytes").add(new FuncGoLangApiSignature("bytes", "ContainsRune",
				new String[] { "[]uint8", " int32" }, new String[] { "bool" }));

		pkgs.add("unicode");
		mapConst.putIfAbsent("unicode", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("unicode", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("unicode", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("unicode", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("unicode", new HashSet<VarGoLangApiSignature>());

		mapConst.get("unicode").add(new ConstGoLangApiSignature("unicode", "Version", " \"9.0.0\"", null));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Adlam", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Marchen", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Newa", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Sentence_Terminal", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Tangut", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Bhaiksuki", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Osage", "*RangeTable"));
		mapVar.get("unicode").add(new VarGoLangApiSignature("unicode", "Prepended_Concatenation_Mark", "*RangeTable"));

		pkgs.add("encoding/json");
		mapConst.putIfAbsent("encoding/json", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("encoding/json", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("encoding/json", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("encoding/json", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("encoding/json", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("encoding/json").add(new MethodGoLangApiSignature("encoding/json", "*Encoder", "SetEscapeHTML",
				new String[] { "bool" }, new String[] { "" }));
		mapMethod.get("encoding/json").add(new MethodGoLangApiSignature("encoding/json", "*Encoder", "SetIndent",
				new String[] { "string", " string" }, new String[] { "" }));

		pkgs.add("go/build");
		mapConst.putIfAbsent("go/build", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("go/build", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("go/build", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("go/build", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("go/build", new HashSet<VarGoLangApiSignature>());

		mapType.get("go/build").add(new TypeGoLangApiSignature("go/build", "Package struct, BinaryOnly bool"));
		mapType.get("go/build").add(new TypeGoLangApiSignature("go/build", "Package struct, CgoFFLAGS []string"));
		mapType.get("go/build").add(new TypeGoLangApiSignature("go/build", "Package struct, FFiles []string"));

		pkgs.add("debug/elf");
		mapConst.putIfAbsent("debug/elf", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("debug/elf", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("debug/elf", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("debug/elf", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("debug/elf", new HashSet<VarGoLangApiSignature>());

		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_GOTIE32", " 43", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_PLT64", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOT12", " 6", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_PC32DBL", " 19", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOTPLTOFF16", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GLOB_DAT", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_IE32", " 47", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_20", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOTPLTOFF32", " 35", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_COPY", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_GD64", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_DTPMOD", " 54", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_LDM32", " 45", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOTPCDBL", " 21", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOT32", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_PC64", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GLOB_DAT", " 10", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_GOTIE12", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOTPLT64", " 32", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_DTPOFF", " 55", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_LDO32", " 52", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_NONE", " 0", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_TPOFF", " 56", null));
		mapMethod.get("debug/elf").add(new MethodGoLangApiSignature("debug/elf", "R_390", "GoString",
				new String[] { "" }, new String[] { "string" }));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_32", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_PC64", " 23", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_8", " 1", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_PC32DBL", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_16", " 3", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_PC16DBL", " 17", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_PC16DBL", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_IEENT", " 49", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_GOTIE20", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_12", " 2", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOTPLT32", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_8", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOT32", " 7", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_PLT16DBL", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_PC32", " 5", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOT16", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOTPLTOFF16", " 34", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_IE64", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOTOFF16", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOTOFF64", " 28", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOTPLTOFF32", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_RELATIVE", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_LDM64", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOT64", " 24", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_PLT32DBL", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOT12", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_NONE", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOTOFF", " 13", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_JMP_SLOT", " 11", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_GDCALL", " 38", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOTPLT20", null, "R_390"));
		mapType.get("debug/elf").add(new TypeGoLangApiSignature("debug/elf", "R_390 int"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOTPLT20", " 59", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOTPLT12", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_GOTIE64", " 44", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOTPLT16", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_LDO64", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_IE64", " 48", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOTPCDBL", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_GD32", " 40", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOTPC", " 14", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOT20", " 58", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOT20", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOTENT", " 26", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_LE64", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_LDO64", " 53", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_LE64", " 51", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOTPLT12", " 29", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_LDO32", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_20", " 57", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_64", " 22", null));
		mapMethod.get("debug/elf").add(new MethodGoLangApiSignature("debug/elf", "R_390", "String", new String[] { "" },
				new String[] { "string" }));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_64", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_GDCALL", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_DTPMOD", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_IEENT", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_DTPOFF", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_PLT32", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_LDCALL", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_TPOFF", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOTOFF16", " 27", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_GOTIE20", " 60", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOTPLTENT", " 33", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOTPLTOFF64", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_GD32", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_LDM32", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_LOAD", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_LDM64", " 46", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_PC16", " 16", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOTPLT16", " 30", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_GOTIE64", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_GOTIE12", " 42", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_PC16", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_PLT16DBL", " 18", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOT16", " 15", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_RELATIVE", " 12", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_GD64", " 41", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOTENT", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOTOFF", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_JMP_SLOT", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_LE32", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_PLT32", " 8", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_LDCALL", " 39", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOTPLT64", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_GOTIE32", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_LE32", " 50", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_PLT64", " 25", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_16", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_COPY", " 9", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_12", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOTPLTENT", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_IE32", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOTOFF64", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOTPLTOFF64", " 36", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOTPC", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_PC32", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_TLS_LOAD", " 37", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOT64", null, "R_390"));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_GOTPLT32", " 31", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_PLT32DBL", " 20", null));
		mapConst.get("debug/elf").add(new ConstGoLangApiSignature("debug/elf", "R_390_32", " 4", null));

		pkgs.add("net/url");
		mapConst.putIfAbsent("net/url", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net/url", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net/url", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net/url", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net/url", new HashSet<VarGoLangApiSignature>());

		mapType.get("net/url").add(new TypeGoLangApiSignature("net/url", "URL struct, ForceQuery bool"));

		pkgs.add("syscall (linux-amd64)");
		mapConst.putIfAbsent("syscall (linux-amd64)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (linux-amd64)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (linux-amd64)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (linux-amd64)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (linux-amd64)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (linux-amd64)")
				.add(new TypeGoLangApiSignature("syscall (linux-amd64)", "SysProcAttr struct, Unshareflags uintptr"));

	}

}