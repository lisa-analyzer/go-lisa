package it.unive.golisa.golang.util;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import it.unive.golisa.golang.api.signature.ConstGoLangApiSignature;
import it.unive.golisa.golang.api.signature.FuncGoLangApiSignature;
import it.unive.golisa.golang.api.signature.MethodGoLangApiSignature;
import it.unive.golisa.golang.api.signature.TypeGoLangApiSignature;
import it.unive.golisa.golang.api.signature.VarGoLangApiSignature;

/**
 * Auto-generated by GoLiSA build
 */
public class Go1_9 {
	private final Map<String, Set<ConstGoLangApiSignature>> mapConst;
	private final Map<String, Set<FuncGoLangApiSignature>> mapFunc;
	private final Map<String, Set<MethodGoLangApiSignature>> mapMethod;
	private final Map<String, Set<TypeGoLangApiSignature>> mapType;
	private final Map<String, Set<VarGoLangApiSignature>> mapVar;
	private final Set<String> pkgs;

	public Go1_9() {
		pkgs = new HashSet<>();
		mapConst = new HashMap<String, Set<ConstGoLangApiSignature>>();
		mapFunc = new HashMap<String, Set<FuncGoLangApiSignature>>();
		mapMethod = new HashMap<String, Set<MethodGoLangApiSignature>>();
		mapType = new HashMap<String, Set<TypeGoLangApiSignature>>();
		mapVar = new HashMap<String, Set<VarGoLangApiSignature>>();

		build();
	}

	public Set<String> getPackages() {
		return pkgs;
	}

	public Map<String, Set<ConstGoLangApiSignature>> getMapConst() {
		return mapConst;
	}

	public Map<String, Set<FuncGoLangApiSignature>> getMapFunc() {
		return mapFunc;
	}

	public Map<String, Set<MethodGoLangApiSignature>> getMapMethod() {
		return mapMethod;
	}

	public Map<String, Set<TypeGoLangApiSignature>> getMapType() {
		return mapType;
	}

	public Map<String, Set<VarGoLangApiSignature>> getMapVar() {
		return mapVar;
	}

	private void build() {
		build0();
	}

	private void build0() {
		pkgs.add("database/sql/driver");
		mapConst.putIfAbsent("database/sql/driver", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("database/sql/driver", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("database/sql/driver", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("database/sql/driver", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("database/sql/driver", new HashSet<VarGoLangApiSignature>());

		mapType.get("database/sql/driver").add(new TypeGoLangApiSignature("database/sql/driver",
				"NamedValueChecker interface, CheckNamedValue(*NamedValue) error"));
		mapVar.get("database/sql/driver")
				.add(new VarGoLangApiSignature("database/sql/driver", "ErrRemoveArgument", "error"));
		mapType.get("database/sql/driver").add(
				new TypeGoLangApiSignature("database/sql/driver", "NamedValueChecker interface { CheckNamedValue }"));

		pkgs.add("syscall (linux-amd64-cgo)");
		mapConst.putIfAbsent("syscall (linux-amd64-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (linux-amd64-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (linux-amd64-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (linux-amd64-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (linux-amd64-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (linux-amd64-cgo)").add(
				new TypeGoLangApiSignature("syscall (linux-amd64-cgo)", "SysProcAttr struct, AmbientCaps []uintptr"));
		mapType.get("syscall (linux-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (linux-amd64-cgo)", "Credential struct, NoSetGroups bool"));

		pkgs.add("encoding/csv");
		mapConst.putIfAbsent("encoding/csv", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("encoding/csv", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("encoding/csv", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("encoding/csv", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("encoding/csv", new HashSet<VarGoLangApiSignature>());

		mapType.get("encoding/csv").add(new TypeGoLangApiSignature("encoding/csv", "Reader struct, ReuseRecord bool"));

		pkgs.add("syscall (netbsd-amd64-cgo)");
		mapConst.putIfAbsent("syscall (netbsd-amd64-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (netbsd-amd64-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (netbsd-amd64-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (netbsd-amd64-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (netbsd-amd64-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (netbsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (netbsd-amd64-cgo)", "Credential struct, NoSetGroups bool"));

		pkgs.add("mime");
		mapConst.putIfAbsent("mime", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("mime", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("mime", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("mime", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("mime", new HashSet<VarGoLangApiSignature>());

		mapVar.get("mime").add(new VarGoLangApiSignature("mime", "ErrInvalidMediaParameter", "error"));

		pkgs.add("syscall (linux-arm-cgo)");
		mapConst.putIfAbsent("syscall (linux-arm-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (linux-arm-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (linux-arm-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (linux-arm-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (linux-arm-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (linux-arm-cgo)").add(
				new TypeGoLangApiSignature("syscall (linux-arm-cgo)", "SysProcAttr struct, AmbientCaps []uintptr"));
		mapType.get("syscall (linux-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (linux-arm-cgo)", "Credential struct, NoSetGroups bool"));

		pkgs.add("syscall (netbsd-amd64)");
		mapConst.putIfAbsent("syscall (netbsd-amd64)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (netbsd-amd64)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (netbsd-amd64)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (netbsd-amd64)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (netbsd-amd64)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (netbsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (netbsd-amd64)", "Credential struct, NoSetGroups bool"));

		pkgs.add("reflect");
		mapConst.putIfAbsent("reflect", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("reflect", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("reflect", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("reflect", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("reflect", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("reflect").add(new FuncGoLangApiSignature("reflect", "MakeMapWithSize",
				new String[] { "Type", " int" }, new String[] { "Value" }));

		pkgs.add("net/http/httptest");
		mapConst.putIfAbsent("net/http/httptest", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net/http/httptest", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net/http/httptest", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net/http/httptest", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net/http/httptest", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("net/http/httptest").add(new MethodGoLangApiSignature("net/http/httptest", "*Server",
				"Certificate", new String[] { "" }, new String[] { "*x509.Certificate" }));
		mapMethod.get("net/http/httptest").add(new MethodGoLangApiSignature("net/http/httptest", "*Server", "Client",
				new String[] { "" }, new String[] { "*http.Client" }));

		pkgs.add("crypto/x509");
		mapConst.putIfAbsent("crypto/x509", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("crypto/x509", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("crypto/x509", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("crypto/x509", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("crypto/x509", new HashSet<VarGoLangApiSignature>());

		mapType.get("crypto/x509")
				.add(new TypeGoLangApiSignature("crypto/x509", "Certificate struct, ExcludedDNSDomains []string"));

		pkgs.add("net/http/fcgi");
		mapConst.putIfAbsent("net/http/fcgi", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net/http/fcgi", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net/http/fcgi", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net/http/fcgi", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net/http/fcgi", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("net/http/fcgi").add(new FuncGoLangApiSignature("net/http/fcgi", "ProcessEnv",
				new String[] { "*http.Request" }, new String[] { "map[string]string" }));

		pkgs.add("net");
		mapConst.putIfAbsent("net", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("net").add(new MethodGoLangApiSignature("net", "*UDPConn", "SyscallConn", new String[] { "" },
				new String[] { "syscall.RawConn", " error" }));
		mapMethod.get("net").add(new MethodGoLangApiSignature("net", "*IPConn", "SyscallConn", new String[] { "" },
				new String[] { "syscall.RawConn", " error" }));
		mapMethod.get("net").add(new MethodGoLangApiSignature("net", "*TCPConn", "SyscallConn", new String[] { "" },
				new String[] { "syscall.RawConn", " error" }));
		mapType.get("net").add(new TypeGoLangApiSignature("net",
				"Resolver struct, Dial func(context.Context, string, string) (Conn, error)"));
		mapType.get("net").add(new TypeGoLangApiSignature("net", "Resolver struct, StrictErrors bool"));
		mapMethod.get("net").add(new MethodGoLangApiSignature("net", "*UnixConn", "SyscallConn", new String[] { "" },
				new String[] { "syscall.RawConn", " error" }));

		pkgs.add("syscall (windows-386)");
		mapConst.putIfAbsent("syscall (windows-386)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (windows-386)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (windows-386)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (windows-386)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (windows-386)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "WSAECONNABORTED", " 10053", null));
		mapConst.get("syscall (windows-386)")
				.add(new ConstGoLangApiSignature("syscall (windows-386)", "WSAECONNABORTED", null, "Errno"));

		pkgs.add("math/big");
		mapConst.putIfAbsent("math/big", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("math/big", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("math/big", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("math/big", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("math/big", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Int", "IsInt64", new String[] { "" },
				new String[] { "bool" }));
		mapType.get("math/big").add(new TypeGoLangApiSignature("math/big", "Word uint"));
		mapMethod.get("math/big").add(new MethodGoLangApiSignature("math/big", "*Int", "IsUint64", new String[] { "" },
				new String[] { "bool" }));

		pkgs.add("testing");
		mapConst.putIfAbsent("testing", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("testing", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("testing", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("testing", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("testing", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("testing")
				.add(new MethodGoLangApiSignature("testing", "*T", "Helper", new String[] { "" }, new String[] { "" }));
		mapType.get("testing").add(new TypeGoLangApiSignature("testing", "TB interface, Helper()"));
		mapMethod.get("testing")
				.add(new MethodGoLangApiSignature("testing", "*B", "Helper", new String[] { "" }, new String[] { "" }));

		pkgs.add("syscall (openbsd-386-cgo)");
		mapConst.putIfAbsent("syscall (openbsd-386-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (openbsd-386-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (openbsd-386-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (openbsd-386-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (openbsd-386-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (openbsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-386-cgo)", "Credential struct, NoSetGroups bool"));

		pkgs.add("go/types");
		mapConst.putIfAbsent("go/types", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("go/types", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("go/types", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("go/types", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("go/types", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("go/types").add(new MethodGoLangApiSignature("go/types", "*TypeName", "IsAlias",
				new String[] { "" }, new String[] { "bool" }));
		mapFunc.get("go/types").add(new FuncGoLangApiSignature("go/types", "SizesFor",
				new String[] { "string", " string" }, new String[] { "Sizes" }));

		pkgs.add("math/bits");
		mapConst.putIfAbsent("math/bits", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("math/bits", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("math/bits", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("math/bits", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("math/bits", new HashSet<VarGoLangApiSignature>());

		mapConst.get("math/bits").add(new ConstGoLangApiSignature("math/bits", "UintSize", null, "ideal-int"));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "Reverse8", new String[] { "uint8" },
				new String[] { "uint8" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "ReverseBytes32",
				new String[] { "uint32" }, new String[] { "uint32" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "ReverseBytes64",
				new String[] { "uint64" }, new String[] { "uint64" }));
		mapFunc.get("math/bits").add(
				new FuncGoLangApiSignature("math/bits", "OnesCount", new String[] { "uint" }, new String[] { "int" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "OnesCount32", new String[] { "uint32" },
				new String[] { "int" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "TrailingZeros", new String[] { "uint" },
				new String[] { "int" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "LeadingZeros16",
				new String[] { "uint16" }, new String[] { "int" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "LeadingZeros32",
				new String[] { "uint32" }, new String[] { "int" }));
		mapFunc.get("math/bits")
				.add(new FuncGoLangApiSignature("math/bits", "Len", new String[] { "uint" }, new String[] { "int" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "TrailingZeros32",
				new String[] { "uint32" }, new String[] { "int" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "OnesCount16", new String[] { "uint16" },
				new String[] { "int" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "TrailingZeros16",
				new String[] { "uint16" }, new String[] { "int" }));
		mapFunc.get("math/bits").add(
				new FuncGoLangApiSignature("math/bits", "Len64", new String[] { "uint64" }, new String[] { "int" }));
		mapFunc.get("math/bits").add(
				new FuncGoLangApiSignature("math/bits", "Reverse", new String[] { "uint" }, new String[] { "uint" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "RotateLeft8",
				new String[] { "uint8", " int" }, new String[] { "uint8" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "Reverse32", new String[] { "uint32" },
				new String[] { "uint32" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "Reverse16", new String[] { "uint16" },
				new String[] { "uint16" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "TrailingZeros8", new String[] { "uint8" },
				new String[] { "int" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "RotateLeft64",
				new String[] { "uint64", " int" }, new String[] { "uint64" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "LeadingZeros", new String[] { "uint" },
				new String[] { "int" }));
		mapFunc.get("math/bits")
				.add(new FuncGoLangApiSignature("math/bits", "Len8", new String[] { "uint8" }, new String[] { "int" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "RotateLeft",
				new String[] { "uint", " int" }, new String[] { "uint" }));
		mapFunc.get("math/bits").add(
				new FuncGoLangApiSignature("math/bits", "Len16", new String[] { "uint16" }, new String[] { "int" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "Reverse64", new String[] { "uint64" },
				new String[] { "uint64" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "OnesCount64", new String[] { "uint64" },
				new String[] { "int" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "ReverseBytes", new String[] { "uint" },
				new String[] { "uint" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "LeadingZeros64",
				new String[] { "uint64" }, new String[] { "int" }));
		mapFunc.get("math/bits").add(
				new FuncGoLangApiSignature("math/bits", "Len32", new String[] { "uint32" }, new String[] { "int" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "RotateLeft16",
				new String[] { "uint16", " int" }, new String[] { "uint16" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "ReverseBytes16",
				new String[] { "uint16" }, new String[] { "uint16" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "TrailingZeros64",
				new String[] { "uint64" }, new String[] { "int" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "LeadingZeros8", new String[] { "uint8" },
				new String[] { "int" }));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "OnesCount8", new String[] { "uint8" },
				new String[] { "int" }));
		mapConst.get("math/bits").add(new ConstGoLangApiSignature("math/bits", "UintSize", " 64", null));
		mapFunc.get("math/bits").add(new FuncGoLangApiSignature("math/bits", "RotateLeft32",
				new String[] { "uint32", " int" }, new String[] { "uint32" }));

		pkgs.add("encoding/asn1");
		mapConst.putIfAbsent("encoding/asn1", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("encoding/asn1", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("encoding/asn1", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("encoding/asn1", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("encoding/asn1", new HashSet<VarGoLangApiSignature>());

		mapVar.get("encoding/asn1").add(new VarGoLangApiSignature("encoding/asn1", "NullBytes", "[]uint8"));
		mapVar.get("encoding/asn1").add(new VarGoLangApiSignature("encoding/asn1", "NullRawValue", "RawValue"));
		mapConst.get("encoding/asn1").add(new ConstGoLangApiSignature("encoding/asn1", "TagNull", null, "ideal-int"));
		mapConst.get("encoding/asn1").add(new ConstGoLangApiSignature("encoding/asn1", "TagNull", " 5", null));

		pkgs.add("go/ast");
		mapConst.putIfAbsent("go/ast", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("go/ast", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("go/ast", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("go/ast", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("go/ast", new HashSet<VarGoLangApiSignature>());

		mapType.get("go/ast").add(new TypeGoLangApiSignature("go/ast", "TypeSpec struct, Assign token.Pos"));

		pkgs.add("sync");
		mapConst.putIfAbsent("sync", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("sync", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("sync", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("sync", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("sync", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("sync").add(new MethodGoLangApiSignature("sync", "*Map", "Load", new String[] { "interface{}" },
				new String[] { "interface{}", " bool" }));
		mapMethod.get("sync").add(new MethodGoLangApiSignature("sync", "*Map", "LoadOrStore",
				new String[] { "interface{}", " interface{}" }, new String[] { "interface{}", " bool" }));
		mapMethod.get("sync").add(new MethodGoLangApiSignature("sync", "*Map", "Store",
				new String[] { "interface{}", " interface{}" }, new String[] { "" }));
		mapMethod.get("sync").add(new MethodGoLangApiSignature("sync", "*Map", "Delete", new String[] { "interface{}" },
				new String[] { "" }));
		mapMethod.get("sync").add(new MethodGoLangApiSignature("sync", "*Map", "Range",
				new String[] { "func(interface{}", " interface{}" }, new String[] { "bool)" }));
		mapType.get("sync").add(new TypeGoLangApiSignature("sync", "Map struct"));

		pkgs.add("syscall (openbsd-amd64)");
		mapConst.putIfAbsent("syscall (openbsd-amd64)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (openbsd-amd64)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (openbsd-amd64)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (openbsd-amd64)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (openbsd-amd64)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (openbsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64)", "Credential struct, NoSetGroups bool"));

		pkgs.add("database/sql");
		mapConst.putIfAbsent("database/sql", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("database/sql", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("database/sql", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("database/sql", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("database/sql", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("database/sql").add(new MethodGoLangApiSignature("database/sql", "*Conn", "Close",
				new String[] { "" }, new String[] { "error" }));
		mapMethod.get("database/sql").add(new MethodGoLangApiSignature("database/sql", "*Conn", "PrepareContext",
				new String[] { "context.Context", " string" }, new String[] { "*Stmt", " error" }));
		mapVar.get("database/sql").add(new VarGoLangApiSignature("database/sql", "ErrConnDone", "error"));
		mapType.get("database/sql").add(new TypeGoLangApiSignature("database/sql", "Out struct"));
		mapType.get("database/sql").add(new TypeGoLangApiSignature("database/sql", "Conn struct"));
		mapMethod.get("database/sql").add(new MethodGoLangApiSignature("database/sql", "*Conn", "QueryContext",
				new String[] { "context.Context", " string", " ...interface{}" }, new String[] { "*Rows", " error" }));
		mapMethod.get("database/sql").add(new MethodGoLangApiSignature("database/sql", "*Conn", "ExecContext",
				new String[] { "context.Context", " string", " ...interface{}" }, new String[] { "Result", " error" }));
		mapType.get("database/sql").add(new TypeGoLangApiSignature("database/sql", "Out struct, Dest interface{}"));
		mapType.get("database/sql").add(new TypeGoLangApiSignature("database/sql", "Out struct, In bool"));
		mapMethod.get("database/sql").add(new MethodGoLangApiSignature("database/sql", "*Conn", "BeginTx",
				new String[] { "context.Context", " *TxOptions" }, new String[] { "*Tx", " error" }));
		mapMethod.get("database/sql").add(new MethodGoLangApiSignature("database/sql", "*Conn", "PingContext",
				new String[] { "context.Context" }, new String[] { "error" }));
		mapMethod.get("database/sql").add(new MethodGoLangApiSignature("database/sql", "*DB", "Conn",
				new String[] { "context.Context" }, new String[] { "*Conn", " error" }));
		mapMethod.get("database/sql").add(new MethodGoLangApiSignature("database/sql", "*Conn", "QueryRowContext",
				new String[] { "context.Context", " string", " ...interface{}" }, new String[] { "*Row" }));

		pkgs.add("crypto");
		mapConst.putIfAbsent("crypto", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("crypto", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("crypto", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("crypto", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("crypto", new HashSet<VarGoLangApiSignature>());

		mapConst.get("crypto").add(new ConstGoLangApiSignature("crypto", "BLAKE2s_256", " 16", null));
		mapConst.get("crypto").add(new ConstGoLangApiSignature("crypto", "BLAKE2b_256", null, "Hash"));
		mapConst.get("crypto").add(new ConstGoLangApiSignature("crypto", "BLAKE2s_256", null, "Hash"));
		mapConst.get("crypto").add(new ConstGoLangApiSignature("crypto", "BLAKE2b_384", null, "Hash"));
		mapConst.get("crypto").add(new ConstGoLangApiSignature("crypto", "BLAKE2b_512", null, "Hash"));
		mapConst.get("crypto").add(new ConstGoLangApiSignature("crypto", "BLAKE2b_384", " 18", null));
		mapConst.get("crypto").add(new ConstGoLangApiSignature("crypto", "BLAKE2b_512", " 19", null));
		mapConst.get("crypto").add(new ConstGoLangApiSignature("crypto", "BLAKE2b_256", " 17", null));

		pkgs.add("syscall (linux-arm)");
		mapConst.putIfAbsent("syscall (linux-arm)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (linux-arm)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (linux-arm)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (linux-arm)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (linux-arm)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (linux-arm)")
				.add(new TypeGoLangApiSignature("syscall (linux-arm)", "SysProcAttr struct, AmbientCaps []uintptr"));
		mapType.get("syscall (linux-arm)")
				.add(new TypeGoLangApiSignature("syscall (linux-arm)", "Credential struct, NoSetGroups bool"));

		pkgs.add("syscall (netbsd-arm-cgo)");
		mapConst.putIfAbsent("syscall (netbsd-arm-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (netbsd-arm-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (netbsd-arm-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (netbsd-arm-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (netbsd-arm-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (netbsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (netbsd-arm-cgo)", "Credential struct, NoSetGroups bool"));

		pkgs.add("mime/multipart");
		mapConst.putIfAbsent("mime/multipart", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("mime/multipart", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("mime/multipart", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("mime/multipart", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("mime/multipart", new HashSet<VarGoLangApiSignature>());

		mapVar.get("mime/multipart").add(new VarGoLangApiSignature("mime/multipart", "ErrMessageTooLarge", "error"));
		mapType.get("mime/multipart")
				.add(new TypeGoLangApiSignature("mime/multipart", "FileHeader struct, Size int64"));

		pkgs.add("syscall (darwin-amd64-cgo)");
		mapConst.putIfAbsent("syscall (darwin-amd64-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (darwin-amd64-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (darwin-amd64-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (darwin-amd64-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (darwin-amd64-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (darwin-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (darwin-amd64-cgo)", "Credential struct, NoSetGroups bool"));

		pkgs.add("syscall (netbsd-386-cgo)");
		mapConst.putIfAbsent("syscall (netbsd-386-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (netbsd-386-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (netbsd-386-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (netbsd-386-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (netbsd-386-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (netbsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (netbsd-386-cgo)", "Credential struct, NoSetGroups bool"));

		pkgs.add("syscall (darwin-amd64)");
		mapConst.putIfAbsent("syscall (darwin-amd64)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (darwin-amd64)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (darwin-amd64)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (darwin-amd64)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (darwin-amd64)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (darwin-amd64)")
				.add(new TypeGoLangApiSignature("syscall (darwin-amd64)", "Credential struct, NoSetGroups bool"));

		pkgs.add("runtime/pprof");
		mapConst.putIfAbsent("runtime/pprof", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("runtime/pprof", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("runtime/pprof", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("runtime/pprof", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("runtime/pprof", new HashSet<VarGoLangApiSignature>());

		mapType.get("runtime/pprof").add(new TypeGoLangApiSignature("runtime/pprof", "LabelSet struct"));
		mapFunc.get("runtime/pprof").add(new FuncGoLangApiSignature("runtime/pprof", "Label",
				new String[] { "context.Context", " string" }, new String[] { "string", " bool" }));
		mapFunc.get("runtime/pprof").add(new FuncGoLangApiSignature("runtime/pprof", "WithLabels",
				new String[] { "context.Context", " LabelSet" }, new String[] { "context.Context" }));
		mapFunc.get("runtime/pprof").add(new FuncGoLangApiSignature("runtime/pprof", "Labels",
				new String[] { "...string" }, new String[] { "LabelSet" }));
		mapFunc.get("runtime/pprof").add(new FuncGoLangApiSignature("runtime/pprof", "SetGoroutineLabels",
				new String[] { "context.Context" }, new String[] { "" }));

		pkgs.add("encoding/base32");
		mapConst.putIfAbsent("encoding/base32", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("encoding/base32", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("encoding/base32", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("encoding/base32", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("encoding/base32", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("encoding/base32").add(new MethodGoLangApiSignature("encoding/base32", "Encoding", "WithPadding",
				new String[] { "int32" }, new String[] { "*Encoding" }));
		mapConst.get("encoding/base32").add(new ConstGoLangApiSignature("encoding/base32", "NoPadding", null, "int32"));
		mapConst.get("encoding/base32").add(new ConstGoLangApiSignature("encoding/base32", "StdPadding", " 61", null));
		mapConst.get("encoding/base32").add(new ConstGoLangApiSignature("encoding/base32", "NoPadding", " -1", null));
		mapConst.get("encoding/base32")
				.add(new ConstGoLangApiSignature("encoding/base32", "StdPadding", null, "int32"));

		pkgs.add("html/template");
		mapConst.putIfAbsent("html/template", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("html/template", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("html/template", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("html/template", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("html/template", new HashSet<VarGoLangApiSignature>());

		mapConst.get("html/template")
				.add(new ConstGoLangApiSignature("html/template", "ErrPredefinedEscaper", null, "ErrorCode"));
		mapConst.get("html/template")
				.add(new ConstGoLangApiSignature("html/template", "ErrPredefinedEscaper", " 11", null));

		pkgs.add("syscall (windows-amd64)");
		mapConst.putIfAbsent("syscall (windows-amd64)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (windows-amd64)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (windows-amd64)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (windows-amd64)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (windows-amd64)", new HashSet<VarGoLangApiSignature>());

		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "WSAECONNABORTED", null, "Errno"));
		mapConst.get("syscall (windows-amd64)")
				.add(new ConstGoLangApiSignature("syscall (windows-amd64)", "WSAECONNABORTED", " 10053", null));

		pkgs.add("syscall");
		mapConst.putIfAbsent("syscall", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall").add(new TypeGoLangApiSignature("syscall", "RawConn interface { Control, Read, Write }"));
		mapType.get("syscall")
				.add(new TypeGoLangApiSignature("syscall", "RawConn interface, Write(func(uintptr) bool) error"));
		mapType.get("syscall").add(new TypeGoLangApiSignature("syscall", "Conn interface { SyscallConn }"));
		mapType.get("syscall")
				.add(new TypeGoLangApiSignature("syscall", "Conn interface, SyscallConn() (RawConn, error)"));
		mapType.get("syscall")
				.add(new TypeGoLangApiSignature("syscall", "RawConn interface, Control(func(uintptr)) error"));
		mapType.get("syscall")
				.add(new TypeGoLangApiSignature("syscall", "RawConn interface, Read(func(uintptr) bool) error"));

		pkgs.add("syscall (linux-386)");
		mapConst.putIfAbsent("syscall (linux-386)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (linux-386)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (linux-386)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (linux-386)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (linux-386)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (linux-386)")
				.add(new TypeGoLangApiSignature("syscall (linux-386)", "SysProcAttr struct, AmbientCaps []uintptr"));
		mapType.get("syscall (linux-386)")
				.add(new TypeGoLangApiSignature("syscall (linux-386)", "Credential struct, NoSetGroups bool"));

		pkgs.add("syscall (freebsd-arm-cgo)");
		mapConst.putIfAbsent("syscall (freebsd-arm-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (freebsd-arm-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (freebsd-arm-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (freebsd-arm-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (freebsd-arm-cgo)", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("syscall (freebsd-arm-cgo)").add(new FuncGoLangApiSignature("syscall (freebsd-arm-cgo)", "Pipe2",
				new String[] { "[]int", " int" }, new String[] { "error" }));
		mapType.get("syscall (freebsd-arm-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm-cgo)", "Credential struct, NoSetGroups bool"));

		pkgs.add("syscall (freebsd-386-cgo)");
		mapConst.putIfAbsent("syscall (freebsd-386-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (freebsd-386-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (freebsd-386-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (freebsd-386-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (freebsd-386-cgo)", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("syscall (freebsd-386-cgo)").add(new FuncGoLangApiSignature("syscall (freebsd-386-cgo)", "Pipe2",
				new String[] { "[]int", " int" }, new String[] { "error" }));
		mapType.get("syscall (freebsd-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386-cgo)", "Credential struct, NoSetGroups bool"));

		pkgs.add("syscall (freebsd-amd64-cgo)");
		mapConst.putIfAbsent("syscall (freebsd-amd64-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (freebsd-amd64-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (freebsd-amd64-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (freebsd-amd64-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (freebsd-amd64-cgo)", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("syscall (freebsd-amd64-cgo)").add(new FuncGoLangApiSignature("syscall (freebsd-amd64-cgo)",
				"Pipe2", new String[] { "[]int", " int" }, new String[] { "error" }));
		mapType.get("syscall (freebsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64-cgo)", "Credential struct, NoSetGroups bool"));

		pkgs.add("runtime/pprof, func ForLabels(context.Context");
		mapConst.putIfAbsent("runtime/pprof, func ForLabels(context.Context", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("runtime/pprof, func ForLabels(context.Context", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("runtime/pprof, func ForLabels(context.Context", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("runtime/pprof, func ForLabels(context.Context", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("runtime/pprof, func ForLabels(context.Context", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("runtime/pprof, func ForLabels(context.Context").add(new FuncGoLangApiSignature("runtime/pprof",
				"ForLabels", new String[] { "context.Context", " func(string", " string" }, new String[] { "bool)" }));

		pkgs.add("syscall (freebsd-386)");
		mapConst.putIfAbsent("syscall (freebsd-386)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (freebsd-386)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (freebsd-386)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (freebsd-386)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (freebsd-386)", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("syscall (freebsd-386)").add(new FuncGoLangApiSignature("syscall (freebsd-386)", "Pipe2",
				new String[] { "[]int", " int" }, new String[] { "error" }));
		mapType.get("syscall (freebsd-386)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-386)", "Credential struct, NoSetGroups bool"));

		pkgs.add("syscall (darwin-386-cgo)");
		mapConst.putIfAbsent("syscall (darwin-386-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (darwin-386-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (darwin-386-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (darwin-386-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (darwin-386-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (darwin-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (darwin-386-cgo)", "Credential struct, NoSetGroups bool"));

		pkgs.add("syscall (netbsd-arm)");
		mapConst.putIfAbsent("syscall (netbsd-arm)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (netbsd-arm)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (netbsd-arm)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (netbsd-arm)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (netbsd-arm)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (netbsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (netbsd-arm)", "Credential struct, NoSetGroups bool"));

		pkgs.add("runtime/pprof, func Do(context.Context, LabelSet");
		mapConst.putIfAbsent("runtime/pprof, func Do(context.Context, LabelSet",
				new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("runtime/pprof, func Do(context.Context, LabelSet", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("runtime/pprof, func Do(context.Context, LabelSet",
				new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("runtime/pprof, func Do(context.Context, LabelSet", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("runtime/pprof, func Do(context.Context, LabelSet", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("runtime/pprof, func Do(context.Context, LabelSet").add(new FuncGoLangApiSignature("runtime/pprof",
				"Do", new String[] { "context.Context", " LabelSet", " func(context.Context" }, new String[] { ")" }));

		pkgs.add("syscall (freebsd-arm)");
		mapConst.putIfAbsent("syscall (freebsd-arm)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (freebsd-arm)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (freebsd-arm)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (freebsd-arm)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (freebsd-arm)", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("syscall (freebsd-arm)").add(new FuncGoLangApiSignature("syscall (freebsd-arm)", "Pipe2",
				new String[] { "[]int", " int" }, new String[] { "error" }));
		mapType.get("syscall (freebsd-arm)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-arm)", "Credential struct, NoSetGroups bool"));

		pkgs.add("image/png");
		mapConst.putIfAbsent("image/png", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("image/png", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("image/png", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("image/png", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("image/png", new HashSet<VarGoLangApiSignature>());

		mapType.get("image/png")
				.add(new TypeGoLangApiSignature("image/png", "EncoderBufferPool interface, Put(*EncoderBuffer)"));
		mapType.get("image/png")
				.add(new TypeGoLangApiSignature("image/png", "Encoder struct, BufferPool EncoderBufferPool"));
		mapType.get("image/png")
				.add(new TypeGoLangApiSignature("image/png", "EncoderBufferPool interface { Get, Put }"));
		mapType.get("image/png")
				.add(new TypeGoLangApiSignature("image/png", "EncoderBufferPool interface, Get() *EncoderBuffer"));
		mapType.get("image/png").add(new TypeGoLangApiSignature("image/png", "EncoderBuffer struct"));

		pkgs.add("syscall (openbsd-amd64-cgo)");
		mapConst.putIfAbsent("syscall (openbsd-amd64-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (openbsd-amd64-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (openbsd-amd64-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (openbsd-amd64-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (openbsd-amd64-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (openbsd-amd64-cgo)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-amd64-cgo)", "Credential struct, NoSetGroups bool"));

		pkgs.add("syscall (darwin-386)");
		mapConst.putIfAbsent("syscall (darwin-386)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (darwin-386)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (darwin-386)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (darwin-386)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (darwin-386)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (darwin-386)")
				.add(new TypeGoLangApiSignature("syscall (darwin-386)", "Credential struct, NoSetGroups bool"));

		pkgs.add("hash/fnv");
		mapConst.putIfAbsent("hash/fnv", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("hash/fnv", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("hash/fnv", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("hash/fnv", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("hash/fnv", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("hash/fnv").add(
				new FuncGoLangApiSignature("hash/fnv", "New128a", new String[] { "" }, new String[] { "hash.Hash" }));
		mapFunc.get("hash/fnv").add(
				new FuncGoLangApiSignature("hash/fnv", "New128", new String[] { "" }, new String[] { "hash.Hash" }));

		pkgs.add("syscall (netbsd-386)");
		mapConst.putIfAbsent("syscall (netbsd-386)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (netbsd-386)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (netbsd-386)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (netbsd-386)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (netbsd-386)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (netbsd-386)")
				.add(new TypeGoLangApiSignature("syscall (netbsd-386)", "Credential struct, NoSetGroups bool"));

		pkgs.add("net/http");
		mapConst.putIfAbsent("net/http", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("net/http", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("net/http", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("net/http", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("net/http", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("net/http").add(new MethodGoLangApiSignature("net/http", "*Server", "ServeTLS",
				new String[] { "net.Listener", " string", " string" }, new String[] { "error" }));
		mapFunc.get("net/http").add(new FuncGoLangApiSignature("net/http", "ServeTLS",
				new String[] { "net.Listener", " Handler", " string", " string" }, new String[] { "error" }));
		mapMethod.get("net/http").add(new MethodGoLangApiSignature("net/http", "*Server", "RegisterOnShutdown",
				new String[] { "func(" }, new String[] { ")" }));

		pkgs.add("syscall (linux-386-cgo)");
		mapConst.putIfAbsent("syscall (linux-386-cgo)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (linux-386-cgo)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (linux-386-cgo)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (linux-386-cgo)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (linux-386-cgo)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (linux-386-cgo)").add(
				new TypeGoLangApiSignature("syscall (linux-386-cgo)", "SysProcAttr struct, AmbientCaps []uintptr"));
		mapType.get("syscall (linux-386-cgo)")
				.add(new TypeGoLangApiSignature("syscall (linux-386-cgo)", "Credential struct, NoSetGroups bool"));

		pkgs.add("syscall (openbsd-386)");
		mapConst.putIfAbsent("syscall (openbsd-386)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (openbsd-386)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (openbsd-386)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (openbsd-386)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (openbsd-386)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (openbsd-386)")
				.add(new TypeGoLangApiSignature("syscall (openbsd-386)", "Credential struct, NoSetGroups bool"));

		pkgs.add("encoding/json");
		mapConst.putIfAbsent("encoding/json", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("encoding/json", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("encoding/json", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("encoding/json", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("encoding/json", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("encoding/json").add(new FuncGoLangApiSignature("encoding/json", "Valid",
				new String[] { "[]uint8" }, new String[] { "bool" }));

		pkgs.add("syscall (freebsd-amd64)");
		mapConst.putIfAbsent("syscall (freebsd-amd64)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (freebsd-amd64)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (freebsd-amd64)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (freebsd-amd64)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (freebsd-amd64)", new HashSet<VarGoLangApiSignature>());

		mapFunc.get("syscall (freebsd-amd64)").add(new FuncGoLangApiSignature("syscall (freebsd-amd64)", "Pipe2",
				new String[] { "[]int", " int" }, new String[] { "error" }));
		mapType.get("syscall (freebsd-amd64)")
				.add(new TypeGoLangApiSignature("syscall (freebsd-amd64)", "Credential struct, NoSetGroups bool"));

		pkgs.add("time");
		mapConst.putIfAbsent("time", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("time", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("time", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("time", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("time", new HashSet<VarGoLangApiSignature>());

		mapMethod.get("time").add(new MethodGoLangApiSignature("time", "Duration", "Round", new String[] { "Duration" },
				new String[] { "Duration" }));
		mapMethod.get("time").add(new MethodGoLangApiSignature("time", "Duration", "Truncate",
				new String[] { "Duration" }, new String[] { "Duration" }));

		pkgs.add("syscall (linux-amd64)");
		mapConst.putIfAbsent("syscall (linux-amd64)", new HashSet<ConstGoLangApiSignature>());
		mapFunc.putIfAbsent("syscall (linux-amd64)", new HashSet<FuncGoLangApiSignature>());
		mapMethod.putIfAbsent("syscall (linux-amd64)", new HashSet<MethodGoLangApiSignature>());
		mapType.putIfAbsent("syscall (linux-amd64)", new HashSet<TypeGoLangApiSignature>());
		mapVar.putIfAbsent("syscall (linux-amd64)", new HashSet<VarGoLangApiSignature>());

		mapType.get("syscall (linux-amd64)")
				.add(new TypeGoLangApiSignature("syscall (linux-amd64)", "SysProcAttr struct, AmbientCaps []uintptr"));
		mapType.get("syscall (linux-amd64)")
				.add(new TypeGoLangApiSignature("syscall (linux-amd64)", "Credential struct, NoSetGroups bool"));

	}

}