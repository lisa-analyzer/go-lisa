package it.unive.golisa.golang.util;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import it.unive.golisa.golang.api.signature.ConstGoLangApiSignature;
import it.unive.golisa.golang.api.signature.FuncGoLangApiSignature;
import it.unive.golisa.golang.api.signature.MethodGoLangApiSignature;
import it.unive.golisa.golang.api.signature.TypeGoLangApiSignature;
import it.unive.golisa.golang.api.signature.VarGoLangApiSignature;

/**
 * Auto-generated by GoLiSA build
 */
public class GoLangAPISignatureMapper {

	private static GoLangAPISignatureMapper instance = null;

	// singleton pattern
	public static synchronized GoLangAPISignatureMapper getGoApiSignatures() {
		if (instance == null) {
			instance = new GoLangAPISignatureMapper();
		}
		return instance;
	}

	private final Map<String, Set<ConstGoLangApiSignature>> mapConst;
	private final Map<String, Set<FuncGoLangApiSignature>> mapFunc;
	private final Map<String, Set<MethodGoLangApiSignature>> mapMethod;
	private final Map<String, Set<TypeGoLangApiSignature>> mapType;
	private final Map<String, Set<VarGoLangApiSignature>> mapVar;
	private final Set<String> pkgs;

	private GoLangAPISignatureMapper() {
		long t = System.currentTimeMillis();
		pkgs = new HashSet<>();
		mapConst = new HashMap<String, Set<ConstGoLangApiSignature>>();
		mapFunc = new HashMap<String, Set<FuncGoLangApiSignature>>();
		mapMethod = new HashMap<String, Set<MethodGoLangApiSignature>>();
		mapType = new HashMap<String, Set<TypeGoLangApiSignature>>();
		mapVar = new HashMap<String, Set<VarGoLangApiSignature>>();

		build();

		t = System.currentTimeMillis() - t;
		System.out.println(t);
	}

	public Set<String> getPackages() {
		return pkgs;
	}

	public Map<String, Set<ConstGoLangApiSignature>> getMapConst() {
		return mapConst;
	}

	public Map<String, Set<FuncGoLangApiSignature>> getMapFunc() {
		return mapFunc;
	}

	public Map<String, Set<MethodGoLangApiSignature>> getMapMethod() {
		return mapMethod;
	}

	public Map<String, Set<TypeGoLangApiSignature>> getMapType() {
		return mapType;
	}

	public Map<String, Set<VarGoLangApiSignature>> getMapVar() {
		return mapVar;
	}

	private void build() {
		Except g0 = new Except();

		pkgs.addAll(g0.getPackages());
		mapConst.putAll(g0.getMapConst());
		mapFunc.putAll(g0.getMapFunc());
		mapMethod.putAll(g0.getMapMethod());
		mapType.putAll(g0.getMapType());
		mapVar.putAll(g0.getMapVar());

		Go1_1 g1 = new Go1_1();

		pkgs.addAll(g1.getPackages());
		mapConst.putAll(g1.getMapConst());
		mapFunc.putAll(g1.getMapFunc());
		mapMethod.putAll(g1.getMapMethod());
		mapType.putAll(g1.getMapType());
		mapVar.putAll(g1.getMapVar());

		Go1_10 g2 = new Go1_10();

		pkgs.addAll(g2.getPackages());
		mapConst.putAll(g2.getMapConst());
		mapFunc.putAll(g2.getMapFunc());
		mapMethod.putAll(g2.getMapMethod());
		mapType.putAll(g2.getMapType());
		mapVar.putAll(g2.getMapVar());

		Go1_11 g3 = new Go1_11();

		pkgs.addAll(g3.getPackages());
		mapConst.putAll(g3.getMapConst());
		mapFunc.putAll(g3.getMapFunc());
		mapMethod.putAll(g3.getMapMethod());
		mapType.putAll(g3.getMapType());
		mapVar.putAll(g3.getMapVar());

		Go1_12 g4 = new Go1_12();

		pkgs.addAll(g4.getPackages());
		mapConst.putAll(g4.getMapConst());
		mapFunc.putAll(g4.getMapFunc());
		mapMethod.putAll(g4.getMapMethod());
		mapType.putAll(g4.getMapType());
		mapVar.putAll(g4.getMapVar());

		Go1_13 g5 = new Go1_13();

		pkgs.addAll(g5.getPackages());
		mapConst.putAll(g5.getMapConst());
		mapFunc.putAll(g5.getMapFunc());
		mapMethod.putAll(g5.getMapMethod());
		mapType.putAll(g5.getMapType());
		mapVar.putAll(g5.getMapVar());

		Go1_14 g6 = new Go1_14();

		pkgs.addAll(g6.getPackages());
		mapConst.putAll(g6.getMapConst());
		mapFunc.putAll(g6.getMapFunc());
		mapMethod.putAll(g6.getMapMethod());
		mapType.putAll(g6.getMapType());
		mapVar.putAll(g6.getMapVar());

		Go1_15 g7 = new Go1_15();

		pkgs.addAll(g7.getPackages());
		mapConst.putAll(g7.getMapConst());
		mapFunc.putAll(g7.getMapFunc());
		mapMethod.putAll(g7.getMapMethod());
		mapType.putAll(g7.getMapType());
		mapVar.putAll(g7.getMapVar());

		Go1_16 g8 = new Go1_16();

		pkgs.addAll(g8.getPackages());
		mapConst.putAll(g8.getMapConst());
		mapFunc.putAll(g8.getMapFunc());
		mapMethod.putAll(g8.getMapMethod());
		mapType.putAll(g8.getMapType());
		mapVar.putAll(g8.getMapVar());

		Go1_17 g9 = new Go1_17();

		pkgs.addAll(g9.getPackages());
		mapConst.putAll(g9.getMapConst());
		mapFunc.putAll(g9.getMapFunc());
		mapMethod.putAll(g9.getMapMethod());
		mapType.putAll(g9.getMapType());
		mapVar.putAll(g9.getMapVar());

		Go1_2 g10 = new Go1_2();

		pkgs.addAll(g10.getPackages());
		mapConst.putAll(g10.getMapConst());
		mapFunc.putAll(g10.getMapFunc());
		mapMethod.putAll(g10.getMapMethod());
		mapType.putAll(g10.getMapType());
		mapVar.putAll(g10.getMapVar());

		Go1_3 g11 = new Go1_3();

		pkgs.addAll(g11.getPackages());
		mapConst.putAll(g11.getMapConst());
		mapFunc.putAll(g11.getMapFunc());
		mapMethod.putAll(g11.getMapMethod());
		mapType.putAll(g11.getMapType());
		mapVar.putAll(g11.getMapVar());

		Go1_4 g12 = new Go1_4();

		pkgs.addAll(g12.getPackages());
		mapConst.putAll(g12.getMapConst());
		mapFunc.putAll(g12.getMapFunc());
		mapMethod.putAll(g12.getMapMethod());
		mapType.putAll(g12.getMapType());
		mapVar.putAll(g12.getMapVar());

		Go1_5 g13 = new Go1_5();

		pkgs.addAll(g13.getPackages());
		mapConst.putAll(g13.getMapConst());
		mapFunc.putAll(g13.getMapFunc());
		mapMethod.putAll(g13.getMapMethod());
		mapType.putAll(g13.getMapType());
		mapVar.putAll(g13.getMapVar());

		Go1_6 g14 = new Go1_6();

		pkgs.addAll(g14.getPackages());
		mapConst.putAll(g14.getMapConst());
		mapFunc.putAll(g14.getMapFunc());
		mapMethod.putAll(g14.getMapMethod());
		mapType.putAll(g14.getMapType());
		mapVar.putAll(g14.getMapVar());

		Go1_7 g15 = new Go1_7();

		pkgs.addAll(g15.getPackages());
		mapConst.putAll(g15.getMapConst());
		mapFunc.putAll(g15.getMapFunc());
		mapMethod.putAll(g15.getMapMethod());
		mapType.putAll(g15.getMapType());
		mapVar.putAll(g15.getMapVar());

		Go1_8 g16 = new Go1_8();

		pkgs.addAll(g16.getPackages());
		mapConst.putAll(g16.getMapConst());
		mapFunc.putAll(g16.getMapFunc());
		mapMethod.putAll(g16.getMapMethod());
		mapType.putAll(g16.getMapType());
		mapVar.putAll(g16.getMapVar());

		Go1_9 g17 = new Go1_9();

		pkgs.addAll(g17.getPackages());
		mapConst.putAll(g17.getMapConst());
		mapFunc.putAll(g17.getMapFunc());
		mapMethod.putAll(g17.getMapMethod());
		mapType.putAll(g17.getMapType());
		mapVar.putAll(g17.getMapVar());

		Go1 g18 = new Go1();

		pkgs.addAll(g18.getPackages());
		mapConst.putAll(g18.getMapConst());
		mapFunc.putAll(g18.getMapFunc());
		mapMethod.putAll(g18.getMapMethod());
		mapType.putAll(g18.getMapType());
		mapVar.putAll(g18.getMapVar());

	}

}